# This file is distributed under the same license as the Sonic Pi package.
# Do not edit this file, use Weblate instead.
# Read TRANSLATION.md for more information.
msgid ""
msgstr ""
"Project-Id-Version: Sonic Pi\n"
"PO-Revision-Date: 2020-10-16 14:26+0000\n"
"Last-Translator: Lukas Spee <lukasspee@gmail.com>\n"
"Language-Team: Dutch <https://hosted.weblate.org/projects/sonic-pi/tutorial/nl"
"/>\n"
"Language: nl\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=n != 1;\n"
"X-Generator: Weblate 4.3.1-dev\n"

#: 01-Welcome-to-Sonic-Pi.md:1
msgid "1 Welcome to Sonic Pi"
msgstr "1 Welkom bij Sonic Pi"

#: 01-Welcome-to-Sonic-Pi.md:3
msgid "Welcome friend :-)"
msgstr "Welkom vriend :-)"

#: 01-Welcome-to-Sonic-Pi.md:5
msgid ""
"Welcome to Sonic Pi. Hopefully you're as excited to get started making crazy s"
"ounds as I am to show you. It's going to be a really *fun* ride where you'll l"
"earn all about music, synthesis, programming, composition, performance and mor"
"e."
msgstr ""
"Welkom bij Sonic Pi. Hopelijk ben je net zo enthousiast als ik om te gekke kla"
"nken te gaan maken. Het zal een *leuk* avontuur worden, waarin je alles over m"
"uziek, synthese, programmeren, compositie en ook live spelen gaat leren en nog"
" veel meer..."

#: 01-Welcome-to-Sonic-Pi.md:10
msgid ""
"But wait, how rude of me! Let me introduce myself - I'm [Sam Aaron](https://tw"
"itter.com/samaaron) - the chap that created Sonic Pi. You can find me at [@sam"
"aaron](http://twitter.com/samaaron) on Twitter and I'd be more than happy to s"
"ay hello to you. You might also be interested in finding out more about my [Li"
"ve Coding Performances](https://youtube.com/samaaron) where I code with Sonic "
"Pi live in front of audiences."
msgstr ""
"Maar wacht,dat was onbeleefd van mij! Ik moet mij nog voorstellen.\n"
"Ik ben [Sam Aaron] ( http://twitter.com/samaaron ) de kerel die Sonic Pi creëe"
"rde.\n"
"Je vind mij als [@samaaron](http://twitter.com/samaaron) op Twitter en ik zal "
"heel blij zijn om je daar te kunnen begroeten. Misschien ben je ook geïnteress"
"eerd om meer te weten te komen over mijn [Live Coding Performances] (https://y"
"outube.com/samaaron) waar ik, voor publiek, live codeer met Sonic Pi."

#: 01-Welcome-to-Sonic-Pi.md:18
msgid ""
"If you have any thoughts, or ideas for improving Sonic Pi - please pass them o"
"n - feedback is so helpful. You never know, your idea might be the next big fe"
"ature!"
msgstr ""
"Mocht je gedachten of ideeën hebben om Sonic Pi te verbeteren, aarzel dan niet"
" om deze door te geven; terugkoppeling is zo nuttig. En, je weet het nooit, jo"
"uw idee zou de volgende grote nieuwe functie kunnen zijn!"

#: 01-Welcome-to-Sonic-Pi.md:22
msgid ""
"This tutorial is divided up into sections grouped by category. Whilst I've wri"
"tten it to have an easy learning progression from start to finish, feel very f"
"ree just to dip in and out of sections as you see fit. If you feel that there'"
"s something missing, do let me know and I'll consider it for a future version."
msgstr ""
"Deze handleiding is verdeeld in secties en gegroepeerd per categorie. Hoewel i"
"k deze in een volgorde geschreven heb met een eenvoudige leercurve voor ogen, "
"wees vrij, om in afzonderlijke secties te duiken zoals jij dat wil. Als je het"
" gevoel hebt dat er iets ontbreekt, laat dit gerust aan mij weten, ik zal jouw"
" bedenking in overweging nemen voor een toekomstige versie."

#: 01-Welcome-to-Sonic-Pi.md:28
msgid ""
"Finally, watching others live code is a really great way to learn. I regularly"
" stream live on [https://youtube.com/samaaron](http://youtube.com/samaaron) so"
" please do drop by, say hi and ask me lots of questions :-)"
msgstr ""
"Tenslotte, andermans live code bekijken is een geweldige manier om te leren. R"
"egelmatig stream ik live op [http://youtube.com/samaaron](http://youtube.com/s"
"amaaron) ga daar eens kijken, zeg hallo en stel me veel vragen :-)"

#: 01-Welcome-to-Sonic-Pi.md:33
msgid "OK, let's get started..."
msgstr "OK, laten we beginnen..."

#: 01.1-Live-Coding.md:1
msgid "1.1 Live Coding"
msgstr "1.1 Live Coderen (Live Coding)"

#: 01.1-Live-Coding.md:3 09-Live-Coding.md:3 09.1-Live-Coding-Fundamentals.md:3
#: A.02-live-coding.md:3
msgid "Live Coding"
msgstr "Live Coderen"

#: 01.1-Live-Coding.md:5
msgid ""
"One of the most exciting aspects of Sonic Pi is that it enables you to write a"
"nd *modify code live* to make music, just like you might perform live with a g"
"uitar. This means that given some practice you can take Sonic Pi on stage and "
"gig with it."
msgstr ""
"Een van de meest opwindende aspecten van Sonic Pi is, dat het je in staat stel"
"t, code te gaan schrijven en *de code, ook live te wijzigen* om muziek te spel"
"en, net zoals je live gitaar zou spelen. Dit betekent dat je, mits wat oefenin"
"g, met Sonic Pi het podium op kan en hiermee kan optreden."

#: 01.1-Live-Coding.md:10
msgid "Free your mind"
msgstr "Maak je hoofd leeg"

#: 01.1-Live-Coding.md:12
msgid ""
"Before we get into the real details of how Sonic Pi works in the rest of this "
"tutorial, I'd like to give you an experience of what it's like to live code. D"
"on't worry if you don't understand much (or any) of this. Just try to hold ont"
"o your seats and enjoy..."
msgstr ""
"Voor we in detail gaan over hoe Sonic Pi werkt, verderop in deze handleiding, "
"wil ik je even de ervaring meegeven, hoe het voelt om live te coderen. Maak je"
" geen zorgen als je hier niet veel (of niets) van begrijpt. Blijf gewoon even "
"zitten en geniet ..."

#: 01.1-Live-Coding.md:17
msgid "A live loop"
msgstr "Een loop \"live\" brengen"

#: 01.1-Live-Coding.md:19
msgid "Let's get started, copy the following code into an empty buffer:"
msgstr "We gaan van start, kopieer de volgende code in een lege buffer:"

#: 01.1-Live-Coding.md:21
#, no-wrap
msgid ""
"live_loop :flibble do\n"
"  sample :bd_haus, rate: 1\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :flibble do\n"
"  sample :bd_haus, rate: 1\n"
"  sleep 0.5\n"
"end"

#: 01.1-Live-Coding.md:28
msgid ""
"Now, press the `Run` button and you'll hear a nice fast bass drum beating away"
". If at any time you wish to stop the sound just hit the `Stop` button. Althou"
"gh don't hit it just yet... Instead, follow these steps:"
msgstr ""
"Klik nu op de `afspeelknop` en je zal een lekkere snelle basdrum horen. Je kan"
" nu, als je dat wenst, het geluid stoppen door op de `Stopknop` te klikken. Ma"
"ar doe dat nog even niet... volg in plaats daarvan de volgende stappen:"

#: 01.1-Live-Coding.md:32
msgid "Make sure the bass drum sound is still running"
msgstr "Zorg ervoor dat deze basdrum klank nog steeds loopt"

#: 01.1-Live-Coding.md:33
msgid "Change the `sleep` value from `0.5` to something higher like `1`."
msgstr ""
"Verander de waarde van 'sleep' van '0.5' naar een ietwat hoger getal,zoals bv."
" `1`."

#: 01.1-Live-Coding.md:34
msgid "Press the `Run` button again"
msgstr "Klik opnieuw op de `afspeelknop`"

#: 01.1-Live-Coding.md:35
msgid "Notice how the drum speed has changed."
msgstr "Merk op dat de snelheid van de drum hierbij veranderd is."

#: 01.1-Live-Coding.md:36
msgid ""
"Finally, *remember this moment*, this is the first time you've live coded with"
" Sonic Pi and it's unlikely to be your last..."
msgstr ""
"En *onthou dit moment*, dit is de eerste keer dat je een Live Code met Sonic P"
"i hebt gedaan en het is waarschijnlijk niet je laatste keer..."

#: 01.1-Live-Coding.md:39
msgid ""
"Ok, that was simple enough. Let's add something else into the mix. Above `samp"
"le :bd_haus` add the line `sample :ambi_choir, rate: 0.3`. Your code should lo"
"ok like this:"
msgstr ""
"Ok, dat was eenvoudig. We gaan er nog iets aan de mix toevoegen. Boven `sample"
" :bd_haus` voeg je deze lijn toe  `sample :ambi_choir, rate: 0.3`. Jouw code m"
"oet er nu als volgt uitzien:"

#: 01.1-Live-Coding.md:43
#, no-wrap
msgid ""
"live_loop :flibble do\n"
"  sample :ambi_choir, rate: 0.3\n"
"  sample :bd_haus, rate: 1\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :typmaarlustig do\n"
"  sample :ambi_choir, rate: 0.3\n"
"  sample :bd_haus, rate: 1\n"
"  sleep 1\n"
"end"

#: 01.1-Live-Coding.md:51
msgid ""
"Now, play around. Change the rates - what happens when you use high values, or"
" small values or negative values? See what happens when you change the `rate:`"
" value for the `:ambi_choir` sample just slightly (say to `0.29`). What happen"
"s if you choose a really small `sleep` value? See if you can make it go so fas"
"t your computer will stop with an error because it can't keep up (if that happ"
"ens, just choose a bigger `sleep` time and hit `Run` again)."
msgstr ""
"Speel hiermee. Verander de `rate:` (snelheid) waardes - wat gebeurd er, als je"
" hoge waarden gebruikt,of kleine waarden of negatieve waarden? Kijk wat er geb"
"eurd wanneer je de `rate:` waarde van het `:ambi_choir` sample maar een tikkel"
"tje veranderd (bv. 0.29). Wat gebeurd er als je een héél kleine `sleep` (rust)"
" waarde kiest? Kijk nu of je het zo snel kan laten gaan dat je computer stopt "
"en een foutmelding geeft omdat hij het niet meer kan verwerken (wanneer dit ge"
"beurd, kun je gewoon een grotere `sleep` tijd instellen en op `afspelen` klikk"
"en)."

#: 01.1-Live-Coding.md:59
msgid "Try commenting one of the `sample` lines out by adding a `#` to the beginning:"
msgstr ""
"Probeer één van de `sample` lijnen van een commentaar te voorzien door er een "
"`#` voor te zetten:"

#: 01.1-Live-Coding.md:62
#, no-wrap
msgid ""
"live_loop :flibble do\n"
"  sample :ambi_choir, rate: 0.3\n"
"#  sample :bd_haus, rate: 1\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :typmaarlustig do\n"
"  sample :ambi_choir, rate: 0.3\n"
"#  sample :bd_haus, rate: 1\n"
"  sleep 1\n"
"end"

#: 01.1-Live-Coding.md:70
msgid ""
"Notice how it tells the computer to ignore it, so we don't hear it. This is ca"
"lled a comment. In Sonic Pi we can use comments to remove and add things into "
"the mix."
msgstr ""
"Merk op hoe het de computer opdraagt deze lijn te negeren, zodat we deze niet "
"horen. Dit heet een comment (commentaarlijn). In Sonic Pi kunnen we een commen"
"taarlijn gebruiken om klanken uit de mix te verwijderen of toe te voegen."

#: 01.1-Live-Coding.md:74
msgid ""
"Finally, let me leave you something fun to play with. Take the code below, and"
" copy it into a spare buffer. Now, don't try to understand it too much other t"
"han see that there are two loops - so two things going round at the same time."
" Now, do what you do best - experiment and play around. Here are some suggesti"
"ons:"
msgstr ""
"Ik laat je nu even met het volgende spelen. Neem de onderstaande code, en kopi"
"eer deze in een lege buffer. Probeer er nu nog niet al te veel van te begrijpe"
"n, maar wel in te zien dat er twee loops zijn - dus twee klanken die op het ze"
"lfde moment spelen. Het beste wat je kan doen nu is, experimenteren en er, gew"
"oon op los, mee te gaan spelen. Hier zijn enkele suggesties:"

#: 01.1-Live-Coding.md:80
msgid "Try changing the blue `rate:` values to hear the sample sound change."
msgstr ""
"Wijzig de blauwe `rate:` waarden, om het geluid van de sample-klank te horen v"
"eranderen."

#: 01.1-Live-Coding.md:81
msgid ""
"Try changing the `sleep` times and hear that both loops can spin round at diff"
"erent rates."
msgstr ""
"Wijzig de `sleep` tijd en hoor nu, dat je beide loops kunt afspelen met versch"
"illende rusttijden."

#: 01.1-Live-Coding.md:83
msgid ""
"Try uncommenting the sample line (remove the `#`) and enjoy the sound of the g"
"uitar played backwards."
msgstr ""
"Probeer de commentaarlijn te wissen (verwijder het `#`) uit onze voorbeeldlijn"
" en geniet van de gitaarklank, die nu achterwaarts afspeelt."

#: 01.1-Live-Coding.md:85
msgid ""
"Try changing any of the blue `mix:` values to numbers between `0` (not in the "
"mix) and `1` (fully in the mix)."
msgstr ""
"Probeer de blauwe `mix:` waarden te veranderen naar cijfers tussen `0` (niet i"
"n de mix) en `1` (voluit in de mix)."

#: 01.1-Live-Coding.md:88
msgid ""
"Remember to press `Run` and you'll hear the change next time the loop goes rou"
"nd. If you end up in a pickle, don't worry - hit `Stop`, delete the code in th"
"e buffer and paste a fresh copy in and you're ready to jam again. Making mista"
"kes is how you'll learn the quickest..."
msgstr ""
"Denk er ook aan, te klikken op 'afspelen' om deze veranderingen te kunnen hore"
"n, bij de volgende loop die vertrekt. Maak je geen zorgen als het hierbij soms"
" in de soep draait, klik dan op `Stop`, wis de code in de buffer en plak er ee"
"n nieuwe kopie in, zo je bent weer gereed om opnieuw te gaan improviseren. Van"
" je fouten kan je nu eenmaal het beste leren."

#: 01.1-Live-Coding.md:94
#, no-wrap
msgid ""
"live_loop :guit do\n"
"  with_fx :echo, mix: 0.3, phase: 0.25 do\n"
"    sample :guit_em9, rate: 0.5\n"
"  end\n"
"#  sample :guit_em9, rate: -0.5\n"
"  sleep 8\n"
"end\n"
"live_loop :boom do\n"
"  with_fx :reverb, room: 1 do\n"
"    sample :bd_boom, amp: 10, rate: 1\n"
"  end\n"
"  sleep 8\n"
"end"
msgstr ""
"live_loop :guit do\n"
"  with_fx :echo, mix: 0.3, phase: 0.25 do\n"
"    sample :guit_em9, rate: 0.5\n"
"  end\n"
"#  sample :guit_em9, rate: -0.5\n"
"  sleep 8\n"
"end\n"
"live_loop :boom do\n"
"  with_fx :reverb, room: 1 do\n"
"    sample :bd_boom, amp: 10, rate: 1\n"
"  end\n"
"  sleep 8\n"
"end"

#: 01.1-Live-Coding.md:111
msgid ""
"Now, keep playing and experimenting until your curiosity about how this all ac"
"tually works kicks in and you start wondering what else you can do with this. "
"You're now ready to read the rest of the tutorial."
msgstr ""
"Blijf nu spelen en experimenteren tot je de nieuwsgierigheid begint te voelen "
"en je je begint af te vragen wat je hier nog allemaal mee kan doen. Dan ben je"
" nu klaar om de rest van de handleiding te lezen."

#: 01.1-Live-Coding.md:115
msgid "So what are you waiting for..."
msgstr "Dus,waar wacht je nog op . . ."

#: 01.2-Exploring-the-Interface.md:1
msgid "1.2 Exploring the Interface"
msgstr "1.2 De Interface Verkennen"

#: 01.2-Exploring-the-Interface.md:3
msgid "The Sonic Pi Interface"
msgstr "De Interface van Sonic Pi"

#: 01.2-Exploring-the-Interface.md:5
msgid ""
"Sonic Pi has a very simple interface for coding music. Let's spend a little ti"
"me exploring it."
msgstr ""
"Sonic Pi heeft een zeer eenvoudige interface om muziek te coderen. Laten we hi"
"er eens wat tijd aan besteden om deze te verkennen."

#: 01.2-Exploring-the-Interface.md:8
msgid "![Sonic Pi Interface](../../../etc/doc/images/tutorial/GUI.png)"
msgstr "![Sonic Pi Interface](../../../etc/doc/images/tutorial/GUI.png)"

#: 01.2-Exploring-the-Interface.md:11
msgid "*A* - Play Controls"
msgstr "*A* - Afspeel knoppen"

#: 01.2-Exploring-the-Interface.md:12
msgid "*B* - Editor Controls"
msgstr "*B* - Editor aanpassen"

#: 01.2-Exploring-the-Interface.md:13
msgid "*C* - Info and Help"
msgstr "*C* - Info en Hulp"

#: 01.2-Exploring-the-Interface.md:14
msgid "*D* - Code Editor"
msgstr "*D* - Code Editor"

#: 01.2-Exploring-the-Interface.md:15
msgid "*E* - Prefs Panel"
msgstr "*E* - Paneel Voorkeursinstellingen"

#: 01.2-Exploring-the-Interface.md:16
msgid "*F* - Log Viewer"
msgstr "*F* - Log Venster"

#: 01.2-Exploring-the-Interface.md:17
msgid "*G* - Help System"
msgstr "*G* - Hulp-Systeem"

#: 01.2-Exploring-the-Interface.md:18
msgid "*H* - Scope Viewer"
msgstr "*H* - Scope Venster"

#: 01.2-Exploring-the-Interface.md:19
#, fuzzy
msgid "*I* - Cue Viewer"
msgstr "*F* - Log Venster"

#: 01.2-Exploring-the-Interface.md:21
msgid "A. Play Controls"
msgstr "A. Afspeel knoppen"

#: 01.2-Exploring-the-Interface.md:23
msgid ""
"These pink buttons are the main controls for starting and stopping sounds. The"
"re's the *Run* button for running the code in the editor, *Stop* for stopping "
"all running code, *Save* for saving the code to an external file and *Record* "
"to create a recording (a WAV file) of the sound playing."
msgstr ""
"Deze roze knoppen zijn de belangrijkste bedieningselementen voor het starten e"
"n stoppen van het geluid. Er is de *Afspelen* knop om de code in de editor af "
"te spelen, *Stop* om alle actieve code te stoppen, *opslaan* om de code naar e"
"en extern bestand op te slaan en *Opnemen* om een opname (WAV-bestand) te make"
"n van het afgespeelde geluid."

#: 01.2-Exploring-the-Interface.md:29
msgid "B. Editor Controls"
msgstr "B.  Controle over de Editor"

#: 01.2-Exploring-the-Interface.md:31
msgid ""
"These orange buttons allow you to manipulate the code editor. The *Size +* and"
" *Size -* buttons allow you to make the text bigger and smaller."
msgstr ""
"Deze oranje knoppen maken het mogelijk om de code editor aan te passen. De *Sc"
"haal +* and *Schaal -* knoppen vergroten of verkleinen de tekst."

#: 01.2-Exploring-the-Interface.md:35
msgid "C. Info and Help"
msgstr "C. Info and Hulp"

#: 01.2-Exploring-the-Interface.md:37
msgid ""
"These blue buttons give you access to information, help and preferences. The *"
"Info* button will open up the information window which contains information ab"
"out Sonic Pi itself - the core team, history, contributors and community. The "
"*Help* button toggles the help system (*G*) and the *Prefs* button toggles the"
" preferences window which allows you to control some basic system parameters."
msgstr ""
"Deze blauwe knoppen geven je toegang tot hulp-, informatie- en voorkeursinstel"
"lingen. De *Info* knop opent het venster die informatie over Sonic Pi zelf bev"
"at - het kernteam, de geschiedenis, de medewerkers en ook de Sonic Pi \"gemeens"
"chap\". De *Hulp* knop schakelt naar het hulp-systeem (*G*) en de *Voorkeuren* "
"knop schakelt naar het voorkeur-venster waarmee u een aantal fundamentele syst"
"eemparameters kan bijsturen."

#: 01.2-Exploring-the-Interface.md:44
msgid "D. Code Editor"
msgstr "D. Code Editor"

#: 01.2-Exploring-the-Interface.md:46
msgid ""
"This is the area where you'll write your code and compose/perform music. It's "
"a simple text editor where you can write code, delete it, cut and paste, etc. "
"Think of it like a very basic version of Word or Google Docs. The editor will "
"automatically colour words based on their meaning in the code. This may seem s"
"trange at first, but you'll soon find it very useful. For example, you'll know"
" something is a number because it is blue."
msgstr ""
"Dit is het gebied waarin je jouw code schrijft en muziek componeert/uitvoert. "
"Het is een eenvoudige tekst-editor, waarin je code kan schrijven, verwijderen,"
" knippen en plakken, enz. Denk aan een zeer eenvoudige versie van Word of Goog"
"le Docs. De editor zal de kleur van woorden automatisch aanpassen op basis van"
" hun betekenis in de code. Dit lijkt misschien eerst wat vreemd, maar je zal d"
"it snel heel nuttig vinden. Bijvoorbeeld als het het blauw ziet, dan weet je d"
"at het om een getal gaat."

#: 01.2-Exploring-the-Interface.md:54
msgid "E. Prefs Panel"
msgstr "E. Paneel Voorkeursinstellingen"

#: 01.2-Exploring-the-Interface.md:56
msgid ""
"Sonic Pi supports a number of tweakable preferences which can be accessed by t"
"oggling the *prefs* button in the Info and Help button set. This will toggle t"
"he visibility of the Prefs Panel which includes a number of options to be chan"
"ged. Examples are forcing mono mode, inverting stereo, toggling log output ver"
"bosity and also a volume slider and audio selector on the Raspberry Pi."
msgstr ""
"Sonic Pi ondersteunt een aantal instellingen die toegankelijk zijn door het in"
"-/uitschakelen van de knop *Voorkeuren* in de Info en Hulp knoppen-set. Dit za"
"l de zichtbaarheid van het Paneel Voorkeursinstellingen, met daarin een aantal"
" regelbare opties, in- of uitschakelen. Voorbeelden zijn: het brengen van ster"
"eo naar mono, stereo omkeren, de detaillering van het log en ook een volumereg"
"elaar en audio keuze voor de Raspberry Pi."

#: 01.2-Exploring-the-Interface.md:63
msgid "F. Log Viewer"
msgstr "F. Log Venster"

#: 01.2-Exploring-the-Interface.md:65
msgid ""
"When you run your code, information about what the program is doing will be di"
"splayed in the log viewer. By default, you'll see a message for every sound yo"
"u create with the exact time the sound was triggered. This is very useful for "
"debugging your code and understanding what your code is doing."
msgstr ""
"Wanneer je je code uitvoert,zal informatie over wat het programma doet, getoon"
"d worden in een soort logboek. Standaard zal je een berichtje zien, voor elk g"
"eluid dat je maakt, met de exacte tijd dat het geluid werd geactiveerd. Dit is"
" zeer handig om fouten in je code op te kunnen sporen en om te kunnen begrijpe"
"n wat je code doet."

#: 01.2-Exploring-the-Interface.md:71
msgid "G. Help System"
msgstr "G. Hulp Systeem"

#: 01.2-Exploring-the-Interface.md:73
msgid ""
"One of the most important parts of the Sonic Pi interface is the help system w"
"hich appears at the bottom of the window. This can be toggled on and off by cl"
"icking on the blue *Help* button. The help system contains help and informatio"
"n about all aspects of Sonic Pi including this tutorial, a list of available s"
"ynths, samples, examples, FX and a full list of all the functions Sonic Pi pro"
"vides for coding music."
msgstr ""
"Eén van de belangrijkste onderdelen van de Sonic Pi-interface is het hulp-syst"
"eem dat wordt weergegeven aan de onderkant van het venster. Dit kan worden in-"
" en uitgeschakeld door op de blauwe knop *Hulp* te klikken. Het hulp-systeem b"
"evat hulp en informatie over alle aspecten van Sonic Pi, inclusief deze handle"
"iding, een lijst van beschikbare synths, samples, voorbeelden, effecten en een"
" volledige lijst van alle functies die Sonic Pi biedt voor het coderen van muz"
"iek."

#: 01.2-Exploring-the-Interface.md:81
msgid "H. Scope Viewer"
msgstr "H. Scope Venster"

#: 01.2-Exploring-the-Interface.md:83
msgid ""
"The scope viewer allows you to see the sound you're hearing. You can easily se"
"e that the saw wave looks like a saw and that the basic beep is a curvey sine "
"wave. You can also see the difference between loud and quiet sounds by the siz"
"e of the lines. There are 3 scopes to play with - the default is a combined sc"
"ope for the left and right channels, there is a stereo scope which draws a sep"
"arate scope for each channel. Finally there is a Lissajous curve scope which w"
"ill show the phase relationship between the left and right channels and allows"
" you to draw pretty pictures with sound (https://en.wikipedia.org/wiki/Lissajo"
"us_curve)."
msgstr ""
"Met het scope venster zie je het geluid. Je ziet hier dat een zaagtand-golf er"
" ook uitziet als een zaag en dat onze basis biep-toon een mooie golvende sinus"
"-golf is. Je ziet ook duidelijk het verschil tussen luide en zachte klanken do"
"or hun grootte. Er zijn 3 verschillende scopes beschikbaar- de standaard (defa"
"ult) is een gecombineerde scope voor het linker en rechter kanaal, een stereo "
"die voor elk kanaal een aparte scope laat zien. En tenslotte is er een Lissajo"
"usfiguur scope die de relatie in fase tussen het linker- en rechter-kanaal wee"
"rgeven en die je in staat stelt, mooie figuren te tekenen  met geluid (https:/"
"/nl.wikipedia.org/wiki/Lissajousfiguur)."

#: 01.2-Exploring-the-Interface.md:93
#, fuzzy
msgid "I. Cue Viewer"
msgstr "F. Log Venster"

#: 01.2-Exploring-the-Interface.md:95
msgid ""
"All internal and external events (called cues in Sonic Pi) are automatically l"
"ogged in the Cue Viewer. For example, if you have a MIDI controller connected "
"and press one of its buttons, you'll see a new cue event in the Cue Viewer tel"
"ling you the name of the controller and which button you pressed. Once you've "
"mastered the basics of making and producing sounds, you'll start to want to cu"
"e sounds or whole sections of sounds based on events such as these. A cue even"
"t is just an indication that something happened. For example, every time a liv"
"e loop spins round, it sends a cue event out which is logged in the Cue Viewer"
". Also, external events such as MIDI messages from connected MIDI equipment an"
"d OSC messages from other programs or computers are also displayed in the Cue "
"Viewer. It is also possible to directly generate cue events using the `cue` fu"
"nction. Anything that appears in the Cue Viewer can be used to trigger somethi"
"ng happening. This is covered in more detail in Sections 10 to 12 of this tuto"
"rial."
msgstr ""

#: 01.3-Learning-through-Play.md:1
msgid "1.3 Learning through Play"
msgstr "1.3 Spelenderwijs Leren"

#: 01.3-Learning-through-Play.md:3
msgid "Learning through Play"
msgstr "Spelenderwijs Leren"

#: 01.3-Learning-through-Play.md:5
msgid ""
"Sonic Pi encourages you to learn about both computing and music through play a"
"nd experimentation. The most important thing is that you're having fun, and be"
"fore you know it you'll have accidentally learned how to code, compose and per"
"form."
msgstr ""
"Sonic Pi moedigt je aan om meer te gaan leren over zowel de computer als over "
"muziek door middel van spel en experimenteren. Het belangrijkste is dat je hie"
"rin plezier hebt, en voor je het beseft, heb je hierdoor geleerd, hoe te coder"
"en, te componeren en live te spelen."

#: 01.3-Learning-through-Play.md:10
msgid "There are no mistakes"
msgstr "Er bestaan geen fouten"

#: 01.3-Learning-through-Play.md:12
msgid ""
"Whilst we're on this subject, let me just give you one piece of advice I've le"
"arned over my years of live coding with music - *there are no mistakes, only o"
"pportunities*. This is something I've often heard in relation to jazz but it w"
"orks equally well with live coding. No matter how experienced you are - from a"
" complete beginner to a seasoned live coder, you'll run some code that has a c"
"ompletely unexpected outcome. It might sound insanely cool - in which case run"
" with it. However, it might sound totally jarring and out of place. It doesn't"
" matter that it happened - what matters is what you do next with it. Take the "
"sound, manipulate it and morph it into something awesome. The crowd will go *w"
"ild*."
msgstr ""
"Nu we er toch over bezig zijn, geef ik je graag een raad mee, wat ik heb gelee"
"rd in de jaren van live muziek coderen is - *er bestaan geen fouten, alleen ka"
"nsen*. Dit is iets wat ik vaak heb horen zeggen over jazz, maar het werkt even"
" goed met live codering. Ongeacht hoe ervaren je bent - van een complete begin"
"ner tot een doorgewinterde Algoraver, je zal soms code uitvoeren met een gehee"
"l onverwacht resultaat. Het kan waanzinnig cool klinken- in dat geval komen we"
" er mee weg. Het kan ook compleet dwaas en ontoepasselijk klinken. Maar het ma"
"akt niet uit dat het gebeurd is - waar het om gaat is, wat je er vervolgens me"
"e doet. Pak de klank, manipuleer deze en morph het naar iets ongeloofelijk. Je"
" publiek zal uit zijn *dak* gaan."

#: 01.3-Learning-through-Play.md:24
msgid "Start Simple"
msgstr "Start Eenvoudig"

#: 01.3-Learning-through-Play.md:26
msgid ""
"When you're learning, it's tempting to want to do amazing things *now*. Howeve"
"r, just hold that thought and see it as a distant goal to reach *later*. For n"
"ow, instead think of the *simplest* thing you could write which would be fun a"
"nd rewarding that's a small step towards the amazing thing you have in your he"
"ad. Once you have an idea about that simple step, then try and build it, play "
"with it and then see what new ideas it gives you. Before long you'll be too bu"
"sy having fun and making real progress."
msgstr ""
"Wanneer je aan het leren bent, is het verleidelijk om *nu al* verbazingwekkend"
"e dingen te gaan doen. Maar het is beter om die wens vast te houden en als een"
" toekomstig doel voor ogen te houden om later te bereiken. Probeer kleine, een"
"voudige stappen te zetten en te zien hoe dit jou plezier geeft en je dichter t"
"ot je doel brengen. Eens je de kleine stappen onder de knie hebt, kan je deze "
"als bouwstenen gebruiken en hiermee spelen, en je zal zien dat deze nieuwe inz"
"ichten, jou ook verse ideeën zullen geven. Snel genoeg ben je fijn bezig én ma"
"ak je vooruitgang."

#: 01.3-Learning-through-Play.md:35
msgid "Just make sure to share your work with others!"
msgstr "Zorg ervoor dat je je werk deelt met anderen!"

#: 02-Synths.md:1
msgid "2 Synths"
msgstr "2 Synthesizers (Synths)"

#: 02-Synths.md:3 02.3-Switching-Synths.md:11
msgid "Synths"
msgstr "Synthesizers"

#: 02-Synths.md:5
msgid "OK, enough of the intros - let's get into some sound."
msgstr "OK, genoeg intro's - laat ons in enkele klanken duiken."

#: 02-Synths.md:7
msgid ""
"In this section we'll cover the basics of triggering and manipulating synths. "
"Synth is short for synthesiser which is a fancy word for something which creat"
"es sounds. Typically synths are quite complicated to use - especially analog s"
"ynths such as Eurorack modules connected together by a mess of wires. However,"
" Sonic Pi gives you much of that power in a very simple and approachable manne"
"r."
msgstr ""
"In deze sectie zullen we de basisprincipes van het triggeren en het manipulere"
"n van synth's behandelen. Synth is kort voor synthesizer, wat een chique woord"
" is voor een ding dat geluiden kan creëren. Synth's zijn doorgaans vrij ingewi"
"kkeld om te gebruiken - met name analoge synth's met vele patch kabels en modu"
"les. Sonic Pi biedt je  een zelfde kracht op een eenvoudige en toegankelijke w"
"ijze."

#: 02-Synths.md:14
msgid ""
"Don't be fooled by the immediate simplicity of Sonic Pi's interface. You can g"
"et very deep into very sophisticated sound manipulation if that's your thing. "
"Hold on to your hats..."
msgstr ""
"Laat je niet misleiden door de directe eenvoud van de Sonic Pi interface. Je k"
"unt hier diepgaand, in zeer geavanceerde geluidsmanipulatie gaan als dat je di"
"ng mocht zijn. Hou je maar vast..."

#: 02.1-Your-First-Beeps.md:1
msgid "2.1 Your First Beeps"
msgstr "2.1 Je Eerste Bliepjes"

#: 02.1-Your-First-Beeps.md:3
msgid "Your First Beeps"
msgstr "Je Eerste Bliepjes"

#: 02.1-Your-First-Beeps.md:5
msgid "Take a look at the following code:"
msgstr "Bestudeer de volgende code:"

#: 02.1-Your-First-Beeps.md:7 02.4-Durations-with-Envelopes.md:49
#: A.20-creative-coding-in-the-classroom.md:158
#, no-wrap
msgid "play 70"
msgstr "play 70"

#: 02.1-Your-First-Beeps.md:11
msgid ""
"This is where it all starts. Go ahead, copy and paste it into the code window "
"at the top of the app (the big white space under the Run button). Now, press R"
"un..."
msgstr ""
"Dit is waar het allemaal begint. Ga je gang, kopieer en plak deze in het codev"
"enster aan de bovenzijde van de app (de grote witte ruimte onder de Afspeel kn"
"op). Nu, klik op Afspelen..."

#: 02.1-Your-First-Beeps.md:15
msgid "Beep!"
msgstr "Bliep!"

#: 02.1-Your-First-Beeps.md:17
msgid "Intense. Press it again. And again. *And again...*"
msgstr "Heftig. Klik opnieuw. En opnieuw. *En opnieuw…*"

#: 02.1-Your-First-Beeps.md:19
msgid ""
"Woah, crazy, I'm sure you could keep doing that all day. But wait, before you "
"lose yourself in an infinite stream of beeps, try changing the number:"
msgstr ""
"Woah, te gek, ik weet zeker dat je dit een hele dag kan blijven doen. Maar wac"
"ht, voordat je jezelf verliest in een oneindige stroom van bliepjes, probeer h"
"et cijfer te wijzigen:"

#: 02.1-Your-First-Beeps.md:23
#, no-wrap
msgid "play 75"
msgstr "play 75"

#: 02.1-Your-First-Beeps.md:27
msgid "Can you hear the difference? Try a lower number:"
msgstr "Hoor je het verschil? Probeer een lager cijfer:"

#: 02.1-Your-First-Beeps.md:29
#, no-wrap
msgid "play 60"
msgstr "play 60"

#: 02.1-Your-First-Beeps.md:33
msgid ""
"So, lower numbers make lower pitched beeps and higher numbers make higher pitc"
"hed beeps. Just like on a piano, the keys at the lower part of the piano (the "
"left hand side) play lower notes and the keys on the higher part of the piano "
"(the right hand side) play higher notes."
msgstr ""

#: 02.1-Your-First-Beeps.md:38
#, fuzzy
msgid ""
"It turns out that the C of the 4th octave (C in English notation) is identifie"
"d by the number 60. `play 60` therefore plays the C of the 4th octave. To play"
" the next piano key to the right, you have to add 1 to 60 and then type `play "
"61`, which in this case is the black key of the C sharp. To play the D, the ne"
"xt key to the right, `play 62`."
msgstr "play 60"

#: 02.1-Your-First-Beeps.md:40
msgid ""
"*Don't worry* if this means nothing to you - it didn't to me when I first star"
"ted. All that matters right now is that you know that *low numbers make lower "
"beeps* and *high numbers make higher beeps*."
msgstr ""
"*Maak je geen zorgen* wanneer dit niets voor jou betekent, mij betekende het o"
"ok niets toen ik er eerst aan begon. Het belangrijkste is dat je weet dat *lag"
"e getallen, lagere tonen maken* en *hoge getallen, hogere tonen*."

#: 02.1-Your-First-Beeps.md:44 08.2-Chords.md:3
msgid "Chords"
msgstr "Akkoorden"

#: 02.1-Your-First-Beeps.md:46
msgid ""
"Playing a note is quite fun, but playing many at the same time can be even bet"
"ter. Try it:"
msgstr ""
"Een noot spelen kan leuk zijn, maar veel noten op het zelfde moment spelen kan"
" het beter maken. Probeer dit:"

#: 02.1-Your-First-Beeps.md:49
#, no-wrap
msgid ""
"play 72\n"
"play 75\n"
"play 79"
msgstr ""
"play 72\n"
"play 75\n"
"play 79"

#: 02.1-Your-First-Beeps.md:55
msgid ""
"Jazzy! So, when you write multiple `play`s, they all play at the same time. Tr"
"y it for yourself - which numbers sound good together? Which sound terrible? E"
"xperiment, explore and find out for yourself."
msgstr ""
"Jazzy! Dus, als je meerdere „play”s typt, spelen ze allemaal op hetzelfde mome"
"nt. Probeer het voor jezelf - welke cijfers klinken goed samen? En welke versc"
"hrikkelijk samen? Experimenteer, verken en ontdek dit voor jezelf."

#: 02.1-Your-First-Beeps.md:59
msgid "Melody"
msgstr "Melodie"

#: 02.1-Your-First-Beeps.md:61
msgid ""
"So, playing notes and chords is fun - but how about a melody? What if you want"
"ed to play one note after another and not at the same time? Well, that's easy,"
" you just need to `sleep` between the notes:"
msgstr ""
"Zo, het spelen van noten en akkoorden is leuk, maar hoe zit dat met een melodi"
"e? Wat als je noten achter elkaar wil spelen en niet op dezelfde moment? Wel d"
"at is eenvoudig, je moet enkel een rust („sleep\") zetten tussen de noten:"

#: 02.1-Your-First-Beeps.md:65
#, no-wrap
msgid ""
"play 72\n"
"sleep 1\n"
"play 75\n"
"sleep 1\n"
"play 79"
msgstr ""
"play 72\n"
"sleep 1\n"
"play 75\n"
"sleep 1\n"
"play 79"

#: 02.1-Your-First-Beeps.md:73
msgid ""
"How lovely, a little arpeggio. So what does the `1` mean in `sleep 1`? Well it"
" means the *duration of the sleep*. It actually means sleep for one beat, but "
"for now we can think about it as sleeping for 1 second. So, what if we wanted "
"to make our arpeggio a little faster? Well, we need to use shorter sleep value"
"s. What about a half i.e. `0.5`:"
msgstr ""
"Hoe mooi, zo een beetje arpeggio. Dus wat betekent de '1' in 'sleep 1'? Nou he"
"t betekent de *duur van de rust*. Het betekent eigenlijk slaap voor één tel , "
"voor 1 seconde rusten. Dus, wat als we onze arpeggio een beetje sneller willen"
"? Nou, dan moeten we kortere slaap waarde gebruiken. Wat denk je van de helft?"
" D.w.z. '0.5':"

#: 02.1-Your-First-Beeps.md:79
#, no-wrap
msgid ""
"play 72\n"
"sleep 0.5\n"
"play 75\n"
"sleep 0.5\n"
"play 79"
msgstr ""
"lay 72\n"
"sleep 0.5\n"
"play 75\n"
"sleep 0.5\n"
"play 79"

#: 02.1-Your-First-Beeps.md:87
msgid ""
"Notice how it plays faster. Now, try for yourself, change the times - use diff"
"erent times and notes."
msgstr ""
"Merk op hoe het sneller speelt. Probeer dit nu voor jezelf, verander de rustti"
"jd- gebruik verschillende tijden en noten."

#: 02.1-Your-First-Beeps.md:90
msgid ""
"One thing to try is in-between notes such as `play 52.3` and `play 52.63`. The"
"re's absolutely no need to stick to standard whole notes. Play around and have"
" fun."
msgstr ""
"Wat je zeker ook kan proberen is om \"tussen” noten te spelen zoals `play 52.3`"
" and `play 52.63`. Het is absoluut niet noodzakelijk om te blijven vasthouden "
"aan standaard „hele” noten. Speel erop los en amuseer je."

#: 02.1-Your-First-Beeps.md:95
msgid "Traditional Note Names"
msgstr "Traditionele Notennamen"

#: 02.1-Your-First-Beeps.md:97
msgid ""
"For those of you that already know some musical notation (don't worry if you d"
"on't - you don't need it to have fun) you might want to write a melody using n"
"ote names such as C and F# rather than numbers. Sonic Pi has you covered. You "
"can do the following:"
msgstr ""
"Als je al kennis hebt van muzieknotatie (maak je geen zorgen als dit niet het "
"geval is, zonder deze kennis blijft het even leuk), dan wil je  bij het schrij"
"ven van een melodie, misschien liever de nootnamen gebruiken zoals: C en F# in"
" plaats van cijfers. In Sonic Pi kan je dat.\n"
"Je kan dan het volgende doen:"

#: 02.1-Your-First-Beeps.md:102
#, no-wrap
msgid ""
"play :C\n"
"sleep 0.5\n"
"play :D\n"
"sleep 0.5\n"
"play :E"
msgstr ""
"play :C\n"
"sleep 0.5\n"
"play :D\n"
"sleep 0.5\n"
"play :E"

#: 02.1-Your-First-Beeps.md:110
msgid ""
"Remember to put the colon `:` in front of your note name so that it goes pink."
" Also, you can specify the octave by adding a number after the note name:"
msgstr ""
"Denk eraan, een dubbelpunt voor de nootnaam te plaatsen, zodat deze in roze wo"
"rdt. Je kan hierbij ook het octaaf aangeven door achter de nootnaam een cijfer"
" te plaatsen:"

#: 02.1-Your-First-Beeps.md:114
#, no-wrap
msgid ""
"play :C3\n"
"sleep 0.5\n"
"play :D3\n"
"sleep 0.5\n"
"play :E4"
msgstr ""
"play :C3\n"
"sleep 0.5\n"
"play :D3\n"
"sleep 0.5\n"
"play :E4"

#: 02.1-Your-First-Beeps.md:122
msgid ""
"If you want to make a note sharp, add an `s` after the note name such as `play"
" :Fs3` and if you want to make a note flat, add a `b` such as `play :Eb3`."
msgstr ""
"Als je een verhoogde alteratie (bv. F#) zet je een 's' achter de nootnaam, bv."
" `play :Fs3`. Als je een verlaagde alteratie wil maken (bv. E mol), zet dan ee"
"n 'b' achter de nootnaam bv. `play :Eb3`."

#: 02.1-Your-First-Beeps.md:125
msgid "Now go *crazy* and have fun making your own tunes."
msgstr ""
"Ga nu maar lekker loos bij het maken van je eigen melodietjes, veel plezier er"
"mee."

#: 02.2-Synth-Params.md:1
msgid "2.2 Synth Options"
msgstr "2.2 Synthesizer Opties"

#: 02.2-Synth-Params.md:3
msgid "Synth Options: Amp and Pan"
msgstr "Synthesizer Opties: Amp en Pan"

#: 02.2-Synth-Params.md:5
msgid ""
"As well as allowing you to control which note to play or which sample to trigg"
"er, Sonic Pi provides a whole range of options to craft and control the sounds"
". We'll be covering many of these in this tutorial and there's extensive docum"
"entation for each in the help system. However, for now we'll introduce two of "
"the most useful: *amplitude* and *pan*. First, let's look at what options actu"
"ally are."
msgstr ""
"Zoals je kan bepalen welke noot er gespeeld wordt of welke sample er wordt get"
"riggert, zo biedt Sonic Pi een hele waaier aan mogelijkheden om geluiden te be"
"werken en manipuleren. We gaan velen daarvan in deze handleiding bekijken en i"
"n het hulp systeem is een uitgebreide documentatie voorzien van deze 'opties'."
" De belangrijkste op dit moment zijn: 'amplitude' en 'pan'. Laat ons eerst eve"
"n bekijken wat opties eigenlijk zijn."

#: 02.2-Synth-Params.md:13
msgid "Options"
msgstr "Opties"

#: 02.2-Synth-Params.md:15
msgid ""
"Sonic Pi supports the notion of options (or opts for short) for its synths. Op"
"ts are controls you pass to `play` which modify and control aspects of the sou"
"nd you hear. Each synth has its own set of opts for finely tuning its sound. H"
"owever, there are common sets of opts shared by many sounds such as `amp:` and"
" envelope opts (covered in another section)."
msgstr ""
"Sonic Pi ondersteunt het noteren van opties (afgekort: opts) voor haar synths."
" Opts zijn controle-elementen  die je samen met het commando 'play' doorgeeft "
"die wijzigingen en manipulaties van het afgespeelde geluid. Elke synth heeft z"
"ijn eigen unieke set van opts om haar geluid fijn af te stemmen. Er zijn echte"
"r opts die bij elke synth, of bij elk geluid gebruikt kunnen worden zoals 'amp"
":' en 'envelope' (= geluidsverloop) opties (In een andere sectie gaan we diepe"
"r op die 'envelopes' in)."

#: 02.2-Synth-Params.md:22
msgid ""
"Opts have two major parts, their name (the name of the control) and their valu"
"e (the value you want to set the control at). For example, you might have a op"
"t called `cheese:` and want to set it with a value of `1`."
msgstr ""
"Opts bestaan uit twee belangrijke delen (de naam van het element waar je contr"
"ole over wil hebben) en de waarde hiervan (de mate van controle over dit eleme"
"nt). Een voorbeeld, je hebt een opt genaamd 'kaas' en je wilt deze instellen o"
"p een waarde van '1'."

#: 02.2-Synth-Params.md:27
msgid ""
"Opts are passed to calls to `play` by using a comma `,` and then the name of t"
"he opt such as `amp:` (don't forget the colon `:`) and then a space and the va"
"lue of the opt. For example:"
msgstr ""
"Opts worden samen met 'play' commando's doorgegeven, dor gebruik te maken van "
"een komma ',' gevolgd door de naam van de optie, we kiezen hier 'amp:' (vergee"
"t de dubbelpunt niet ':' ) gevolgd door een spatie en de waarde van de optie. "
"Bijvoorbeeld:"

#: 02.2-Synth-Params.md:31
#, no-wrap
msgid "play 50, cheese: 1"
msgstr "play 50, kaas: 1"

#: 02.2-Synth-Params.md:35
msgid "(Note that `cheese:` isn't a valid opt, we're just using it as an example)."
msgstr ""
"(Merk op dat ' kaas: \"geen geldige opt is, we gebruiken deze gewoon als voorbe"
"eld)."

#: 02.2-Synth-Params.md:37
msgid "You can pass multiple opts by separating them with a comma:"
msgstr "Je kan meerdere opts tegelijk doorgeven door deze te scheiden met een komma:"

#: 02.2-Synth-Params.md:39
#, no-wrap
msgid "play 50, cheese: 1, beans: 0.5"
msgstr "play 50, kaas: 1, eieren: 0.5"

#: 02.2-Synth-Params.md:43
msgid "The order of the opts doesn't matter, so the following is identical:"
msgstr "De volgorde van de opts maakt niet uit, dus het volgende is identiek:"

#: 02.2-Synth-Params.md:45
#, no-wrap
msgid "play 50, beans: 0.5, cheese: 1"
msgstr "play 50, eieren: 0.5, kaas: 1"

#: 02.2-Synth-Params.md:49
msgid ""
"Opts that aren't recognised by the synth are just ignored (like `cheese` and `"
"beans` which are clearly ridiculous opt names!)"
msgstr ""
"Opts die door de synth niet worden herkent zullen gewoon genegeerd worden (zoa"
"ls 'kaas' en 'eieren' duidelijk zeer ridicule opt namen!)"

#: 02.2-Synth-Params.md:52
msgid ""
"If you accidentally use the same opt twice with different values, the last one"
" wins. For example, `beans:` here will have the value 2 rather than 0.5:"
msgstr ""
"Mocht je per ongeluk twee keer dezelfde opt hebben ingevoerd maar met verschil"
"lende waarden, dan zal de laatste waarde winnen. Bijvoorbeeld, 'eieren' zal de"
" waarde 2 hebben in plaats van 0.5:"

#: 02.2-Synth-Params.md:56
#, no-wrap
msgid "play 50, beans: 0.5, cheese: 3, eggs: 0.1, beans: 2"
msgstr "play 50, eieren: 0.5, kaas: 3, tomaat: 0.1, eieren: 2"

#: 02.2-Synth-Params.md:60
msgid ""
"Many things in Sonic Pi accept opts, so just spend a little time learning how "
"to use them and you'll be set! Let's play with our first opt: `amp:`."
msgstr ""
"Opts worden door veel items in Sonic Pi geaccepteerd, dus probeer deze onder d"
"e knie te krijgen, het loont echt! Laten we wat spelen met onze eerste opt: `a"
"mp:`."

#: 02.2-Synth-Params.md:64 02.4-Durations-with-Envelopes.md:25
msgid "Amplitude"
msgstr "Amplitude"

#: 02.2-Synth-Params.md:66
msgid ""
"Amplitude is a computer representation of the loudness of a sound. A *high amp"
"litude produces a loud sound* and a *low amplitude produces a quiet sound*. Ju"
"st as Sonic Pi uses numbers to represent time and notes, it uses numbers to re"
"present amplitude. An amplitude of 0 is silent (you'll hear nothing) whereas a"
"n amplitude of 1 is normal volume. You can even crank up the amplitude higher "
"to 2, 10, 100. However, you should note that when the overall amplitude of all"
" the sounds gets too high, Sonic Pi uses what's called a compressor to squash "
"them all to make sure things aren't too loud for your ears. This can often mak"
"e the sound muddy and strange. So try to use low amplitudes, i.e. in the range"
" 0 to 0.5 to avoid compression."
msgstr ""
"Amplitude is de representatie van het geluidsvolume op een computer. Een hoge "
"amplitude produceert het geluid op een luid volume en een lage amplitude op ee"
"n zacht volume. Net zoals Sonic Pi cijfers gebruikt om noten en tijden aan te "
"geven, gebruikt het cijfers om amplitude te bepalen. Een amplitude van '0' is "
"stil (je zal niets horen) en een amplitude van '1' is een normaal volume. Je k"
"an het volume zelfs nog opdrijven en verhogen tot 2, 10, 100. Maar u moet er w"
"el rekening mee houden dat wanneer het globale volume te hoog wordt, zal Sonic"
" Pi een compressie inschakelen en het geluid onderdrukken om ervoor te zorgen "
"dat je oren gespaard blijven. Dit kan het geluid dan weer dof en vreemd doen l"
"aten klinken. Dus is het beter lage amplitudes te gebruiken, dwz. tussen 0 tot"
"0.5 om compressie te vermijden."

#: 02.2-Synth-Params.md:79
msgid "Amp it up"
msgstr "Amp 't op"

#: 02.2-Synth-Params.md:81
msgid ""
"To change the amplitude of a sound, you can use the `amp:` opt. For example, t"
"o play at half amplitude pass 0.5:"
msgstr ""
"Om de amplitude van een geluid te veranderen, kan je de 'amp:' optie gebruiken"
". Bijvoorbeeld, op gemiddelde amplitude afspelen, gebruik dan 0.5:"

#: 02.2-Synth-Params.md:84
#, no-wrap
msgid "play 60, amp: 0.5"
msgstr "play 60, amp: 0.5"

#: 02.2-Synth-Params.md:88
msgid "To play at double amplitude pass 2:"
msgstr "Afspelen op dubbel zo hoge amplitude gebruik 2:"

#: 02.2-Synth-Params.md:90
#, no-wrap
msgid "play 60, amp: 2"
msgstr "play 60, amp: 2"

#: 02.2-Synth-Params.md:94
msgid ""
"The `amp:` opt only modifies the call to `play` it's associated with. So, in t"
"his example, the first call to play is at half volume and the second is back t"
"o the default (1):"
msgstr ""
"De amp opt verandert enkel de 'play' oproep waarmee deze wordt geassocieerd. I"
"n dit voorbeeld zal de eerste oproep dus aan de helft van het volume spelen en"
" de tweede op standaard-instelling (1):"

#: 02.2-Synth-Params.md:98
#, no-wrap
msgid ""
"play 60, amp: 0.5\n"
"sleep 0.5\n"
"play 65"
msgstr ""
"play 60, amp: 0.5\n"
"sleep 0.5\n"
"play 65"

#: 02.2-Synth-Params.md:104
msgid "Of course, you can use different `amp:` values for each call to play:"
msgstr ""
"Natuurlijk kunnen verschillende 'amp:' waarden per 'play' oproep worden gebrui"
"kt:"

#: 02.2-Synth-Params.md:106
#, no-wrap
msgid ""
"play 50, amp: 0.1\n"
"sleep 0.25\n"
"play 55, amp: 0.2\n"
"sleep 0.25\n"
"play 57, amp: 0.4\n"
"sleep 0.25\n"
"play 62, amp: 1"
msgstr ""
"play 50, amp: 0.1\n"
"sleep 0.25\n"
"play 55, amp: 0.2\n"
"sleep 0.25\n"
"play 57, amp: 0.4\n"
"sleep 0.25\n"
"play 62, amp: 1"

#: 02.2-Synth-Params.md:116
msgid "Panning"
msgstr "Pannen"

#: 02.2-Synth-Params.md:118
msgid ""
"Another fun opt to use is `pan:` which controls the panning of a sound in ster"
"eo. Panning a sound to the left means that you hear it out of the left speaker"
", and panning it to the right means you hear it out of your right speaker. For"
" our values, we use a -1 to represent fully left, 0 to represent center and 1 "
"to represent fully right in the stereo field. Of course, we're free to use any"
" value between -1 and 1 to control the exact positioning of our sound."
msgstr ""
"Een ander leuke opt om te gebruiken is 'pan:' die bepaalt de panning van een g"
"eluid in stereo. Naar links pannen betekent dat je het geluid door de linker-l"
"uidspreker hoort,  naar rechts pannen betekent dat je het geluid door de recht"
"er-luidspreker hoort. Onze cijferwaarde -1 betekend helemaal links, 0 geeft he"
"t midden weer en 1 geeft helemaal rechts van ons stereobeeld. Natuurlijk zijn "
"we vrij om elke waarde tussen -1 en 1 te gebruiken om de exacte positie van on"
"s geluid te bepalen."

#: 02.2-Synth-Params.md:126
msgid "Let's play a beep out of the left speaker:"
msgstr "Laten we eens een bliepje uit de linkerluidspreker doen klinken:"

#: 02.2-Synth-Params.md:128
#, no-wrap
msgid "play 60, pan: -1"
msgstr "play 60, pan: -1"

#: 02.2-Synth-Params.md:132
msgid "Now, let's play it out of the right speaker:"
msgstr "En nu uit de rechter luidspreker:"

#: 02.2-Synth-Params.md:134
#, no-wrap
msgid "play 60, pan: 1"
msgstr "play 60, pan: 1"

#: 02.2-Synth-Params.md:138
msgid "Finally let's play it back out of the center of both (the default position):"
msgstr "En nu terug vanuit beiden samen (standaard positie):"

#: 02.2-Synth-Params.md:141
#, no-wrap
msgid "play 60, pan: 0"
msgstr "play 60, pan: 0"

#: 02.2-Synth-Params.md:145
msgid "Now, go and have fun changing the amplitude and panning of your sounds!"
msgstr ""
"Doe nu maar, en veel plezier met het veranderen van de amplitude en het pannen"
" van uw geluiden!"

#: 02.3-Switching-Synths.md:1
msgid "2.3 Switching Synths"
msgstr "2.3 Synths Veranderen"

#: 02.3-Switching-Synths.md:3
msgid "Switching Synths"
msgstr "Synths Veranderen"

#: 02.3-Switching-Synths.md:5
#, fuzzy
msgid ""
"So far we've had quite a lot of fun making beeps. However, you're probably sta"
"rting to get bored of the basic beep noise. Is that all Sonic Pi has to offer?"
" Surely there's more to live coding than just playing beeps? Yes there is, and"
" in this section we'll explore some of the exciting range of sounds that Sonic"
" Pi has to offer."
msgstr ""
"Tot nu hebben we al heel wat plezier beleeft met onze biepjes. Dit standaard b"
"iepje zal ons echter na een tijdje gaan vervelen. Is het dit alles wat Sonic P"
"i ons te bieden heeft? Er moet toch meer kunnen dan alleen maar wat biepjes ma"
"ken met dit hele gedoe van live-coderen? Oh ja zeker, en in deze sectie gaan w"
"e de spannende serie klanken die Sonic Pi te bieden heeft verkennen."

#: 02.3-Switching-Synths.md:13
#, fuzzy
msgid ""
"Sonic Pi has a number of different instruments it calls synths (which is *shor"
"t for synthesisers*). Whereas samples represent pre-recorded sounds, synths ar"
"e capable of generating new sounds depending on how you control them (which we"
"'ll explore later in this tutorial). Sonic Pi's synths are very powerful and e"
"xpressive and you'll have a lot of fun exploring and playing with them. First,"
" let's learn how to select the current synth to use."
msgstr ""
"Sonic Pi heeft een waaier aan instrumenten, synths genaamd -dat is de verkorti"
"ng van synthesizers. Waar samples reeds opgenomen klanken vertegenwoordigen, z"
"ijn synths in staat om nieuwe klanken te genereren, afhankelijk van hoe je dez"
"e instelt (dat gaan we  later in deze handleiding ontdekken). Sonic Pi's synth"
"s zijn heel krachtig en expressief en je zal er een veel plezier aan beleven d"
"eze te leren kenen en te bespelen. Maar eerst  gaan we leren hoe we deze kunne"
"n selecteren."

#: 02.3-Switching-Synths.md:21
msgid "Buzzy saws and prophets"
msgstr "Drukke Zaagtand-golven en \"Prophets\""

#: 02.3-Switching-Synths.md:23
msgid "A fun sound is the *saw wave* - let's give it a try:"
msgstr "Een leuke klank is de *zaagtand-golf*, laten we deze uitproberen:"

#: 02.3-Switching-Synths.md:25
#, no-wrap
#, fuzzy
msgid ""
"use_synth :saw\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"play 62"
msgstr ""
"use_synth :saw\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"play 62\n"
"sleep 0.25"

#: 02.3-Switching-Synths.md:34
msgid "Let's try another sound - the *prophet*:"
msgstr "Laten we nog een andere klank proberen, de *prophet*:"

#: 02.3-Switching-Synths.md:36
#, no-wrap
#, fuzzy
msgid ""
"use_synth :prophet\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"play 62"
msgstr ""
"use_synth :prophet\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"play 62\n"
"sleep 0.25"

#: 02.3-Switching-Synths.md:45
msgid "How about combining two sounds. First one after another:"
msgstr ""
"Hoe zit het dan met het combineren van twee verschillende klanken? Eerst de en"
"e na de andere:"

#: 02.3-Switching-Synths.md:47
#, no-wrap
#, fuzzy
msgid ""
"use_synth :saw\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"use_synth :prophet\n"
"play 57"
msgstr ""
"use_synth :saw\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"use_synth :prophet\n"
"play 57\n"
"sleep 0.25"

#: 02.3-Switching-Synths.md:57
msgid ""
"Now multiple sounds at the same time (by not sleeping between successive calls"
" to `play`):"
msgstr ""
"Nu klinken er meerdere tonen tegelijk (omdat er geen pauze zit tussen de opeen"
"volgende aanroepen van `play`):"

#: 02.3-Switching-Synths.md:60
#, no-wrap
#, fuzzy
msgid ""
"use_synth :tb303\n"
"play 38\n"
"use_synth :dsaw\n"
"play 50\n"
"use_synth :prophet\n"
"play 57"
msgstr ""
"use_synth :tb303\n"
"play 38\n"
"sleep 0.25\n"
"use_synth :dsaw\n"
"play 50\n"
"sleep 0.25\n"
"use_synth :prophet\n"
"play 57\n"
"sleep 0.25"

#: 02.3-Switching-Synths.md:69
msgid ""
"Notice that the `use_synth` command only affects the following calls to `play`"
". Think of it like a *big switch* - new calls to `play` will play whatever syn"
"th it's currently pointing to. You can move the switch to a new synth with `us"
"e_synth`."
msgstr ""
"Merk hierbij op dat het `use_synth` commando, alleen invloed heeft op de daaro"
"p volgende oproepen van 'play'. Stel je deze even voor,als een grote schakelaa"
"r, die bij nieuwe 'play' opvragingen, eender welke synth laat afspelen waar mo"
"menteel naar verwezen wordt. Je kan die dan omschakelen naar andere synth door"
" het gebruik van `use_synth`."

#: 02.3-Switching-Synths.md:75
msgid "Discovering Synths"
msgstr "Synths Ontdekken"

#: 02.3-Switching-Synths.md:77
#, fuzzy
msgid ""
"To see which synths Sonic Pi has for you to play with take a look at the Synth"
"s option in the menu at the bottom of this help screen (between Examples & Fx)"
". There are over 20 to choose from. Here are a few of my favourites:"
msgstr ""
"Om te zien welke synths Sonic Pi voor u heeft om mee te spelen neem dan een ki"
"jkje op de Synths-opties in het uiterst links verticale menu (boven Effecten)."
" Er zijn er meer dan 20 om uit te kiezen. Hier zijn een paar van mijn favoriet"
"en:"

#: 02.3-Switching-Synths.md:81
msgid "`:prophet`"
msgstr "`:prophet`"

#: 02.3-Switching-Synths.md:82
msgid "`:dsaw`"
msgstr "`:dsaw`"

#: 02.3-Switching-Synths.md:83
msgid "`:fm`"
msgstr "`:fm`"

#: 02.3-Switching-Synths.md:84
msgid "`:tb303`"
msgstr "`:tb303`"

#: 02.3-Switching-Synths.md:85
msgid "`:pulse`"
msgstr "`:pulse`"

#: 02.3-Switching-Synths.md:87
msgid ""
"Now play around with *switching synths during your music*. Have fun combining "
"synths to make new sounds as well as using different synths for different sect"
"ions of your music."
msgstr ""
"Speel nu een beetje met dit schakelen van synths terwijl je muziekstuk afspeel"
"t. Veel plezier met het combineren van synths om nieuwe klanken te maken of om"
" verschillende secties in uw muziekstuk van verschillende synths te voorzien."

#: 02.4-Durations-with-Envelopes.md:1
msgid "2.4 Duration with Envelopes"
msgstr "2.4 Geluidsduur met \"Envelopes\""

#: 02.4-Durations-with-Envelopes.md:3
msgid "Duration with Envelopes"
msgstr "Geluidsduur met \"Envelopes\""

#: 02.4-Durations-with-Envelopes.md:5
msgid ""
"In an earlier section, we looked at how we can use the `sleep` command to cont"
"rol when to trigger our sounds. However, we haven't yet been able to control t"
"he duration of our sounds."
msgstr ""
"In een eerdere sectie, hebben we gezien hoe we de opdracht 'sleep' gebruiken o"
"m te bepalen wanneer we onze geluiden activeren . We zijn echter nog in staat "
"geweest om te bepalen hoe lang onze klank duurt."

#: 02.4-Durations-with-Envelopes.md:9
msgid ""
"In order to give us a simple, yet powerful means of *controlling the duration*"
" of our sounds, Sonic Pi provides the notion of an *ADSR amplitude envelope* ("
"we'll cover what ADSR means later in this section). An amplitude envelope offe"
"rs two useful aspects of control:"
msgstr ""
"Om ons een eenvoudig maar krachtig middel te geven waar we de controle hebben "
"over de tijdsduur van onze klank, biedt Sonic Pi ons een zekere manier van not"
"ering van een zogenaamde *ADSR amplitude envelope* (we bespreken later in deze"
" sectie wat dat betekent). Een amplitude \"envelope\" biedt twee manieren van co"
"ntrole:"

#: 02.4-Durations-with-Envelopes.md:14
msgid "control over the duration of a sound"
msgstr "controle over de duurtijd van een klank"

#: 02.4-Durations-with-Envelopes.md:15
msgid "control over the amplitude of a sound"
msgstr "controle over de amplitude van een klank"

#: 02.4-Durations-with-Envelopes.md:17
msgid "Duration"
msgstr "Duurtijd"

#: 02.4-Durations-with-Envelopes.md:19
msgid ""
"The duration is the length the sound lasts for. A longer duration means that y"
"ou hear the sound for longer. Sonic Pi's sounds all have a controllable amplit"
"ude envelope, and the total duration of that envelope is the duration of the s"
"ound. Therefore, by controlling the envelope you control the duration."
msgstr ""
"De duurtijd is de lengte dat een klank aanhoud . Een langere duur betekent dat"
" u de klank langer hoort. De klanken van Sonic Pi hebben allen een instelbare "
"amplitude envelop, de totale duur van die envelop is dan de totale duurtijd va"
"n die klank. Daarom kan je, door het instellen van de envelop,  de duurtijd be"
"palen."

#: 02.4-Durations-with-Envelopes.md:27
msgid ""
"The ADSR envelope not only controls duration, it also gives you *fine control "
"over the amplitude of the sound*. All audible sounds start and end silent and "
"contain some non-silent part in-between. Envelopes allow you to slide and hold"
" the amplitude of non-silent parts of the sound. It's like giving someone inst"
"ructions on how to turn up and down the volume of a guitar amplifier. For exam"
"ple you might ask someone to \"start at silence, slowly move up to full volume,"
" hold it for a bit, then quickly fall back to silence.\" Sonic Pi allows you to"
" program exactly this behaviour with envelopes."
msgstr ""
"De ADSR envelop regelt niet alleen de duurtijd, het geeft je ook een *fijnrege"
"ling van de geluidssterkte van de klank*. Alle hoorbare klanken starten en ein"
"digen van en naar onhoorbaarheid en bevatten, tussendoor, luidere en minder lu"
"ide delen. De ASDR envelop staat je toe de geluidssterkte van de hoorbare gede"
"elten van een klank te verschuiven en vast te houden. Zoals je iemand instruct"
"ies zou geven aan het volume van een gitaarversterker en deze van stil, naar l"
"angzaam omhoog tot het hoogste volume en deze even aan te laten houden, om dez"
"e dan, snel of traag, terug naar stil te brengen. Door de envelop kan je dit g"
"edrag in Sonic Pi programmeren."

#: 02.4-Durations-with-Envelopes.md:37
msgid ""
"Just to recap, as we have seen before, an amplitude of 0 is silence and an amp"
"litude of 1 is normal volume."
msgstr ""
"Even recapituleren, zoals we eerder hebben gezien, is een amplitude van 0 is s"
"tilte en een amplitude van 1 is het normale volume."

#: 02.4-Durations-with-Envelopes.md:40
msgid "Now, let us look at each of the parts of the envelopes in turn."
msgstr "Laten we nu kijken naar elk onderdeel van de envelop."

#: 02.4-Durations-with-Envelopes.md:42
msgid "Release Phase"
msgstr "Release fase"

#: 02.4-Durations-with-Envelopes.md:44
msgid ""
"The only part of the envelope that's used by default is the release time. This"
" is the time it takes for the synth's sound to fade out. All synths have a rel"
"ease time of 1 which means that by default they have a duration of 1 beat (whi"
"ch at the default BPM of 60 is 1 second):"
msgstr ""
"Het enige deel van de envelop die standaard wordt gebruikt is de release tijd."
" Dit is de tijd die nodig is om het geluid van een synth uit te vervagen. Alle"
" synthesizers hebben een release tijd van 1, wat betekent dat ze standaard een"
" duur van 1 beat hebben (en dus op onze standaard 60 BPM, 1 seconde lang is):"

#: 02.4-Durations-with-Envelopes.md:53
msgid ""
"The note will be audible for 1 second. Go ahead and time it :-) This is short "
"hand for the longer more explicit version:"
msgstr ""
"De noot zal 1 seconde lang hoorbaar zijn. Chronometreer maar :-) Dit is de ver"
"korting van de langere, meer uitgesproken versie:"

#: 02.4-Durations-with-Envelopes.md:56
#, no-wrap
msgid "play 70, release: 1"
msgstr "play 70, release: 1"

#: 02.4-Durations-with-Envelopes.md:60
msgid ""
"Notice how this sounds exactly the same (the sound lasts for one second). Howe"
"ver, it's now very easy to change the duration by modifying the value of the `"
"release:` opt:"
msgstr ""
"Merk op dat deze exact hetzelfde klinkt (de klank duurt één seconde). Het is d"
"us heel makkelijk om de duurtijd in te stellen door de waarde te veranderen va"
"n de  `release:` optie:"

#: 02.4-Durations-with-Envelopes.md:64
#, no-wrap
msgid "play 60, release: 2"
msgstr "play 60, release: 2"

#: 02.4-Durations-with-Envelopes.md:68
msgid ""
"We can make the synth sound for a very short amount of time by using a very sm"
"all release time:"
msgstr ""
"We kunnen de synth voor een heel korte tijd laten klinken door een heel korte "
"release tijd te gebruiken:"

#: 02.4-Durations-with-Envelopes.md:71
#, no-wrap
msgid "play 60, release: 0.2"
msgstr "play 60, release: 0.2"

#: 02.4-Durations-with-Envelopes.md:75
msgid ""
"The duration of the release of the sound is called the *release phase* and by "
"default is a linear transition (i.e. a straight line). The following diagram i"
"llustrates this transition:"
msgstr ""
"De duur van het “vrijlaten\" van het geluid noemen we de *release fase* en staa"
"t standaard op een lineaire overgang ingesteld (dwz rechtlijnig).Het volgende "
"diagram illustreert deze overgang:"

#: 02.4-Durations-with-Envelopes.md:79
msgid "![release envelope](../../../etc/doc/images/tutorial/env-release.png)"
msgstr "![release envelope](../../../etc/doc/images/tutorial/env-release.png)"

#: 02.4-Durations-with-Envelopes.md:81
#, fuzzy
msgid ""
"The vertical line at the far left of the diagram shows that the sound starts a"
"t 0 amplitude, but goes up to full amplitude immediately (this is the attack p"
"hase which we'll cover next). Once at full amplitude it then moves in a straig"
"ht line down to zero taking the amount of time specified by `release:`. *Longe"
"r release times produce longer synth fade outs.*"
msgstr ""
"De verticale lijn aan de linkerkant van het diagram toont ons dat het geluid b"
"ij amplitude 0 begint, onmiddellijk klimt naar volledige amplitude (dit is de "
" aanslag fase, die zullen we vervolgens bespreken). Eens bij volledige amplitu"
"de gaat het in een rechte lijn naar nul zakken in de tijd die is opgegeven met"
" `release:`. *Langere release tijden leveren een langer verloop, waarmee het g"
"eluid van de synth uitvaagt, op*"

#: 02.4-Durations-with-Envelopes.md:88
msgid ""
"You can therefore change the duration of your sound by changing the release ti"
"me. Have a play adding release times to your music."
msgstr ""
"Je kan dus de duurtijd van je klank veranderen aan de hand van de release tijd"
". Speel hier even mee, door deze release tijden toe te voegen aan je klanken."

#: 02.4-Durations-with-Envelopes.md:91
msgid "Attack Phase"
msgstr "Aanslag fase (de Attack)"

#: 02.4-Durations-with-Envelopes.md:93
msgid ""
"By default, the *attack phase* is 0 for all synths which means they move from "
"0 amplitude to 1 immediately. This gives the synth an initial percussive sound"
". However, you may wish to fade your sound in. This can be achieved with the `"
"attack:` opt. Try fading in some sounds:"
msgstr ""
"De aanslag fase is voor alle synths standaard ingesteld op 0, wat betekend dat"
" deze onmiddellijk van 0 naar 1 gaat. Dit geeft aan de synth een korte hevige "
"klank zoals bij een percussie-instrument. Maar misschien wil je je geluid zach"
"tjes luider laten worden. Dit kunnen we met de `attack:` optie. Probeer nu een"
"s van klanken te laten aanzwellen:"

#: 02.4-Durations-with-Envelopes.md:98
#, no-wrap
msgid ""
"play 60, attack: 2\n"
"sleep 3\n"
"play 65, attack: 0.5"
msgstr ""
"play 60, attack: 2\n"
"sleep 3\n"
"play 65, attack: 0.5"

#: 02.4-Durations-with-Envelopes.md:104
msgid ""
"You may use multiple opts at the same time. For example for a short attack and"
" a long release try:"
msgstr ""
"Je kan meerdere opties tegelijk kiezen. Probeer deze bijvoorbeeld voor een kor"
"tere aanslag en een langere uitloop:"

#: 02.4-Durations-with-Envelopes.md:107
#, no-wrap
msgid "play 60, attack: 0.7, release: 4"
msgstr "play 60, attack: 0.7, release: 4"

#: 02.4-Durations-with-Envelopes.md:111
msgid ""
"This short attack and long release envelope is illustrated in the following di"
"agram:"
msgstr ""
"Deze korte attack en lange release envelop wordt geïllustreerd in het volgende"
" diagram:"

#: 02.4-Durations-with-Envelopes.md:114
msgid ""
"![attack release envelope](../../../etc/doc/images/tutorial/env-attack-release"
".png)"
msgstr ""
"![attack release envelope](../../../etc/doc/images/tutorial/env-attack-release"
".png)"

#: 02.4-Durations-with-Envelopes.md:116
msgid ""
"Of course, you may switch things around. Try a long attack and a short release"
":"
msgstr ""
"Natuurlijk, kan je de dingen omdraaien. Probeer een lange attack en een korte "
"release:"

#: 02.4-Durations-with-Envelopes.md:119
#, no-wrap
msgid "play 60, attack: 4, release: 0.7"
msgstr "play 60, attack: 4, release: 0.7"

#: 02.4-Durations-with-Envelopes.md:123
msgid ""
"![long attack short release envelope](../../../etc/doc/images/tutorial/env-lon"
"g-attack-short-release.png)"
msgstr ""
"![long attack short release envelope](../../../etc/doc/images/tutorial/env-lon"
"g-attack-short-release.png)"

#: 02.4-Durations-with-Envelopes.md:125
msgid ""
"Finally, you can also have both short attack and release times for shorter sou"
"nds."
msgstr "Voorts kan je ook korte Attack en release tijden hebben voor korte klanken."

#: 02.4-Durations-with-Envelopes.md:128
#, no-wrap
msgid "play 60, attack: 0.5, release: 0.5"
msgstr "play 60, attack: 0.5, release: 0.5"

#: 02.4-Durations-with-Envelopes.md:132
msgid ""
"![short attack short release envelope](../../../etc/doc/images/tutorial/env-sh"
"ort-attack-short-release.png)"
msgstr ""
"![short attack short release envelope](../../../etc/doc/images/tutorial/env-sh"
"ort-attack-short-release.png)"

#: 02.4-Durations-with-Envelopes.md:134
msgid "Sustain Phase"
msgstr "SustainFase"

#: 02.4-Durations-with-Envelopes.md:136
msgid ""
"In addition to specifying attack and release times, you may also specify a sus"
"tain time to control the *sustain phase*. This is the time for which the sound"
" is maintained at full amplitude between the attack and release phases."
msgstr ""
"Naast het opgeven van attack en release tijden, u kunt ook een sustain-tijd op"
"geven om de *sustain fase* in te stellen. Dit is de tijd dat het geluid bij ee"
"n volledige amplitude tussen de attack en de release fase wordt gehandhaafd."

#: 02.4-Durations-with-Envelopes.md:141
#, no-wrap
msgid "play 60, attack: 0.3, sustain: 1, release: 1"
msgstr "play 60, attack: 0.3, sustain: 1, release: 1"

#: 02.4-Durations-with-Envelopes.md:145
msgid ""
"![ASR envelope](../../../etc/doc/images/tutorial/env-attack-sustain-release.pn"
"g)"
msgstr ""
"![ASR envelope](../../../etc/doc/images/tutorial/env-attack-sustain-release.pn"
"g)"

#: 02.4-Durations-with-Envelopes.md:147
msgid ""
"The sustain time is useful for important sounds you wish to give full presence"
" in the mix before entering an optional release phase. Of course, it's totally"
" valid to set both the `attack:` and `release:` opts to 0 and just use the sus"
"tain to have absolutely no fade in or fade out to the sound. However, be warne"
"d, a release of 0 can produce clicks in the audio and it's often better to use"
" a very small value such as 0.2."
msgstr ""
"De sustain-tijd is nuttig voor de klanken die je een volledige tegenwoordighei"
"d in de mix wil geven voordat deze een release fase doorlopen. Natuurlijk, is "
"het volkomen geldig om zowel de `attack:` als de  `release:` optie in te stell"
"en op 0, om gewoon geen fade in- of fade out aan het geluid toe te voegen. Maa"
"r hier moet je mee opletten, een release van 0 kan klikjes in de audio produce"
"ren en het is vaak beter om een zeer kleine waarde te gebruiken zoals 0,2."

#: 02.4-Durations-with-Envelopes.md:154
msgid "Decay Phase"
msgstr "Verval fase (Decay Phase)"

#: 02.4-Durations-with-Envelopes.md:156
msgid ""
"For an extra level of control, you can also specify a decay time. This is a ph"
"ase of the envelope that fits between the attack and sustain phases and specif"
"ies a time where the amplitude will drop from the `attack_level:` to the `deca"
"y_level:` (which unless you explicitly set it will be set to the `sustain_leve"
"l:`). By default, the `decay:` opt is 0 and both the attack and sustain levels"
" are 1 so you'll need to specify them for the decay time to have any effect:"
msgstr ""
"Voor een extra controle niveau kunt u ook de verval tijd instellen. Dit is de "
"fase van de envelop die past tussen de attack en sustain fasen en geeft u een "
"tijdwaarde waarbij de amplitude zal dalen het  `attack_niveau:` naar het `deca"
"y_niveau:` (die, tenzij u die expliciet instelt, op het ' sustain_niveau:' geb"
"racht zal worden). Standaard, is de `decay:` optie 0 en hebben zowel attack en"
" sustain niveaus zijn 1, deze zal je dus moeten opgeven voor de verval  tijd e"
"ffect heeft:"

#: 02.4-Durations-with-Envelopes.md:164
#, no-wrap
msgid ""
"play 60, attack: 0.1, attack_level: 1, decay: 0.2, sustain_level: 0.4, sustain"
": 1, release: 0.5"
msgstr ""
"play 60, attack: 0.1, attack_level: 1, decay: 0.2, sustain_level: 0.4, sustain"
": 1, release: 0.5"

#: 02.4-Durations-with-Envelopes.md:168
msgid ""
"![ADSR envelope](../../../etc/doc/images/tutorial/env-attack-decay-sustain-rel"
"ease.png)"
msgstr ""
"![ADSR envelope](../../../etc/doc/images/tutorial/env-attack-decay-sustain-rel"
"ease.png)"

#: 02.4-Durations-with-Envelopes.md:170
msgid "Decay Level"
msgstr "Verval niveau"

#: 02.4-Durations-with-Envelopes.md:172
msgid ""
"One last trick is that although the `decay_level:` opt defaults to be the same"
" value as `sustain_level:` you can explicitly set them to different values for"
" full control over the envelope. This allows you to to create envelopes such a"
"s the following:"
msgstr ""
"Eén laatste truc is dat, hoewel de `decay_level:` optie standaard dezelfde waa"
"rde heeft ingesteld als `sustain_level:`, je deze wel expliciet kan instellen "
"op verschillende waarden voor de volledige controle over de envelop. Hierdoor "
"kan je een envelop maken zoals deze:"

#: 02.4-Durations-with-Envelopes.md:177
#, no-wrap
msgid ""
"play 60, attack: 0.1, attack_level: 1, decay: 0.2, decay_level: 0.3, sustain: "
"1, sustain_level: 0.4, release: 0.5"
msgstr ""
"play 60, attack: 0.1, attack_level: 1, decay: 0.2, decay_level: 0.3, sustain: "
"1, sustain_level: 0.4, release: 0.5"

#: 02.4-Durations-with-Envelopes.md:181
msgid "![ASR envelope](../../../etc/doc/images/tutorial/env-decay-level.png)"
msgstr "![ASR envelope](../../../etc/doc/images/tutorial/env-decay-level.png)"

#: 02.4-Durations-with-Envelopes.md:183
msgid ""
"It's also possible to set the `decay_level:` to be higher than `sustain_level:"
"`:"
msgstr ""
"Het is ook mogelijk om het  `decay_niveau:` hoger te zetten dan het `sustain_n"
"iveau:`:"

#: 02.4-Durations-with-Envelopes.md:185
#, no-wrap
msgid ""
"play 60, attack: 0.1, attack_level: 0.1, decay: 0.2, decay_level: 1, sustain: "
"0.5, sustain_level: 0.8, release: 1.5"
msgstr ""
"play 60, attack: 0.1, attack_level: 0.1, decay: 0.2, decay_level: 1, sustain: "
"0.5, sustain_level: 0.8, release: 1.5"

#: 02.4-Durations-with-Envelopes.md:189
msgid "![ASR envelope](../../../etc/doc/images/tutorial/env-decay-level-2.png)"
msgstr "![ASR envelope](../../../etc/doc/images/tutorial/env-decay-level-2.png"

#: 02.4-Durations-with-Envelopes.md:191
msgid "ADSR Envelopes"
msgstr "ADSR Enveloppen"

#: 02.4-Durations-with-Envelopes.md:193
msgid "So to summarise, Sonic Pi's ADSR envelopes have the following phases:"
msgstr "Dus samengevat , hebben Sonic Pi's ADSR enveloppen de volgende fasen:"

#: 02.4-Durations-with-Envelopes.md:195
msgid "*attack* - time from 0 amplitude to the `attack_level`,"
msgstr "*attack* - tijd vanaf 0 amplitude naar `attack_niveau`,"

#: 02.4-Durations-with-Envelopes.md:196
msgid "*decay* - time to move amplitude from `attack_level` to `decay_level`,"
msgstr ""
"*decay* - tijd om de amplitude van `attack_niveau` naar `decay_niveau` te bren"
"gen,"

#: 02.4-Durations-with-Envelopes.md:197
msgid "*sustain* - time to move the amplitude from `decay_level` to `sustain_level`,"
msgstr ""
"*sustain* - tijd om de amplitude van `decay_niveau` naar `sustain_niveau` te b"
"rengen,"

#: 02.4-Durations-with-Envelopes.md:198
msgid "*release* - time to move amplitude from `sustain_level` to 0"
msgstr "*release* - tijd om de amplitude van `sustain_niveau` naar 0 te brengen"

#: 02.4-Durations-with-Envelopes.md:200
msgid ""
"It's important to note that the duration of a sound is the summation of the ti"
"mes of each of these phases. Therefore the following sound will have a duratio"
"n of 0.5 + 1 + 2 + 0.5 = 4 beats:"
msgstr ""
"Het is belangrijk op te merken dat de duur van een geluid de som is van van de"
" tijd van elk van deze fasen. Daarom zal het volgende geluid een duur van 0,5 "
"+ 1 + 2 + 0,5 = 4 hebben:"

#: 02.4-Durations-with-Envelopes.md:204
#, no-wrap
msgid ""
"play 60, attack: 0.5, attack_level: 1, decay: 1, sustain_level: 0.4, sustain: "
"2, release: 0.5"
msgstr ""
"play 60, attack: 0.5, attack_level: 1, decay: 1, sustain_level: 0.4, sustain: "
"2, release: 0.5"

#: 02.4-Durations-with-Envelopes.md:208
msgid "Now go and have a play adding envelopes to your sounds..."
msgstr "Nu gaan we hiermee spelen, door deze envelop aan jouw klanken toe te voegen…"

#: 03-Samples.md:1
msgid "3 Samples"
msgstr "3 Samples"

#: 03-Samples.md:3
msgid "Samples"
msgstr "Samples"

#: 03-Samples.md:5
msgid ""
"Another great way to develop your music is to use pre-recorded sounds. In grea"
"t hip-hop tradition, we call these pre-recorded sounds *samples*. So, if you t"
"ake a microphone outside, go and record the gentle sound of rain hitting canva"
"s, you've just created a sample."
msgstr ""
"Een andere goede manier om je muziek op te bouwen is het gebruik van vooraf op"
"genomen geluiden. In de traditie van de hip-hop, noemen we deze vooraf opgenom"
"en geluiden *samples*. Dus, als je met een microfoon buiten gaat en je neemt h"
"et geluid van de regen op, dat zachtjes tegen een zeil tikt, heb je een sample"
" gemaakt."

#: 03-Samples.md:10
msgid ""
"Sonic Pi lets you do lots of fun things with samples. Not only does it ship wi"
"th 130 public domain samples ready for you to jam with, it lets you play and m"
"anipulate your own. Let's get to it..."
msgstr ""
"Sonic Pi laat je allerlei prettige dingen doen door gebruik te maken van sampl"
"es. En niet alleen omdat deze over de 90 samples aan boord heeft waar je mee a"
"an de slag kan gaan, ook laat het je toe om jouw eigen samples te gebruiken en"
" deze te manipuleren. We vertrekken..."

#: 03.1-Triggering-Samples.md:1
msgid "3.1 Triggering Samples"
msgstr "3.1 Samples Triggeren"

#: 03.1-Triggering-Samples.md:3
msgid "Triggering Samples"
msgstr "Samples Triggeren"

#: 03.1-Triggering-Samples.md:5
msgid ""
"Playing beeps is only the beginning. Something that's a lot of fun is triggeri"
"ng pre-recorded samples. Try it:"
msgstr ""
"Bliepjes spelen was slechts het begin. Vooraf opgenomen samples triggeren is o"
"ok echt fijn . Probeer het:"

#: 03.1-Triggering-Samples.md:8
#, no-wrap
msgid "sample :ambi_lunar_land"
msgstr "sample :ambi_lunar_land"

#: 03.1-Triggering-Samples.md:12
msgid ""
"Sonic Pi includes many samples for you to play with. You can use them just lik"
"e you use the `play` command. To play multiple samples and notes just write th"
"em one after another:"
msgstr ""
"Sonic Pi bevat vele samples waarmee je aan de slag kunt gaan. Je kan ze gebrui"
"ken met het `play` commando, net zoals de bliepjes. Als je meerder samples en "
"noten wil gebruiken kan je ze dus achter elkaar schrijven:"

#: 03.1-Triggering-Samples.md:16
#, no-wrap
msgid ""
"play 36\n"
"play 48\n"
"sample :ambi_lunar_land\n"
"sample :ambi_drone"
msgstr ""
"play 36\n"
"play 48\n"
"sample :ambi_lunar_land\n"
"sample :ambi_drone"

#: 03.1-Triggering-Samples.md:23
msgid "If you want to space them out in time, use the `sleep` command:"
msgstr "Als je ze in tijd wil verspreiden, maak dan gebruik van het `sleep` commando:"

#: 03.1-Triggering-Samples.md:25
#, no-wrap
msgid ""
"sample :ambi_lunar_land\n"
"sleep 1\n"
"play 48\n"
"sleep 0.5\n"
"play 36\n"
"sample :ambi_drone\n"
"sleep 1\n"
"play 36"
msgstr ""
"sample :ambi_lunar_land\n"
"sleep 1\n"
"play 48\n"
"sleep 0.5\n"
"play 36\n"
"sample :ambi_drone\n"
"sleep 1\n"
"play 36"

#: 03.1-Triggering-Samples.md:36
#, fuzzy
msgid ""
"Notice how Sonic Pi doesn't wait for a sound to finish before starting the nex"
"t sound. The `sleep` command only describes the separation of the *triggering*"
" of the sounds. This allows you to easily layer sounds together creating inter"
"esting overlap effects."
msgstr ""
"Merk op hoe Sonic Pi niet zal wachten om een geluid te voltooien voordat het v"
"olgende geluid begint. De opdracht `sleep` beschrijft alleen de scheiding tuss"
"en het *activeren* van de geluiden. Hierdoor kan je makkelijk verschillende la"
"gen van klanken creëren die een interessant effect kunnen hebben door overlapp"
"ing. Verderop in deze handleiding zullen we een kijkje  nemen om de *duur* van"
" geluiden met enveloppen in te stellen."

#: 03.1-Triggering-Samples.md:42
msgid "Discovering Samples"
msgstr "Samples Ontdekken"

#: 03.1-Triggering-Samples.md:44
#, fuzzy
msgid ""
"There are two ways to discover the range of samples provided in Sonic Pi. Firs"
"t, you can use this help system. Click on Samples in the menu at the bottom of"
" this help screen, choose your category and then you'll see a list of availabl"
"e sounds."
msgstr ""
"Er zijn twee manieren om samples in Sonic Pi te verkennen. Eerst, kunt u dit h"
"ulp-systeem gebruiken. Klik op Samples in het meest linkse verticale menu, kie"
"s uw categorie en vervolgens ziet u een lijst met beschikbare geluiden."

#: 03.1-Triggering-Samples.md:49
msgid ""
"Alternatively you can use the *auto-completion system*. Simply type the start "
"of a sample group such as: `sample :ambi_` and you'll see a drop-down of sampl"
"e names appear for you to select. Try the following category prefixes:"
msgstr ""
"Alternatief kan je het *auto-vervollediging systeem* gebruiken.  Typ enkel het"
" begin van de groep waartoe de sample behoort zoals `sample :ambi_`  en je zal"
" een menu zien openklappen waarin de samples weergegeven worden die je kan sel"
"ecteren. Probeer de volgende categorie-voorvoegsels:"

#: 03.1-Triggering-Samples.md:54
msgid "`:ambi_`"
msgstr "`:ambi_`"

#: 03.1-Triggering-Samples.md:55
msgid "`:bass_`"
msgstr "`:bass_`"

#: 03.1-Triggering-Samples.md:56
msgid "`:elec_`"
msgstr "`:elec_`"

#: 03.1-Triggering-Samples.md:57
msgid "`:perc_`"
msgstr "`:perc_`"

#: 03.1-Triggering-Samples.md:58
msgid "`:guit_`"
msgstr "`:guit_`"

#: 03.1-Triggering-Samples.md:59
msgid "`:drum_`"
msgstr "`:drum_`"

#: 03.1-Triggering-Samples.md:60
msgid "`:misc_`"
msgstr "`:misc_`"

#: 03.1-Triggering-Samples.md:61
msgid "`:bd_`"
msgstr "`:bd_`"

#: 03.1-Triggering-Samples.md:63
msgid "Now start mixing samples into your compositions!"
msgstr "Begin nu de samples in je composities te mixen!"

#: 03.2-Sample-Params.md:1
msgid "3.2 Sample Parameters"
msgstr "3.2 Sample Parameters"

#: 03.2-Sample-Params.md:3
msgid "Sample Parameters: Amp and Pan"
msgstr "Sample Parameters: Amp en Pan"

#: 03.2-Sample-Params.md:5
msgid ""
"As we saw with synths, we can easily control our sounds with parameters. Sampl"
"es support exactly the same parameterisation mechanism. Let's revisit our frie"
"nds `amp:` and `pan:`."
msgstr ""
"Zoals we met synths zagen, kunnen we gemakkelijk onze geluiden met parameters "
"regelen. Samples steunen op precies hetzelfde parameter mechanisme. Laten we o"
"pnieuw onze vrienden `amp:` en `pan:` erbij halen."

#: 03.2-Sample-Params.md:9
msgid "Amping samples"
msgstr "Samples amp-en"

#: 03.2-Sample-Params.md:11
msgid ""
"You can change the amplitude of samples with exactly the same approach you use"
"d for synths:"
msgstr ""
"Je kan de amplitude van de samples met precies dezelfde aanpak instellen die j"
"e voor synthesizers gebruikt:"

#: 03.2-Sample-Params.md:14
#, no-wrap
msgid "sample :ambi_lunar_land, amp: 0.5"
msgstr "sample :ambi_lunar_land, amp: 0.5"

#: 03.2-Sample-Params.md:18
msgid "Panning samples"
msgstr "Samples Pannen"

#: 03.2-Sample-Params.md:20
msgid ""
"We're also able to use the `pan:` parameter on samples. For example, here's ho"
"w we'd play the amen break in the left ear and then half way through play it a"
"gain through the right ear:"
msgstr ""
"We kunnen ook gebruik maken van de `pan:` parameter op samples. Bijvoorbeeld, "
"hier zouden we de amen break met het linker oor en halverwege met het rechter "
"oor horen:"

#: 03.2-Sample-Params.md:24
#, no-wrap
msgid ""
"sample :loop_amen, pan: -1\n"
"sleep 0.877\n"
"sample :loop_amen, pan: 1"
msgstr ""
"sample :loop_amen, pan: -1\n"
"sleep 0.877\n"
"sample :loop_amen, pan: 1"

#: 03.2-Sample-Params.md:30
msgid "Note that 0.877 is half the duration of the `:loop_amen` sample in seconds."
msgstr ""
"Merk op dat 0.877 de helft van de lengte is, van de ': loop_amen' sample in se"
"conden uitgedrukt."

#: 03.2-Sample-Params.md:33
msgid ""
"Finally, note that if you set some synth defaults with `use_synth_defaults` (w"
"hich we will discuss later), these will be ignored by `sample`."
msgstr ""
"Hou er tenslotte ook rekening mee dat als je sommige synths van het commando `"
"use_synth_defaults` voorziet (welke we later zullen bespreken), deze door `sam"
"ple` zullen genegeerd worden."

#: 03.3-Stretching-Samples.md:1
msgid "3.3 Stretching Samples"
msgstr "3.3  Samples Stretchen"

#: 03.3-Stretching-Samples.md:3
msgid "Stretching Samples"
msgstr "Samples Stretchen"

#: 03.3-Stretching-Samples.md:5
msgid ""
"Now that we can play a variety of synths and samples to create some music, it'"
"s time to learn how to modify both the synths and samples to make the music ev"
"en more unique and interesting. First, let's explore the ability to *stretch* "
"and *squash* samples."
msgstr ""
"Nu  we  met verschillende synths en samples muziek kunnen gaan spelen, is het "
"tijd om te leren hoe je zowel de synths als de samples in kan stellen om de mu"
"ziek nog meer uniek en interessant te maken. Ten eerste, laten we  de mogelijk"
"heid onderzoeken om te samples te *stretchen* of te *krimpen*."

#: 03.3-Stretching-Samples.md:10
msgid "Sample Representation"
msgstr "Sample Representatie"

#: 03.3-Stretching-Samples.md:12
msgid ""
"Samples are pre-recorded sounds stored as numbers which represent how to move "
"the speaker cone to reproduce the sound. The speaker cone can move in and out,"
" and so the numbers just need to represent how far in and out the cone needs t"
"o be for each moment in time. To be able to faithfully reproduce a recorded so"
"und the sample typically needs to store many thousands of numbers per second! "
"Sonic Pi takes this list of numbers and feeds them at the right speed to move "
"your computer's speaker in and out in just the right way to reproduce the soun"
"d. However, it's also fun to change the speed with which the numbers are fed t"
"o the speaker to change the sound."
msgstr ""
"Samples zijn eigenlijk vooraf opgenomen geluiden die opgeslagen zijn als getal"
"len die het verplaatsen van de conus van de luidspreker veroorzaken, om het ge"
"luid te kunnen representeren. De conus van de luidspreker kan zich naar voor e"
"n naar achter verplaatsen , en dus hoeven de nummers alleen maar weer te geven"
", hoe ver in en uit de kegel op elk moment in de tijd moet bewegen. Om een get"
"rouwe afspiegeling van een opgenomen geluid te kunnen zijn moet de sample mees"
"tal vele duizenden nummers per seconde opslaan! Sonic Pi neemt deze lijst van "
"nummers en voedt hen met de juiste snelheid, om de luidspreker van uw computer"
" op de juiste manier in en uit te verplaatsen om het geluid te kunnen weergeve"
"n. Het is echter ook leuk om  de snelheid waarmee de nummers worden gevoed aan"
" de luidspreker te veranderen, om het geluid te veranderen ."

#: 03.3-Stretching-Samples.md:23
msgid "Changing Rate"
msgstr "Koers wijzigen (rate)"

#: 03.3-Stretching-Samples.md:25
msgid ""
"Let's play with one of the ambient sounds: `:ambi_choir`. To play it with the "
"default rate, you can pass a `rate:` opt to `sample`:"
msgstr ""
"Laten we even spelen met één van de  ambient sounds: `:ambi_choir`. Om deze af"
" te spelen op de standaard ingestelde koers, kan je een `rate:` optie aan `sam"
"ple` doorgeven:"

#: 03.3-Stretching-Samples.md:28
#, no-wrap
msgid "sample :ambi_choir, rate: 1"
msgstr "sample :ambi_choir, rate: 1"

#: 03.3-Stretching-Samples.md:32
msgid ""
"This plays it at normal rate (1), so nothing special yet. However, we're free "
"to change that number to something else. How about `0.5`:"
msgstr ""
"Deze speelt de normale koers (1), nog niets bijzonders dus. We zijn echter vri"
"j om dat cijfer te veranderen naar iets anders. Hoe zit het met '0.5':"

#: 03.3-Stretching-Samples.md:35
#, no-wrap
msgid "sample :ambi_choir, rate: 0.5"
msgstr "sample :ambi_choir, rate: 0.5"

#: 03.3-Stretching-Samples.md:39
msgid ""
"Woah! What's going on here? Well, two things. Firstly, the sample takes twice "
"as long to play, secondly the sound is an octave lower. Let's explore these th"
"ings in a little more detail."
msgstr ""
"Woah! Wat gebeurt hier? Nou, twee dingen. Ten eerste, de sample duurt twee kee"
"r zo lang in deze weergave, ten tweede is het geluid een octaaf lager. Laten w"
"e deze dingen meer in detail gaan bekijken."

#: 03.3-Stretching-Samples.md:43
msgid "Let's stretch"
msgstr "Laten we stretchen"

#: 03.3-Stretching-Samples.md:45
msgid ""
"A sample that's fun to stretch and compress is the Amen Break. At normal rate,"
" we might imagine throwing it into a *drum 'n' bass* track:"
msgstr ""
"Een sample die is leuk om te stretchen en te comprimeren is de Amen Break. Op "
"normale koers, kunnen we het ons voorstellen deze in een *drum 'n' bass* track"
" te gooien:"

#: 03.3-Stretching-Samples.md:48 03.4-Enveloped-Samples.md:17
#: 03.5-Partial-Samples.md:9 A.03-coded-beats.md:33 A.12-sample-slicing.md:22
#: A.20-creative-coding-in-the-classroom.md:185
#, no-wrap
msgid "sample :loop_amen"
msgstr "sample :loop_amen"

#: 03.3-Stretching-Samples.md:52
msgid ""
"However by changing the rate we can switch up genres. Try half speed for *old "
"school hip-hop*:"
msgstr ""
"Door de koerssnelheid te veranderen kunnen we van genre schakelen. Probeer een"
"s halve snelheid voor *old school hiphop*:"

#: 03.3-Stretching-Samples.md:55 03.5-Partial-Samples.md:16
#: A.20-creative-coding-in-the-classroom.md:194
#, no-wrap
msgid "sample :loop_amen, rate: 0.5"
msgstr "sample :loop_amen, rate: 0.5"

#: 03.3-Stretching-Samples.md:59
msgid "If we speed it up, we enter *jungle* territory:"
msgstr "Als we het versnellen, komen we op het grondgebied van *jungle*:"

#: 03.3-Stretching-Samples.md:61 A.17-sample-stretching.md:46
#, no-wrap
msgid "sample :loop_amen, rate: 1.5"
msgstr "sample :loop_amen, rate: 1.5"

#: 03.3-Stretching-Samples.md:65
msgid ""
"Now for our final party trick - let's see what happens if we use a negative ra"
"te:"
msgstr ""
"En nog een laatste truc - laten we eens kijken wat er gebeurt als we gebruik m"
"aken van een negatieve koers:"

#: 03.3-Stretching-Samples.md:68
#, no-wrap
msgid "sample :loop_amen, rate: -1"
msgstr "sample :loop_amen, rate: -1"

#: 03.3-Stretching-Samples.md:72
msgid ""
"Woah! It plays it *backwards*! Now try playing with lots of different samples "
"at different rates. Try very fast rates. Try crazy slow rates. See what intere"
"sting sounds you can produce."
msgstr ""
"Woah! Nu speelt het *achteruit*! Proberen nu met een heleboel verschillende sa"
"mples aan verschillende koerssnelheden te spelen. Probeer zeer snelle rates. P"
"robeer gek trage rates. Zie welke interessante geluiden je zo kan produceren."

#: 03.3-Stretching-Samples.md:76
msgid "A Simple Explanation of Sample Rate"
msgstr "Een eenvoudige uitleg over de Sample Rate"

#: 03.3-Stretching-Samples.md:78
msgid ""
"A useful way to think of samples is as springs. Playback rate is like squashin"
"g and stretching the spring. If you play the sample at rate 2, you're *squashi"
"ng the spring* to half its normal length. The sample therefore takes half the "
"amount of time to play as it's shorter. If you play the sample at half rate, y"
"ou're *stretching the spring* to double its length. The sample therefore takes"
" twice the amount of time to play as it's longer. The more you squash (higher "
"rate), the shorter it gets, the more you stretch (lower rate), the longer it g"
"ets."
msgstr ""
"Een handige manier van denken is om samples te zien als een veer. Afspeel snel"
"heid is als het stretchen en indrukken van de veer. Als je de sample aan snelh"
"eid (rate) 2 afspeelt, ben je de *veer aan het indrukken* met de helft daarvan"
", heb je de veer in rust. Het neemt de sample dus de helft van de tijd om te s"
"pelen, aangezien deze nu korter is. Als je de sample aan half tempo speelt, *s"
"tretch je de veer* tot het dubbele van zijn lengte. De sample neemt daarom twe"
"emaal zolang tijd om te spelen, aangezien deze nu langer is. Hoe meer u indruk"
"t (hogere snelheid), hoe korter deze wordt, hoe meer je stretcht (lagere snelh"
"eid), hoe langer deze wordt."

#: 03.3-Stretching-Samples.md:87
msgid ""
"Compressing a spring increases its density (the number of coils per cm) - this"
" is similar to the sample sounding *higher pitched*. Stretching the spring dec"
"reases its density and is similar to the sound having a *lower pitch*."
msgstr ""
"Het comprimeren van een veer verhoogt de dichtheid (het aantal windingen per c"
"m) - deze is vergelijkbaar met de sample die dan *hoger gepitcht* klinkt. De v"
"eer rekken neemt de dichtheid af en is dan vergelijkbaar met het geluid met ee"
"n *lagere toonhoogte*."

#: 03.3-Stretching-Samples.md:93
msgid "The Maths Behind Sample Rate"
msgstr "De wiskunde achter Sample Rate"

#: 03.3-Stretching-Samples.md:95
msgid ""
"(This section is provided for those that are interested in the details. Please"
" feel free to skip it...)"
msgstr ""
"(Deze sectie is bedoeld voor degenen die geïnteresseerd zijn in de details. Je"
" kan deze gerust overslaan...)"

#: 03.3-Stretching-Samples.md:98
msgid ""
"As we saw above, a sample is represented by a big long list of numbers represe"
"nting where the speaker should be through time. We can take this list of numbe"
"rs and use it to draw a graph which would look similar to this:"
msgstr ""
"Zoals we hierboven zagen, wordt een sample vertegenwoordigd door een grote lan"
"ge lijst nummers, die de luidspreker vertelt waar deze zou moeten zijn doorhee"
"n een zekere tijd. We kunnen deze lijst van getallen gebruiken om bv. deze gra"
"fiek te tekenen:"

#: 03.3-Stretching-Samples.md:103
msgid "![sample graph](../../../etc/doc/images/tutorial/sample.png)"
msgstr "![sample graph](../../../etc/doc/images/tutorial/sample.png)"

#: 03.3-Stretching-Samples.md:105
msgid ""
"You might have seen pictures like this before. It's called the *waveform* of a"
" sample. It's just a graph of numbers. Typically a waveform like this will hav"
"e 44100 points of data per second (this is due to the Nyquist-Shannon sampling"
" theorem). So, if the sample lasts for 2 seconds, the waveform will be represe"
"nted by 88200 numbers which we would feed to the speaker at a rate of 44100 po"
"ints per second. Of course, we could feed it at double rate which would be 882"
"00 points per second. This would therefore take only 1 second to play back. We"
" could also play it back at half rate which would be 22050 points per second t"
"aking 4 seconds to play back."
msgstr ""
"Misschien hebt u al wel eens afbeeldingen gezien zoals deze. Het is een *gelui"
"dsgolf* van een sample.Het is gewoon een grafiek van getallen. Meestal zal een"
" golfvorm 44100 punten per seconde bevatten over de gegevens (dit is te wijten"
" aan de Nyquist-Shannon sample-theoriën). Dus, als de sample 2 seconden duurt,"
" za de golfvorm vertegenwoordigd worden door 88200 nummers die we aan de luids"
"preker met een snelheid van 44100 punten per seconde zouden voeden. Natuurlijk"
", kunnen we deze aan dubbele snelheid voeden, dat zou dan 88200 punten per sec"
"onde zijn. Dit zou dus slechts 1 seconde in beslag nemen om af te spelen. We k"
"unnen ook aan halve snelheid afspelen, dat zou 22050 punten per seconde zijn w"
"aarbij deze 4 seconden nodig heeft om af te spelen."

#: 03.3-Stretching-Samples.md:116
msgid "The duration of the sample is affected by the playback rate:"
msgstr "De duur van de sample wordt beïnvloed door de afspeelsnelheid (rate):"

#: 03.3-Stretching-Samples.md:118
msgid "Doubling the playback rate halves the playback time,"
msgstr "De afspeelsnelheid verdubbelen, halveert de afspeeltijd,"

#: 03.3-Stretching-Samples.md:119
msgid "Halving the playback rate doubles the playback time,"
msgstr "Halvering van de afspeelsnelheid, verdubbelt de afspeeltijd,"

#: 03.3-Stretching-Samples.md:120
msgid "Using a playback rate of one fourth quadruples the playback time,"
msgstr "Een kwart van de afspeelsnelheid, verviervoudigt de speeltijd,"

#: 03.3-Stretching-Samples.md:121
msgid "Using a playback rate of 1/10 makes playback last 10 times longer."
msgstr "1/10 van de afspeelsnelheid, maakt het afspelen 10 keer langer."

#: 03.3-Stretching-Samples.md:123
msgid "We can represent this with the formula:"
msgstr "Wij kunnen deze representeren met de formule:"

#: 03.3-Stretching-Samples.md:125
#, no-wrap
msgid "new_sample_duration = (1 / rate) * sample_duration "
msgstr "new_sample_duur = (1 / rate) * sample_duur "

#: 03.3-Stretching-Samples.md:129
msgid ""
"Changing the playback rate also affects the pitch of the sample. The frequency"
" or pitch of a waveform is determined by how fast it moves up and down. Our br"
"ains somehow turn fast movement of speakers into high notes and slow movement "
"of speakers into low notes. This is why you can sometimes even see a big bass "
"speaker move as it pumps out super low bass - it's actually moving a lot slowe"
"r in and out than a speaker producing higher notes."
msgstr ""
"De afspeelsnelheid zal ook de toonhoogte van de sample wijzigen. De frequentie"
" of toonhoogte van een golfvorm wordt bepaald door hoe snel deze op en neer be"
"weegt. Onze hersenen vormen  de snelle beweging van luidsprekers om tot hoge n"
"oten en de trage beweging tot lage noten. Daarom kan je soms zelfs zien hoe ui"
"t een grote bas luidspreker de super lage tonen worden gepompt, en in feite ga"
"an deze veel trager dan een luidspreker die hoge noten reproduceert."

#: 03.3-Stretching-Samples.md:137
msgid ""
"If you take a waveform and squash it it will move up and down more times per s"
"econd. This will make it sound higher pitched. It turns out that doubling the "
"amount of up and down movements (oscillations) doubles the frequency. So, *pla"
"ying your sample at double rate will double the frequency you hear it*. Also, "
"*halving the rate will halve the frequency*. Other rates will affect the frequ"
"ency accordingly."
msgstr ""
"Als je een golfvorm neemt van een geluid en deze over de lengte samendruk,t za"
"l deze per seconde vaker op en neer gaan. Dit zal het geluid hoger laten klink"
"en.Het blijkt dat een verdubbeling van het aantal op en neer bewegingen (trill"
"ingen) de frequentie verdubbelt . Ook zal *bij het afspelen van je sample aan "
"dubbele rate, de frequentie verdubbelen die je hoort*. Dus ook zal *een halver"
"ing van de rate waarde, de frequentie halveren*. Andere waarden zullen de freq"
"uenties dan naargelang beïnvloeden."

#: 03.4-Enveloped-Samples.md:1
msgid "3.4 Enveloped Samples"
msgstr "3.4 Envelop op Samples"

#: 03.4-Enveloped-Samples.md:3
msgid "Enveloped Samples"
msgstr "Envelop op Samples"

#: 03.4-Enveloped-Samples.md:5
msgid ""
"It is also possible to modify the *duration* and *amplitude* of a sample using"
" an ADSR envelope. However, this works slightly differently to the ADSR envelo"
"pe available on synths. Sample envelopes only allow you to reduce the amplitud"
"e and duration of a sample - and never to increase it. The sample will stop wh"
"en either the sample has finished playing or the envelope has completed - whic"
"hever is first. So, if you use a very long `release:`, it won't extend the dur"
"ation of the sample."
msgstr ""
"Het is ook mogelijk om  de *duur* en *amplitude* te wijzigen van een samples m"
"et behulp van een ADSR-envelop. Nochtans, werkt dit enigszins anders dan de AD"
"SR envelop voor synths. Sample enveloppen kunnen alleen de amplitude en de duu"
"r van een sample verminderen  - en nooit om deze te verhogen. De sample wordt "
"gestopt wanneer de sample is afgespeeld of de envelop heeft voltooid - welke v"
"an deze het eerst is. Dus, bij een erg lange release:`, het zal de sample niet"
" verlengen."

#: 03.4-Enveloped-Samples.md:13
msgid "Amen Envelopes"
msgstr "Amen Envelop"

#: 03.4-Enveloped-Samples.md:15
msgid "Let's return to our trusty friend the Amen Break:"
msgstr "Laten we terugkeren naar onze trouwe vriend de Amen Break:"

#: 03.4-Enveloped-Samples.md:21
msgid ""
"With no opts, we hear the full sample at full amplitude. If we want to fade th"
"is in over 1 second we can use the `attack:` param:"
msgstr ""
"Zonder opties zullen we de volledige sample horen aan normale volle amplitude."
" Als we deze met behulp van het volume in willen mixen over een tijd van 1 sec"
"onde kunnen we de `attack:` parameter gebruiken:"

#: 03.4-Enveloped-Samples.md:24
#, no-wrap
msgid "sample :loop_amen, attack: 1"
msgstr "sample :loop_amen, attack: 1"

#: 03.4-Enveloped-Samples.md:28
msgid "For a shorter fade in, choose a shorter attack value:"
msgstr "Voor een kortere fade in, kies een kleinere waarde voor de attack:"

#: 03.4-Enveloped-Samples.md:30
#, no-wrap
msgid "sample :loop_amen, attack: 0.3"
msgstr "sample :loop_amen, attack: 0.3"

#: 03.4-Enveloped-Samples.md:34
msgid "Auto Sustain"
msgstr "Auto Sustain"

#: 03.4-Enveloped-Samples.md:36
msgid ""
"Where the ADSR envelope's behaviour differs from the standard synth envelope i"
"s in the *sustain* value. In the standard synth envelope, the sustain defaulte"
"d to 0 unless you set it manually. With samples, the sustain value defaults to"
" an *automagical* value - the time left to play the rest of the sample. This i"
"s why we hear the full sample when we pass no defaults. If the attack, decay, "
"sustain and release values were all 0 we'd never hear a peep. Sonic Pi therefo"
"re calculates how long the sample is, deducts any attack, decay and release ti"
"mes and uses the result as your sustain time. If the attack, decay and release"
" values add up to more than the duration of the sample, the sustain is simply "
"set to 0."
msgstr ""
"Waar de ADSR envelop zeker van gedrag verschilt met de standaard synth-envelop"
" is in de *sustain* waarde. In de standaard synth envelop, is de sustain waard"
"e, standaard op 0 ingesteld, tenzij u deze handmatig instelt. Met samples, is "
"de sustain waarde, standaard  een *automagische* waarde - namelijk de speelduu"
"r die de sample rest . Dit is de reden waarom we de totale sample horen als we"
" geen waarden instellen. Als de attack, decay, sustain en release waarden alle"
"n 0 waren zouden we  niks horen . Sonic Pi berekent dus hoe lang de sample is,"
" trekt elke attack, decay en release tijden af en wordt het resultaat, de sust"
"ain tijd. Als de som van de attack, decay en release waarden meer dan de duur "
"van de sample zijn, is de sustain gewoon ingesteld op 0."

#: 03.4-Enveloped-Samples.md:48
msgid "Fade Outs"
msgstr "Fade Outs"

#: 03.4-Enveloped-Samples.md:50
msgid ""
"To explore this, let's consider our Amen break in more detail. If we ask Sonic"
" Pi how long the sample is:"
msgstr ""
"Om deze te ontdekken, laten we dan onze Amen break in meer detail bekijken. Al"
"s wij Sonic Pi nu eens vragen hoe lang de sample is:"

#: 03.4-Enveloped-Samples.md:53
#, no-wrap
msgid "print sample_duration :loop_amen"
msgstr "print sample_duration :loop_amen"

#: 03.4-Enveloped-Samples.md:57
msgid ""
"It will print out `1.753310657596372` which is the length of the sample in sec"
"onds. Let's just round that to `1.75` for convenience here. Now, if we set the"
" release to `0.75`, something surprising will happen:"
msgstr ""
"Het zal `1.753310657596372` uitprinten wat de de lengte is  van de sample in s"
"econden uitgedrukt. Laten we dit gewoon even afronden naar '1,75' voor het gem"
"ak hier. Nu, als we de release naar '0,75' instellen zal er iets verrassend ge"
"beuren:"

#: 03.4-Enveloped-Samples.md:61
#, no-wrap
msgid "sample :loop_amen, release: 0.75"
msgstr "sample :loop_amen, release: 0.75"

#: 03.4-Enveloped-Samples.md:65
msgid ""
"It will play the first second of the sample at full amplitude before then fadi"
"ng out over a period of 0.75 seconds. This is the *auto sustain* in action. By"
" default, the release always works from the end of the sample. If our sample w"
"as 10.75 seconds long, it would play the first 10 seconds at full amplitude be"
"fore fading out over 0.75s."
msgstr ""
"Het zal de eerste seconde van de sample met volledige amplitude afspelen voord"
"at deze dan uit-fade over een periode van 0.75 seconden. Dit is de *auto susta"
"in* in actie. Standaard werkt de release altijd vanaf het einde van de sample."
" Als onze sample 10.75 seconden lang was, zou het de eerste 10 seconden spelen"
" met volledige amplitude vooraleer deze met 0.75s uit te fade-en ."

#: 03.4-Enveloped-Samples.md:71
msgid "Remember: by default, `release:` fades out at the end of a sample."
msgstr ""
"Dus onthoud: standaard geeft de release, aan het einde van de sample, een fade"
"-out ."

#: 03.4-Enveloped-Samples.md:73
msgid "Fade In and Out"
msgstr "Fade In en Uit"

#: 03.4-Enveloped-Samples.md:75
msgid ""
"We can use both `attack:` and `release:` together with the auto sustain behavi"
"our to fade both in and out over the duration of the sample:"
msgstr ""
"We kunnen `attack:` een `release:` samen met het gedrag van de auto sustain ge"
"bruiken om in de duurtijd van de sample  in en uit te fade-en:"

#: 03.4-Enveloped-Samples.md:78
#, no-wrap
msgid "sample :loop_amen, attack: 0.75, release: 0.75"
msgstr "sample :loop_amen, attack: 0.75, release: 0.75"

#: 03.4-Enveloped-Samples.md:82
msgid ""
"As the full duration of the sample is 1.75s and our attack and release phases "
"add up to 1.5s, the sustain is automatically set to 0.25s. This allows us to e"
"asily fade the sample in and out."
msgstr ""
"Als de totale duurtijd van de sample 1.75s is en onze attack en release fase o"
"pgeteld 1.5 is, wordt de sustain fase automatisch op 0.25 ingesteld. Dit staat"
" ons toe van makkelijk in en uit te fade-en."

#: 03.4-Enveloped-Samples.md:86
msgid "Explicit sustain"
msgstr "Expliciete sustain"

#: 03.4-Enveloped-Samples.md:88
msgid ""
"We can easily get back to our normal synth ADSR behaviour by manually setting "
"`sustain:` to a value such as 0:"
msgstr ""
"We kunnen makkelijk naar ons normale synth ADSR gedrag terugkeren door de `sus"
"tain:` manueel naar een waarde te brengen zoals bv. 0:"

#: 03.4-Enveloped-Samples.md:91
#, no-wrap
msgid "sample :loop_amen, sustain: 0, release: 0.75"
msgstr "sample :loop_amen, sustain: 0, release: 0.75"

#: 03.4-Enveloped-Samples.md:95
msgid ""
"Now, our sample only plays for 0.75 seconds in total. With the default for `at"
"tack:` and `decay:` at 0, the sample jumps straight to full amplitude, sustain"
"s there for 0s then releases back down to 0 amplitude over the release period "
"- 0.75s."
msgstr ""
"Nu zal onze sample in totaal 0.75s spelen. Met de standaard waarden voor `atta"
"ck:` en`decay:` van 0, springt de sample recht naar volle amplitude, zal 0s su"
"stain-en maakt een neerwaardse release tot amplitude 0 over een periode van 0."
"75s."

#: 03.4-Enveloped-Samples.md:100
msgid "Percussive cymbals"
msgstr "Percussieve cymbalen"

#: 03.4-Enveloped-Samples.md:102
msgid ""
"We can use this behaviour to good effect to turn longer sounding samples into "
"shorter, more percussive versions. Consider the sample `:drum_cymbal_open`:"
msgstr ""
"We kunnen dit gedrag goed gebruiken om langer klinkende geluiden om te zetten "
"naar korte, meer percussieve geluiden. We overwegen dit even met de sample `:d"
"rum_cymbal_open`:"

#: 03.4-Enveloped-Samples.md:106
#, no-wrap
msgid "sample :drum_cymbal_open"
msgstr "sample :drum_cymbal_open"

#: 03.4-Enveloped-Samples.md:110
msgid ""
"You can hear the cymbal sound ringing out over a period of time. However, we c"
"an use our envelope to make it more percussive:"
msgstr ""
"Je hoort het cimbaal over een zekere periode uitzingen. We kunnen nu de envelo"
"p gebruiken om deze meer percussief te maken:"

#: 03.4-Enveloped-Samples.md:113
#, no-wrap
msgid "sample :drum_cymbal_open, attack: 0.01, sustain: 0, release: 0.1"
msgstr "sample :drum_cymbal_open, attack: 0.01, sustain: 0, release: 0.1"

#: 03.4-Enveloped-Samples.md:117
msgid ""
"You can then emulate hitting the cymbal and then dampening it by increasing th"
"e sustain period:"
msgstr ""
"Je kan het slaan op de cymbaal, en het dempen ervan veranderen, door de sustai"
"n fase te vergroten:"

#: 03.4-Enveloped-Samples.md:120
#, no-wrap
msgid "sample :drum_cymbal_open, attack: 0.01, sustain: 0.3, release: 0.1"
msgstr "sample :drum_cymbal_open, attack: 0.01, sustain: 0.3, release: 0.1"

#: 03.4-Enveloped-Samples.md:124
msgid ""
"Now go and have fun putting envelopes over the samples. Try changing the rate "
"too for really interesting results."
msgstr ""
"Leef je uit door aan samples een envelop toe te voegen. Probeer ook de rate te"
" veranderen voor echt interessante resultaten."

#: 03.5-Partial-Samples.md:1
msgid "3.5 Partial Samples"
msgstr "3.5 gedeeltelijke Samples"

#: 03.5-Partial-Samples.md:3
msgid "Partial Samples"
msgstr "gedeeltelijke Samples"

#: 03.5-Partial-Samples.md:5
msgid ""
"This section will conclude our exploration of Sonic Pi's sample player. Let's "
"do a quick recap. So far we've looked at how we can trigger samples:"
msgstr ""
"Deze sectie zal onze verkenning afsluiten van Sonic Pi's sample player. Laten "
"we een snelle samenvatting maken. Tot nu toe hebben we gekeken hoe we samples "
"kunnen triggeren:"

#: 03.5-Partial-Samples.md:13
msgid ""
"We then looked at how we can change the rate of samples such as playing them a"
"t half speed:"
msgstr ""
"Vervolgens hebben we gekeken hoe we de rate kunnen wijzigen naar bv. het afspe"
"len op halve snelheid:"

#: 03.5-Partial-Samples.md:20
msgid "Next, we looked at how we could fade a sample in (let's do it at half speed):"
msgstr ""
"Verder hebben we gekeken hoe we deze sample konden in fade-en (we doen deze op"
" halve snelheid):"

#: 03.5-Partial-Samples.md:23
#, no-wrap
msgid "sample :loop_amen, rate: 0.5, attack: 1"
msgstr "sample :loop_amen, rate: 0.5, attack: 1"

#: 03.5-Partial-Samples.md:27
msgid ""
"We also looked at how we could use the start of a sample percussively by givin"
"g `sustain:` an explicit value and setting both the attack and release to be s"
"hort values:"
msgstr ""
"We hebben ook gekeken hoe we de start van een sample meer percussief kunne mak"
"en door aan de `sustain:` een expliciete waarde te geven en aan zowel de attac"
"k als de release korte waarden te geven:"

#: 03.5-Partial-Samples.md:31
#, no-wrap
msgid "sample :loop_amen, rate: 2, attack: 0.01, sustain: 0, release: 0.35"
msgstr "sample :loop_amen, rate: 2, attack: 0.01, sustain: 0, release: 0.35"

#: 03.5-Partial-Samples.md:35
msgid ""
"However, wouldn't it be nice if we didn't have to always start at the beginnin"
"g of the sample? Wouldn't it also be nice if we didn't have to always finish a"
"t the end of the sample?"
msgstr ""
"Zou het niet leuk zijn, als we deze niet altijd hoeven te laten starten vanaf "
"het begin van de sample? Zou het niet leuk zijn, als we deze niet altijd hoeve"
"n te laten stoppen tot het einde van de sample?"

#: 03.5-Partial-Samples.md:39
msgid "Choosing a starting point"
msgstr "Startpunt kiezen"

#: 03.5-Partial-Samples.md:41
msgid ""
"It is possible to choose an arbitrary starting point in the sample as a value "
"between 0 and 1 where 0 is the start of the sample, 1 is the end and 0.5 is ha"
"lf way through the sample. Let's try playing only the last half of the amen br"
"eak:"
msgstr ""
"Het is mogelijk om een willekeurige startpunt in de sample te kiezen als een w"
"aarde tussen 0 en 1, waarbij 0 is het begin van de sample 1 is het einde en 0,"
"5 is halverwege sample. Laten we proberen om alleen de laatste helft van de am"
"en break te spelen:"

#: 03.5-Partial-Samples.md:46
#, no-wrap
msgid "sample :loop_amen, start: 0.5"
msgstr "sample :loop_amen, start: 0.5"

#: 03.5-Partial-Samples.md:50
msgid "How about the last quarter of the sample:"
msgstr "Of het laatste kwart van de sample:"

#: 03.5-Partial-Samples.md:52
#, no-wrap
msgid "sample :loop_amen, start: 0.75"
msgstr "sample :loop_amen, start: 0.75"

#: 03.5-Partial-Samples.md:56
msgid "Choosing a finish point"
msgstr "Eindpunt kiezen"

#: 03.5-Partial-Samples.md:58
msgid ""
"Similarly, it is possible to choose an arbitrary finish point in the sample as"
" a value between 0 and 1. Let's finish the amen break half way through:"
msgstr ""
"Ook is het mogelijk om een willekeurig eindpunt te bepalen in de sample met ee"
"n waarde tussen 0 en 1. Laat ons de Amen Break halverwege doen stoppen:"

#: 03.5-Partial-Samples.md:62 A.12-sample-slicing.md:62
#, no-wrap
msgid "sample :loop_amen, finish: 0.5"
msgstr "sample :loop_amen, finish: 0.5"

#: 03.5-Partial-Samples.md:66
msgid "Specifying start and finish"
msgstr "Specifieke begin- en eindpunten opgeven"

#: 03.5-Partial-Samples.md:68
msgid ""
"Of course, we can combine these two to play arbitrary segments of the audio fi"
"le. How about only a small section in the middle:"
msgstr ""
"Natuurlijk kunnen we deze alle twee gebruiken om elk willekeurig segment van h"
"et audiobestand af te laten spelen. Hoe zit dat met een heel kleine sectie erg"
"ens in het midden:"

#: 03.5-Partial-Samples.md:71
#, no-wrap
msgid "sample :loop_amen, start: 0.4, finish: 0.6"
msgstr "sample :loop_amen, start: 0.4, finish: 0.6"

#: 03.5-Partial-Samples.md:75
msgid "What happens if we choose a start position after the finish position?"
msgstr "Wat gebeurd er als we een startpunt achter het eind punt kiezen?"

#: 03.5-Partial-Samples.md:78
#, no-wrap
msgid "sample :loop_amen, start: 0.6, finish: 0.4"
msgstr "sample :loop_amen, start: 0.6, finish: 0.4"

#: 03.5-Partial-Samples.md:82
msgid "Cool! It plays it backwards!"
msgstr "Cool! Het speelt achterstevoren!"

#: 03.5-Partial-Samples.md:84
msgid "Combining with rate"
msgstr "Combineren met rate"

#: 03.5-Partial-Samples.md:86
msgid ""
"We can combine this new ability to play arbitrary segments of audio with our f"
"riend `rate:`. For example, we can play a very small section of the middle of "
"the amen break very slowly:"
msgstr ""
"We kunnen deze nieuwe mogelijkheid combineren om een willekeurige selectie in "
"ons audiofragment met onze oude vriend `rate:`. We kunnen bijvoorbeeld een hee"
"l klein stukje in het midden van onze amen break sample traag laten afspelen:"

#: 03.5-Partial-Samples.md:90
#, no-wrap
msgid "sample :loop_amen, start: 0.5, finish: 0.7, rate: 0.2"
msgstr "sample :loop_amen, start: 0.5, finish: 0.7, rate: 0.2"

#: 03.5-Partial-Samples.md:94
msgid "Combining with envelopes"
msgstr "Combineren met de envelop"

#: 03.5-Partial-Samples.md:96
msgid ""
"Finally, we can combine all of this with our ADSR envelopes to produce interes"
"ting results:"
msgstr ""
"Tot slot kunnen we dit alles combineren met onze ADSR envelop om tot interessa"
"nte resultaten te komen:"

#: 03.5-Partial-Samples.md:99
#, no-wrap
msgid ""
"sample :loop_amen, start: 0.5, finish: 0.8, rate: -0.2, attack: 0.3, release: "
"1"
msgstr ""
"sample :loop_amen, start: 0.5, finish: 0.8, rate: -0.2, attack: 0.3, release: "
"1"

#: 03.5-Partial-Samples.md:103
msgid "Now go and have a play mashing up samples with all of this fun stuff..."
msgstr ""
"Experimenteer er nu maar even op los en maak leuke mash-ups van samples met de"
"ze toffe nieuwigheden..."

#: 03.6-External-Samples.md:1
msgid "3.6 External Samples"
msgstr "3.6 Externe Samples"

#: 03.6-External-Samples.md:3
msgid "External Samples"
msgstr "Externe Sample"

#: 03.6-External-Samples.md:5
msgid ""
"Whilst the built-in samples can get you up and started quickly, you might wish"
" to experiment with other recorded sounds in your music. Sonic Pi totally supp"
"orts this. First though, let's have a quick discussion on the portability of y"
"our piece."
msgstr ""
"Terwijl de ingebouwde samples je direct lanceren om mee aan de slag te laten g"
"aan, wil je misschien experimenteren met ander vooraf opgenomen materiaal om j"
"ouw muziek mee te maken. Sonic Pi ondersteund dit ook. Vooraleerst, gaan we ee"
"rst even snel iets anders bespreken nl. de portabiliteit van jouw muziekstuk."

#: 03.6-External-Samples.md:10
msgid "Portability"
msgstr "Portabiliteit"

#: 03.6-External-Samples.md:12
msgid ""
"When you compose your piece purely with built-in synths and samples, the code "
"is all you need to faithfully reproduce your music. Think about that for a mom"
"ent - that's amazing! A simple piece of text you can email around or stick in "
"a [Gist](https://gist.github.com) represents everything you need to reproduce "
"your sounds. That makes it *really easy to share* with your friends as they ju"
"st need to get hold of the code."
msgstr ""
"Wanneer je je muziekstuk louter met de ingebouwde synth's en samples componeer"
"t, is de code het enige wat je nodig hebt om een getrouwe weergave van jou muz"
"iek te horen. Fantastisch toch,als je hier even over nadenkt! Een simpel stukj"
"e tekst dat je rond kan e-mailen  of in een [Gist](https://gist.github.com) ka"
"n steken, vertegenwoordigd alles wat je nodig hebt om jouw klanken te laten ho"
"ren. Dit maakt het *echt makkelijk om te delen* met jouw vrienden, daar zij al"
"leen over jouw stukje code moeten beschikken."

#: 03.6-External-Samples.md:19
msgid ""
"However, if you start using your own pre-recorded samples, you lose this porta"
"bility. This is because to reproduce your music other people not only need you"
"r code, they need your samples too. This limits the ability for others to mani"
"pulate, mash-up and experiment with your work. Of course this shouldn't stop y"
"ou from using your own samples, it's just something to consider."
msgstr ""
"Als je echter met je eigen voor-opgenomen samples begint te werken verlies je "
"deze portabiliteit. Dit komt  omdat je nu  niet alleen de code nodig hebt, maa"
"r ook de samples om je muziek getrouw af te spelen. Dit beperkt  de mogelijkhe"
"id voor anderen om met jouw werk te gaan experimenteren, te manipuleren of een"
" mash up van te  maken. Natuurlijk mag dit jou niet tegenhouden om je eigen sa"
"mples te gaan gebruiken, gewoon om even bij stil te staan."

#: 03.6-External-Samples.md:26
msgid "Local Samples"
msgstr "Lokale Samples"

#: 03.6-External-Samples.md:28
#, fuzzy
msgid ""
"So how do you play any arbitrary WAV, AIFF, OGG, OGA or FLAC file on your comp"
"uter? All you need to do is pass the path of that file to `sample`:"
msgstr ""
"Dus hoe speel je elke willekeurige WAV-, AIFF- of FLAC-bestand op uw computer?"
" Het enige wat je hoeft te doen is het pad opgeven van het bestand naar `sampl"
"e`:"

#: 03.6-External-Samples.md:31
#, no-wrap
msgid ""
"# Raspberry Pi, Mac, Linux\n"
"sample \"/Users/sam/Desktop/my-sound.wav\"\n"
"# Windows\n"
"sample \"C:/Users/sam/Desktop/my-sound.wav\""
msgstr ""
"# Raspberry Pi, Mac, Linux\n"
"sample \"/Users/sam/Desktop/my-sound.wav\"\n"
"# Windows\n"
"sample \"C:/Users/sam/Desktop/my-sound.wav\""

#: 03.6-External-Samples.md:38
msgid ""
"Sonic Pi will automatically load and play the sample. You can also pass all th"
"e standard params you're used to passing `sample`:"
msgstr ""
"Sonic Pi zal deze samples automatisch laden en afspelen. Je kan ook alle stand"
"aard parameters toewijzen aan deze doorgegeven `sample`:"

#: 03.6-External-Samples.md:41
#, no-wrap
msgid ""
"# Raspberry Pi, Mac, Linux\n"
"sample \"/Users/sam/Desktop/my-sound.wav\", rate: 0.5, amp: 0.3\n"
"# Windows\n"
"sample \"C:/Users/sam/Desktop/my-sound.wav\", rate: 0.5, amp: 0.3"
msgstr ""
"# Raspberry Pi, Mac, Linux\n"
"sample \"/Users/sam/Desktop/my-sound.wav\", rate: 0.5, amp: 0.3\n"
"# Windows\n"
"sample \"C:/Users/sam/Desktop/my-sound.wav\", rate: 0.5, amp: 0.3"

#: 03.7-Sample-Packs.md:1
msgid "3.7 Sample Packs"
msgstr "3.7 Sample Packs"

#: 03.7-Sample-Packs.md:3
msgid "Sample Packs"
msgstr "Sample Packs"

#: 03.7-Sample-Packs.md:5
msgid ""
"**Note: this section of the tutorial covers the advanced topic of working with"
" large directories of your own samples. This will be the case if you've downlo"
"aded or bought your own sample packs and wish to use them within Sonic Pi.**"
msgstr ""
"**Opmerking dit gedeelte van de handleiding behandeld een meer geavanceerd the"
"ma, nl. over het werken met grote bestanden van eigen samples. Dit zal bijvoor"
"beeld het geval zijn als je sample packs kocht of hebt gedownload en deze in S"
"onic Pi wenst te gebruiken.**"

#: 03.7-Sample-Packs.md:10
msgid "**Feel free to skip this if you're happy working with the built-in samples.**"
msgstr ""
"**U mag dit gedeelte gerust overslaan wanneer je tevreden bent met de ingebouw"
"de samples.**"

#: 03.7-Sample-Packs.md:13
msgid ""
"When working with large folders of external samples it can be cumbersome to ha"
"ve to type the whole path every time to trigger an individual sample."
msgstr ""
"Wanneer je werkt met grote mappen van externe samples kan het erg onhandig zij"
"n om telkens het hele pad te typen die jouw eigen samples triggeren."

#: 03.7-Sample-Packs.md:17
msgid "For example, say you have the following folder on your machine:"
msgstr "Bijvoorbeeld, stel dat je de volgende map hebt op je computer:"

#: 03.7-Sample-Packs.md:19
#, no-wrap
msgid "/path/to/my/samples/"
msgstr "/path/to/my/samples/"

#: 03.7-Sample-Packs.md:23
msgid "When we look inside that folder we find the following samples:"
msgstr "Als we in die map kijken vinden we de volgende voorbeelden:"

#: 03.7-Sample-Packs.md:25 03.7-Sample-Packs.md:86
msgid "`100_A#_melody1.wav`"
msgstr "`100_A#_melody1.wav`"

#: 03.7-Sample-Packs.md:26 03.7-Sample-Packs.md:87
msgid "`100_A#_melody2.wav`"
msgstr "`100_A#_melody2.wav`"

#: 03.7-Sample-Packs.md:27 03.7-Sample-Packs.md:88
msgid "`100_A#_melody3.wav`"
msgstr "`100_A#_melody3.wav`"

#: 03.7-Sample-Packs.md:28 03.7-Sample-Packs.md:89
msgid "`120_A#_melody4.wav`"
msgstr "`120_A#_melody4.wav`"

#: 03.7-Sample-Packs.md:29 03.7-Sample-Packs.md:90
msgid "`120_Bb_guit1.wav`"
msgstr "`120_Bb_guit1.wav`"

#: 03.7-Sample-Packs.md:30 03.7-Sample-Packs.md:91
msgid "`120_Bb_piano1.wav`"
msgstr "`120_Bb_piano1.wav`"

#: 03.7-Sample-Packs.md:32
msgid "Typically in order to play the piano sample we can use the full path:"
msgstr ""
"Om de piano sample te spelen gebruiken we dan normaal gezien het volledige pad"
":"

#: 03.7-Sample-Packs.md:34
#, no-wrap
msgid "sample \"/path/to/my/samples/120_Bb_piano1.wav\""
msgstr "sample \"/pad/naar/mijn/samples/120_Bb_piano1.wav\""

#: 03.7-Sample-Packs.md:38
msgid "If we want to then play the guitar sample we can use its full path too:"
msgstr "Om vervolgens de gitaar sample te willen gebruiken we ook het volledige pad:"

#: 03.7-Sample-Packs.md:40
#, no-wrap
msgid "sample \"/path/to/my/samples/120_Bb_guit.wav\""
msgstr "sample \"/pad/naar/mijn/samples/120_Bb_guit.wav\""

#: 03.7-Sample-Packs.md:44
msgid ""
"However, both of these calls to sample requires us to *know* the names of the "
"samples within our directory. What if we just want to listen to each sample in"
" turn quickly?"
msgstr ""
"Echter, om beide samples op te roepen zijn we genoodzaakt te weten welke de na"
"am is van deze samples in onze map. Wat als we  snel door onze samples willen "
"gaan om deze even te beluisteren?"

#: 03.7-Sample-Packs.md:48
msgid "Indexing Sample Packs"
msgstr "Sample Packs Indexeren"

#: 03.7-Sample-Packs.md:50
msgid ""
"If we want to play the first sample in a directory we just need to pass the di"
"rectory's name to `sample` and the index `0` as follows:"
msgstr ""
"Als we de eerste sample binnen een map willen spelen moeten we alleen de naam "
"van de map doorgeven aan `sample` en de index `0` als volgt:"

#: 03.7-Sample-Packs.md:53
#, no-wrap
msgid "sample \"/path/to/my/samples/\", 0"
msgstr "sample \"/pad/naar/mijn/samples/\", 0"

#: 03.7-Sample-Packs.md:57
msgid "We can even make a shortcut to our directory path using a variable:"
msgstr ""
"We kunnen zelfs een binnenweg maken naar ons pad van de map met behulp van een"
" variabele:"

#: 03.7-Sample-Packs.md:59
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, 0"
msgstr ""
"samps = \"/pad/naar/mijn/samples/\"\n"
"sample samps, 0"

#: 03.7-Sample-Packs.md:64
msgid ""
"Now, if we want to play the second sample in our directory, we just need to ad"
"d 1 to our index:"
msgstr ""
"Als we dan de tweede sample in onze folder willen afspelen, moeten we gewoon 1"
" aan onze index toevoegen:"

#: 03.7-Sample-Packs.md:67
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, 1"
msgstr ""
"samps = \"/pad/naar/mijn/samples/\"\n"
"sample samps, 1"

#: 03.7-Sample-Packs.md:72
msgid ""
"Notice that we no longer need to know the names of the samples in the director"
"y - we just need to know the directory itself (or have a shortcut to it). If w"
"e ask for an index which is larger than the number of samples, it simply wraps"
" round just like Rings. Therefore, whatever number we use we're guaranteed to "
"get one of the samples in that directory."
msgstr ""
"Merk op dat we hierbij niet meer de naam van de sample in de map hoeven op te "
"geven,  alleen de map zelf (of de snelkoppeling). Als we nu een indexnummer zo"
"uden gebruiken dat hoger is dan het aantal samples, gaan de eerste samples in "
"de map terug aan de beurt komen, als in een kring werpt deze er zich rond. Wel"
"k nummer we ook gaan gebruiken, we komen gegarandeerd één van onze samples teg"
"en in deze map."

#: 03.7-Sample-Packs.md:79
msgid "Filtering Sample Packs"
msgstr "Sample Packs Filteren"

#: 03.7-Sample-Packs.md:81
msgid ""
"Usually indexing is enough, but sometimes we need more power to sort and organ"
"ise our samples. Luckily many sample packs add useful information in the filen"
"ames. Let's take another look at the sample file names in our directory:"
msgstr ""
"Meestal is indexeren genoeg, maar soms moeten we wat meer \"power\" hebben om on"
"ze samples te sorteren en te organiseren. Gelukkig voegen veel sample packs nu"
"ttige informatie in de bestandsnamen toe. Laten we nog eens kijken naar de sam"
"ple-bestandsnamen in onze folder:"

#: 03.7-Sample-Packs.md:93
msgid ""
"Notice that in these filenames we have quite a bit of information. Firstly, we"
" have the BPM of the sample (beats per minute) at the start. So, the piano sam"
"ple is at 120 BPM and our first three melodies are at 100 BPM. Also, our sampl"
"e names contain the key. So the guitar sample is in Bb and the melodies are in"
" A#. This information is very useful for mixing in these samples with our othe"
"r code. For example, we know we can only play the piano sample with code that'"
"s in 120 BPM and in the key of Bb."
msgstr ""
"Merk op dat we in deze bestandsnamen vrij veel informatie hebben. Ten eerste h"
"ebben we de BPM van de sample (beats per minute) aan het begin. Dus, de piano "
"sample bedraagt 120 BPM en onze eerste drie melodieën hebben 100 BPM. Ook beva"
"tten onze samples,de toonhoogte (key). Dus de sample van de gitaar is in Bb en"
" de melodieën zijn in A #. Deze informatie is zeer nuttig bij het mengen van d"
"eze samples, samen met onze andere code. Bijvoorbeeld, nu weten we dat de pian"
"o sample enkel in een code past die 120 BPM heeft met toonhoogte van Bb."

#: 03.7-Sample-Packs.md:102
msgid ""
"It turns out that we can use this particular naming convention of our sample s"
"ets in the code to help us filter out the ones we want. For example, if we're "
"working at 120 BPM, we can filter down to all the samples that contain the str"
"ing `\"120\"` with the following:"
msgstr ""
"Het komt wel goed uit dat we deze bijzondere naamgeving van onze sample sets o"
"ok in de code kunnen gebruiken om onze samples uit te filteren naar degene die"
" we willen. Bijvoorbeeld, als we op 120 BPM werken, kunnen we als volgt, alle "
"samples uitfilteren die de tekenreeks `\"120\"` bevatten:"

#: 03.7-Sample-Packs.md:107
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\""
msgstr ""
"samps = \"/pad/naar/mijn/samples/\"\n"
"sample samps, \"120\""

#: 03.7-Sample-Packs.md:112
msgid ""
"This will play us the first match. If we want the second match we just need to"
" use the index:"
msgstr ""
"Deze zal ons een eerste filtering opleveren. Als we verder willen gaan zoeken "
"naar een sample die goed past, kunnen we de index gebruiken:"

#: 03.7-Sample-Packs.md:115
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\", 1"
msgstr ""
"samps = “/pad/naar/mijn/samples/\"\n"
"sample samps, \"120\", 1"

#: 03.7-Sample-Packs.md:120
#, fuzzy
msgid ""
"We can even use multiple filters at the same time. For example, if we want a s"
"ample whose filename contains both the substrings `\"120\"` and `\"A#\"` we can fi"
"nd it easily with the following code:"
msgstr ""
"We kunnen zelfs meerdere filters tegelijk gebruiken. Bijvoorbeeld, als we will"
"en dat een sample waarvan de bestandsnaam zowel de subtekenreeksen \"120\" en \"A"
"#\" bevat, kunnen we die met de volgende code gemakkelijk terugvinden:"

#: 03.7-Sample-Packs.md:124
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\", \"A#\""
msgstr ""
"samps = \"/pad/naar/mijn/samples/\"\n"
"sample samps, \"120\", \"A#\""

#: 03.7-Sample-Packs.md:129
msgid "Finally, we're still free to add our usual opts to the call to `sample`:"
msgstr ""
"Voorts zijn we nog altijd vrij om onze gebruikelijke opties voor de weergave v"
"an onze `sample` toe te voegen:"

#: 03.7-Sample-Packs.md:131
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\", \"Bb\", 1, lpf: 70, amp: 2"
msgstr ""
"samps = \"/pad/naar/mijn/samples/\"\n"
"sample samps, \"120\", \"Bb\", 1, lpf: 70, amp: 2"

#: 03.7-Sample-Packs.md:136
msgid "Sources"
msgstr "Bronnen"

#: 03.7-Sample-Packs.md:138
#, fuzzy
msgid ""
"The sample filter pre-arg system understands two types of information: *source"
"s* and *filters*. Sources are information used to create the list of potential"
" candidates. A source can take two forms:"
msgstr ""
"Het prearg(-umenten) van het sample filtersysteem herkent twee informatie type"
"s: bronnen en filters. Bronnen worden gebruikt om een lijst van potentiële te "
"maken. Een bron kan twee vormen aannemen: Een bron kan twee vormen aannemen:"

#: 03.7-Sample-Packs.md:142
#, fuzzy
msgid "`\"/path/to/samples\"` - a string representing a valid path to a directory"
msgstr "\"/pad/naar/samples\" - een tekenreeks dat een geldig pad naar een map weergeeft"

#: 03.7-Sample-Packs.md:143
#, fuzzy
msgid "`\"/path/to/samples/foo.wav\"` - a string representing a valid path to a sample"
msgstr ""
"\"/pad/naar/samples/blabla.wav\" - en tekenreeks die een geldig pad naar een sam"
"ple weergeeft"

#: 03.7-Sample-Packs.md:145
msgid ""
"The `sample` fn will first gather all sources and use them to create a large l"
"ist of candidates. This list is constructed by first adding all valid paths an"
"d then by adding all the valid `.flac`, `.aif`, `.aiff`, `.wav`, `.wave` files"
" contained within the directories."
msgstr ""
"De `sample` functie zal eerst alle bronnen verzamelen en deze gebruiken om een"
" lange lijst van kandidaten te maken.Deze lijst wordt gevormd door eerst alle "
"geldige paden toe te voegen en daarna alle geldige  `.flac`, `.aif`, `.aiff`, "
"`.wav`, `.wave` bestanden die deze mappen bevatten."

#: 03.7-Sample-Packs.md:150
msgid "For example, take a look at the following code:"
msgstr "Kijk bijvoorbeeld even naar deze code:"

#: 03.7-Sample-Packs.md:152
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"samps2 = \"/path/to/my/samples2/\"\n"
"path = \"/path/to/my/samples3/foo.wav\"\n"
"sample samps, samps2, path, 0"
msgstr ""
"samps = \"/pad/naar/mijn/samples/\"\n"
"samps2 = \"/pad/naar/mijn/samples2/\"\n"
"path = \"/pad/naar/mijn/samples3/foo.wav\"\n"
"sample samps, samps2, path, 0"

#: 03.7-Sample-Packs.md:160
msgid ""
"Here, we're combining the contents of the samples within two directories and a"
"dding a specific sample. If `\"/path/to/my/samples/\"` contained 3 samples and `"
"\"/path/to/my/samples2/\"` contained 12, we'd have 16 potential samples to index"
" and filter (3 + 12 + 1)."
msgstr ""
"Hier combineren we de inhoud van de samples binnen twee mappen en het toevoege"
"n van een specifieke sample. Als `\"/pad/naar/mijn/samples/\"` 3 samples bevat e"
"n  `\"/pad/naar/mijn/samples/\"` bevat er 12, zouden we 16 potentiële samples om"
" te indexeren en te filteren hebben (3 + 12 + 1)."

#: 03.7-Sample-Packs.md:165
msgid ""
"By default, only the sample files within a directory are gathered into the can"
"didate list. Sometimes you might have a number of nested folders of samples yo"
"u wish to search and filter within. You can therefore do a recursive search fo"
"r all samples within all subfolders of a particular folder by adding `**` to t"
"he end of the path:"
msgstr ""
"Standaard worden alleen de voorbeeldbestanden binnen een map in de lijst met k"
"andidaten verzameld. Soms heb je misschien een aantal geneste mappen van sampl"
"es die je lokaal wil gaan zoeken en filteren. Je kan daarom een recursieve zoe"
"kopdracht voor alle samples in alle sub-mappen van een bepaalde map doen door "
"toevoeging van `**` aan het einde van het pad:"

#: 03.7-Sample-Packs.md:171
#, no-wrap
msgid ""
"samps = \"/path/to/nested/samples/**\"\n"
"sample samps, 0"
msgstr ""
"samps = \"/pad/naar/geneste/samples/**\"\n"
"sample samps, 0"

#: 03.7-Sample-Packs.md:176
msgid ""
"Take care though as searching through a very large set of folders may take a l"
"ong time. However, the contents of all folder sources are cached, so the delay"
" will only happen the first time."
msgstr ""
"Hou er wel rekening mee dat als je door een groot aantal folders gaat zoeken,d"
"it veel tijd in beslag kan nemen. Maar de inhoud van alle folderbronnen worden"
" ge-cached, dus de vertraging zal maar één keer optreden."

#: 03.7-Sample-Packs.md:180
msgid ""
"Finally, note that the sources *must go first*. If no source is given, then th"
"e set of built-in samples will be selected as the default list of candidates t"
"o work with."
msgstr ""
"Ten slotte, merk op dat de bronnen *eerst moeten gaan*. Als er geen bron is op"
"gegeven, zal de set van ingebouwde samples geselecteerd worden als de standaar"
"dlijst van kandidaten om mee te werken."

#: 03.7-Sample-Packs.md:184 A.19-subtractive-synthesis.md:47
msgid "Filters"
msgstr "Filters"

#: 03.7-Sample-Packs.md:186
msgid ""
"Once you have a list of candidates you may use the following filtering types t"
"o further reduce the selection:"
msgstr ""
"Als u eenmaal een lijst van kandidaten hebt mag u het volgende filter typen om"
" de selectie verder te reduceren:"

#: 03.7-Sample-Packs.md:189
msgid ""
"`\"foo\"` Strings will filter on substring occurrence within file name (minus di"
"rectory path and extension)."
msgstr ""
"`\"foo\"` Tekenreeksen zullen filteren op sub-tekenreeksen gebeurtenissen binnen"
" de bestandsnaam (min het pad van de map en de extensie)."

#: 03.7-Sample-Packs.md:190
msgid ""
"`/fo[oO]/` Regular Expressions will filter on pattern matching of file name (m"
"inus directory path and extension)."
msgstr ""
"`/fo[oO]/` Reguliere expressies zullen filteren op patroonherkenning van besta"
"ndsnamen (min het pad van de map en de extensie)."

#: 03.7-Sample-Packs.md:191
msgid ""
"`:foo` - Keywords will filter candidates on whether the keyword is a direct ma"
"tch of the filename (minus directory path and extension)."
msgstr ""
"`:foo` -trefwoorden zullen naar kandidaten filteren op basis van hun gelijkeni"
"s met de bestandsnaam (min het pad van de map en extentie)."

#: 03.7-Sample-Packs.md:192
msgid ""
"`lambda{|a| ... }` - Procs with one argument will be treated as a candidate fi"
"lter or generator function. It will be passed the list of current candidates a"
"nd must return a new list of candidates (a list of valid paths to sample files"
")."
msgstr ""
"`lambda{|a| ... }` - Procedures met één argument zullen als een kandidaat-filt"
"er gezien worden of als een genereer-functie. \n"
"Het zal worden doorgegeven aan de lijst van de huidige kandidaten en moet een "
"nieuwe lijst van kandidaten oproepen ( een lijst met geldige paden naar sample"
" bestanden)."

#: 03.7-Sample-Packs.md:193
msgid ""
"`1` - Numbers will select the candidate with that index (wrapping round like a"
" ring if necessary)."
msgstr ""
"`1` - Nummers zullen de kandidaat met dit index selecteren (en als een kring r"
"ond gaan als dit nodig is)."

#: 03.7-Sample-Packs.md:195
msgid ""
"For example, we can filter over all the samples in a directory containing the "
"string `\"foo\"` and play the first matching sample at half speed:"
msgstr ""
"We kunnen bijvoorbeeld alle samples filteren in een map die bevat de tekenreek"
"s `\"foo\"` bevat en de eerste overeenkomende sample spelen op halve snelheid:"

#: 03.7-Sample-Packs.md:199
#, no-wrap
msgid "sample \"/path/to/samples\", \"foo\", rate: 0.5"
msgstr "sample \"/pad/naar/samples\", \"foo\", rate: 0.5"

#: 03.7-Sample-Packs.md:203
msgid ""
"See the help for `sample` for many detailed usage examples. Note that the orde"
"ring of the filters is honoured."
msgstr ""
"Zie hulp voor `sample` voor vele gedetailleerde gebruiksvoorbeelden. Merk op d"
"at de volgorde van de filters geëerd wordt."

#: 03.7-Sample-Packs.md:206
msgid "Composites"
msgstr "Mengsels"

#: 03.7-Sample-Packs.md:208
msgid ""
"Finally, you may use lists wherever you may place a source or filter. The list"
" will be automatically flattened and the contents will be treated as regular s"
"ources and filters. Therefore the following calls to `sample` are semantically"
" equivalent:"
msgstr ""
"En tot slot, je mag lijsten gebruiken waar ook je een bron of filter kan plaat"
"sen. De lijst zal automatisch afgevlakt worden en hun inhoud zal als reguliere"
" bronnen en filters behandeld worden. Daarom zijn de volgende aanroepen naar `"
"sample`, semantisch equivalent:"

#: 03.7-Sample-Packs.md:213
#, no-wrap
msgid ""
"sample \"/path/to/dir\", \"100\", \"C#\"\n"
"sample [\"/path/to/dir\", \"100\", \"C#\"]\n"
"sample \"/path/to/dir\", [\"100\", \"C#\"]\n"
"sample [\"/path/to/dir\", [\"100\", [\"C#\"]]]"
msgstr ""
"sample \"/pad/naar/map\", \"100\", \"C#\"\n"
"sample [\"/pad/naar/map\", \"100\", \"C#\"]\n"
"sample \"/pad/naar/map\", [\"100\", \"C#\"]\n"
"sample [\"/pad/naar/map\", [\"100\", [\"C#\"]]]"

#: 03.7-Sample-Packs.md:220
msgid "Wrapping Up"
msgstr "Rond Wikkelen"

#: 03.7-Sample-Packs.md:222
msgid ""
"This was an advanced section for people that need real power to manipulate and"
" use sample packs. If most of this section didn't make too much sense, don't w"
"orry. It's likely you don't need any of this functionality just yet. However, "
"you'll know when you do need it and you can come back and re-read this when yo"
"u start working with large directories of samples."
msgstr ""
"Dit was een geavanceerd gedeelte voor mensen die veel kracht om sample packs t"
"e manipuleren en gebruiken nodig hebben. Moest het meeste van dit deel vraagte"
"kens oproepen, geen nood. Waarschijnlijk hebt u dan deze functionaliteit nu no"
"g niet echt nodig. Je zal wel merken wanneer je er aan toe bent om dan terug t"
"e keren naar dit gedeelte om met grote sample bestanden te gaan werken."

#: 04-Randomisation.md:1
msgid "4 Randomisation"
msgstr "4 Randomiseren"

#: 04-Randomisation.md:3
msgid "Randomisation"
msgstr "Randomiseren"

#: 04-Randomisation.md:5
msgid ""
"A great way to add some interest into your music is using some random numbers."
" Sonic Pi has some great functionality for adding randomness to your music, bu"
"t before we start we need to learn a shocking truth: in Sonic Pi *random is no"
"t truly random*. What on earth does this mean? Well, let's see."
msgstr ""
"Een geweldige manier om jouw muziek interessant te maken is het gebruik van wi"
"llekeurige getallen. Sonic Pi heeft een goede functionaliteit om willekeurighe"
"id in jouw muziek toe te voegen, maar eerst moeten we naakte waarheid onder og"
"en zien: in Sonic Pi is *random geen echte random*. Wat heeft dit nu weer te b"
"etekenen? Laat ons eens kijken."

#: 04-Randomisation.md:11
msgid "Repeatability"
msgstr "Herhaalbaarheid"

#: 04-Randomisation.md:13
msgid ""
"A really useful random function is `rrand` which will give you a random value "
"between two numbers - a *min* and a *max*. (`rrand` is short for ranged random"
"). Let's try playing a random note:"
msgstr ""
"Een heel nuttige willekeurige functie is 'rrand', welke je een willekeurige wa"
"arde tussen twee nummers geeft - een *min* en *max*. ('rrand' is kort voor ran"
"ged random (willekeurigen binnen een bepaald bereik)). Laten we proberen een w"
"illekeurige opmerking te spelen:"

#: 04-Randomisation.md:17
#, no-wrap
msgid "play rrand(50, 95)"
msgstr "play rrand(50, 95)"

#: 04-Randomisation.md:21
msgid ""
"Ooh, it played a random note. It played note `83.7527`. A nice random note bet"
"ween 50 and 95. Woah, wait, did I just predict the exact random note you got t"
"oo? Something fishy is going on here. Try running the code again. What? It cho"
"se `83.7527` again? That can't be random!"
msgstr ""
"Ooh het speelt een willekeurige noot. Het speelde de noot `83.7527`. Een mooie"
" willekeurige noot tussen 50 en 95. Hu, heb ik nu net de willekeurige noot die"
" jij ook had exact voorspeld? Hier is iets verdacht gaande. Probeer de code nu"
" nog eens opnieuw uit te voeren. Wat?? Het koos `83.7527` opnieuw? Niet echt r"
"andom dus!"

#: 04-Randomisation.md:26
msgid ""
"The answer is that it is not truly random, it's pseudo-random. Sonic Pi will g"
"ive you random-like numbers in a repeatable manner. This is very useful for en"
"suring that the music you create on your machine sounds identical on everybody"
" else's machine - even if you use some randomness in your composition."
msgstr ""
"Het antwoord is, dat deze niet echt random is, maar pseudo-random. Sonic Pi za"
"l jou random-achtige cijfers geven op een repetitieve manier. Dit is heel nutt"
"ig om ervoor te zorgen dat jouw muziek,gemaakt op jou toestel, hetzelfde klink"
"t op iemand anders toestel, ook al heb je de functie van randomiseren gebruikt"
" in je compositie."

#: 04-Randomisation.md:32
msgid ""
"Of course, in a given piece of music, if it 'randomly' chose `83.7527` every t"
"ime, then it wouldn't be very interesting. However, it doesn't. Try the follow"
"ing:"
msgstr ""
"Natuurlijk, bij een zeker stukje muziek, moest het elke keer 'random' `83.7527"
"` kiezen, dan zou het niet interessant meer zijn. Maar dat doet het niet. Prob"
"eer het volgende:"

#: 04-Randomisation.md:36
#, no-wrap
msgid ""
"loop do\n"
"  play rrand(50, 95)\n"
"  sleep 0.5\n"
"end "
msgstr ""
"loop do\n"
"  play rrand(50, 95)\n"
"  sleep 0.5\n"
"end "

#: 04-Randomisation.md:43
msgid ""
"Yes! It finally sounds random. Within a given *run* subsequent calls to random"
" functions will return random values. However, the next run will produce exact"
"ly the same sequence of random values and sound exactly the same. It's as if a"
"ll Sonic Pi code went back in time to exactly the same point every time the Ru"
"n button was pressed. It's the Groundhog Day of music synthesis!"
msgstr ""
"Ja, Eindelijk klinkt het random. Binnen een gegeven doorloop gaan de volgende "
"opvragingen naar random functies randum waarden weergeven. Bij de daar opvolge"
"nde doorloop gaan zij echter exact dezelfde sequentie van deze random waarden "
"spelen en dus net hetzelfde klinken. Alsof Sonic Pi terug in de tijd ging naar"
" exact hetselfde punt elke keer de afspeelknop werd ingedrukt. De \"Groundhog D"
"ay\" in de wereld van muziek synthese!"

#: 04-Randomisation.md:50
msgid "Haunted Bells"
msgstr "\"Haunted Bells\""

#: 04-Randomisation.md:52
msgid ""
"A lovely illustration of randomisation in action is the haunted bells example "
"which loops the `:perc_bell` sample with a random rate and sleep time between "
"bell sounds:"
msgstr ""
"Een mooie illustratie van randomiseren in actie is het voorbeeld \"haunted bell"
"'s\" die de `:perc_bell`' sample laat \"loop-en\" met een willekeurige rate en sl"
"eep tijd tussen de klokkengeluiden:"

#: 04-Randomisation.md:56
#, no-wrap
#, fuzzy
msgid ""
"loop do\n"
"  sample :perc_bell, rate: rrand(0.125, 1.5)\n"
"  sleep rrand(0.2, 2)\n"
"end"
msgstr ""
"loop do\n"
"  sample :perc_bell, rate: (rrand 0.125, 1.5)\n"
"  sleep rrand(0.2, 2)\n"
"end"

#: 04-Randomisation.md:63
msgid "Random cutoff"
msgstr "Random cutoff"

#: 04-Randomisation.md:65
msgid ""
"Another fun example of randomisation is to modify the cutoff of a synth random"
"ly. A great synth to try this out on is the `:tb303` emulator:"
msgstr ""
"Een ander leuk voorbeeld van randomiseren is het willekeurig wijzigen van de c"
"utoff van een synth. Een geweldige synth om dit op uit te proberen is de ': tb"
"303' emulator:"

#: 04-Randomisation.md:69
#, no-wrap
msgid ""
"use_synth :tb303\n"
"loop do\n"
"  play 50, release: 0.1, cutoff: rrand(60, 120)\n"
"  sleep 0.125\n"
"end"
msgstr ""
"use_synth :tb303\n"
"loop do\n"
"  play 50, release: 0.1, cutoff: rrand(60, 120)\n"
"  sleep 0.125\n"
"end"

#: 04-Randomisation.md:78
msgid "Random seeds"
msgstr "Random \"seeds\""

#: 04-Randomisation.md:80
msgid ""
"So, what if you don't like this particular sequence of random numbers Sonic Pi"
" provides? Well it's totally possible to choose a different starting point via"
" `use_random_seed`. The default seed happens to be 0, so choose a different se"
"ed for a different random experience!"
msgstr ""
"Dus, wat als deze bijzondere reeks willekeurige getallen die  Sonic Pi biedt  "
"je niet bevalt ? Nou is het volledig mogelijk om een ander uitgangspunt  te ki"
"ezen via 'use_random_seed'. De standaard seed instelling is 0, kies dus een an"
"dere seed voor een andere  ervaring in randomisering!"

#: 04-Randomisation.md:85
msgid "Consider the following:"
msgstr "Houd rekening met het volgende:"

#: 04-Randomisation.md:87
#, no-wrap
msgid ""
"5.times do\n"
"  play rrand(50, 100)\n"
"  sleep 0.5\n"
"end"
msgstr ""
"5.times do\n"
"  play rrand(50, 100)\n"
"  sleep 0.5\n"
"end"

#: 04-Randomisation.md:94
msgid ""
"Every time you run this code, you'll hear the same sequence of 5 notes. To get"
" a different sequence simply change the seed:"
msgstr ""
"Telkens wanneer u deze code uitvoert, zult u dezelfde sequentie van 5 noten ho"
"ren. Voor een andere volgorde verander gewoon de seed:"

#: 04-Randomisation.md:97
#, no-wrap
msgid ""
"use_random_seed 40\n"
"5.times do\n"
"  play rrand(50, 100)\n"
"  sleep 0.5\n"
"end"
msgstr ""
"use_random_seed 40\n"
"5.times do\n"
"  play rrand(50, 100)\n"
"  sleep 0.5\n"
"end"

#: 04-Randomisation.md:105
msgid ""
"This will produce a different sequence of 5 notes. By changing the seed and li"
"stening to the results you can find something that you like - and when you sha"
"re it with others, they will hear exactly what you heard too."
msgstr ""
"Dit zal een andere sequentie van 5 noten produceren. Door het veranderen van d"
"e seed en door het beluisteren van de resultaten vindt u  wel iets dat u goed "
"vind - en wanneer u deze met anderen deelt, horen zij precies wat u ook hebt g"
"ehoord."

#: 04-Randomisation.md:110
msgid "Let's have a look at some other useful random functions."
msgstr "Laten we eens kijken naar enkele andere nuttige randomisering functies."

#: 04-Randomisation.md:113
msgid "choose"
msgstr "choose"

#: 04-Randomisation.md:115
msgid ""
"A very common thing to do is to choose an item randomly from a list of known i"
"tems. For example, I may want to play one note from the following: 60, 65 or 7"
"2. I can achieve this with `choose` which lets me choose an item from a list. "
"First, I need to put my numbers in a list which is done by wrapping them in sq"
"uare brackets and separating them with commas: `[60, 65, 72]`. Next I just nee"
"d to pass them to `choose`:"
msgstr ""
"Een zeer gebruikelijk actie zou zijn, random te kiezen uit een lijst van geken"
"de items. Bijvoorbeeld, ik zou één van de volgende noten willen spelen: 60, 65"
" of 72. Ik kan dit bewerkstelligen met `choose` die mij een item uit een lijst"
" laat kiezen. Eerst moet ik mijn getallen in een lijst zetten, hetgeen ik kan "
"doen door deze in rechthoekige haakjes te plaatsen en door middel van komma's "
"te scheiden: : `[60, 65, 72]. Vervolgens moet ik deze doorgeven aan  `choose`:"

#: 04-Randomisation.md:122
#, no-wrap
msgid "choose([60, 65, 72])"
msgstr "choose([60, 65, 72])"

#: 04-Randomisation.md:126
msgid "Let's hear what that sounds like:"
msgstr "Laten we eens horen hoe dat klinkt:"

#: 04-Randomisation.md:128
#, no-wrap
msgid ""
"loop do\n"
"  play choose([60, 65, 72])\n"
"  sleep 1\n"
"end"
msgstr ""
"loop do\n"
"  play choose([60, 65, 72])\n"
"  sleep 1\n"
"end"

#: 04-Randomisation.md:135
msgid "rrand"
msgstr "rrand"

#: 04-Randomisation.md:137
msgid ""
"We've already seen `rrand`, but let's run over it again. It returns a random n"
"umber between two values exclusively. That means it will never return either t"
"he top or bottom number - always something in between the two. The number will"
" always be a float - meaning it's not a whole number but a fraction of a numbe"
"r. Examples of floats returned by `rrand(20, 110)`:"
msgstr ""
"We hebben `rrand` al gezien, maar laat ons deze nog even overlopen. Deze repro"
"duceert een willekeurig getal tussen twee getallen die hierbij exclusief zijn."
" Dit wil zeggen dat deze getallen,noch het onderste, noch het bovenrste zal we"
"ergeven worden, maar altijd een getal tussen die twee. Het getal zal altijd ee"
"n niet-geheel getal zijn- wat betekend dat dit nooit een geheel getal zal zijn"
", maar een breuk van een getal. Voorbeelden van niet-gehele getallen die worde"
"n gereproduceerd door `rrand(20, 110)`:"

#: 04-Randomisation.md:148
msgid "rrand_i"
msgstr "rrand_i"

#: 04-Randomisation.md:150
msgid ""
"Occasionally you'll want a whole random number, not a float. This is where `rr"
"and_i` comes to the rescue. It works similarly to `rrand` except it may return"
" the min and max values as potential random values (which means it's inclusive"
" rather than exclusive of the range). Examples of numbers returned by `rrand_i"
"(20, 110)` are:"
msgstr ""
"Soms zal je een geheel getal, willen doen uitkomen in plaats van een niet-gehe"
"el getal in de ranomisering. Hier komt  `rrand_i` redding brengen. Dit werk he"
"t zelfde als `rrand` behalve dat deze hier de min en max waarden als potentiël"
"e random waarden laat uitkomen (inclusief ipv. exclusief bereik). Voorbeelden "
"van getallen die gereproduceerd kunnen worden door `rrand` zijn:"

#: 04-Randomisation.md:160
msgid "rand"
msgstr "rand"

#: 04-Randomisation.md:162
msgid ""
"This will return a random float between 0 (inclusive) and the max value you sp"
"ecify (exclusive). By default it will return a value between 0 and one. It's t"
"herefore useful for choosing random `amp:` values:"
msgstr ""
"Dit geeft een willekeurig niet-geheel getal tussen 0 (inbegrepen) en de max wa"
"arde die u opgeeft (exclusieve). Standaard wordt een waarde tussen 0 en 1 gere"
"tourneerd. Daarom is deze nuttig voor het kiezen van willekeurige ' amp:' waar"
"den:"

#: 04-Randomisation.md:167
#, no-wrap
msgid ""
"loop do\n"
"  play 60, amp: rand\n"
"  sleep 0.25\n"
"end"
msgstr ""
"loop do\n"
"  play 60, amp: rand\n"
"  sleep 0.25\n"
"end"

#: 04-Randomisation.md:174
msgid "rand_i"
msgstr "rand_i"

#: 04-Randomisation.md:176
msgid ""
"Similar to the relationship between `rrand_i` and `rrand`, `rand_i` will retur"
"n a random whole number between 0 and the max value you specify."
msgstr ""
"Vergelijkbaar met de relatie tussen 'rrand_i' en 'rrand', 'rand_i' geeft een w"
"illekeurig geheel getal tussen 0 en de max waarde die u opgeeft."

#: 04-Randomisation.md:179
msgid "dice"
msgstr "dice (teerling)"

#: 04-Randomisation.md:181
msgid ""
"Sometimes you want to emulate a dice throw - this is a special case of `rrand_"
"i` where the lower value is always 1. A call to `dice` requires you to specify"
" the number of sides on the dice. A standard dice has 6 sides, so `dice(6)` wi"
"ll act very similarly - returning values of either 1, 2, 3, 4, 5, or 6. Howeve"
"r, just like fantasy role-play games, you might find value in a 4 sided dice, "
"or a 12 sided dice, or a 20 sided dice - perhaps even a 120 sided dice!"
msgstr ""
"Soms wil je een gooi van een dobbelstenen nabootsen - dit is een speciaal geva"
"l van 'rrand_i' waar de laagste waarde altijd 1 is . Een oproep naar de 'dobbe"
"lstenen' moet je het aantal zijden op de dobbelsteen opgeven. Een standaard do"
"bbelsteen heeft 6 zijden, en zal 'dice(6)' zich ook zo gaan gedragen - en waar"
"den van ofwel 1, 2, 3, 4, 5 of 6 reproduceren.Maar misschien wil je wel, net z"
"oals in een fantasy rollenspel , een 4-zijdige dobbelstenen, of een 12 zijdige"
" dobbelstenen, of een 20 zijdige dobbelsteen - misschien zelfs een 120 zijdige"
" dobbelsteen!"

#: 04-Randomisation.md:189
msgid "one_in"
msgstr "one_in"

#: 04-Randomisation.md:191
msgid ""
"Finally you may wish to emulate throwing the top score of a dice such as a 6 i"
"n a standard dice. `one_in` therefore returns true with a probability of one i"
"n the number of sides on the dice. Therefore `one_in(6)` will return true with"
" a probability of 1 in 6 or false otherwise. True and false values are very us"
"eful for `if` statements which we will cover in a subsequent section of this t"
"utorial."
msgstr ""
"Tot slot wil je ook de gooi naar het hoogste getal nabootsen, zoals onze 6 op "
"een normale dobbelsteen. `one_in` zal daarom de waarde true met een kans van é"
"én op het aantal zijden op de dobbelsteen reproduceren. Daarom geeft `one_in(6"
")` true met een waarschijnlijkheid van 1 in 6 terug, en  anders false . True e"
"n False waarden zijn zeer nuttig voor `if` verklaringen die wij in een latere "
"sectie van dit leerprogramma zullen behandelen."

#: 04-Randomisation.md:198
msgid "Now, go and jumble up your code with some randomness!"
msgstr "Maak maar even een wirwar aan Random-heid!"

#: 05-Programming-Structures.md:1
msgid "5 Programming Structures"
msgstr "5 Programmeerstructuren"

#: 05-Programming-Structures.md:3
msgid "Programming Structures"
msgstr "Programmeerstructuren"

#: 05-Programming-Structures.md:5
msgid ""
"Now that you've learned the basics of creating sounds with `play` and `sample`"
" and creating simple melodies and rhythms by `sleep`ing between sounds, you mi"
"ght be wondering what else the world of code can offer you..."
msgstr ""
"Nu dat je de basis hebt geleerd om geluiden met 'play' en 'sample' te creëren "
", en eenvoudige melodieën en ritmes, door tussen de klanken  `sleep`  te gebru"
"iken, kan je je nu gaan afvragen wat de wereld van code je nog heeft te bieden"
"..."

#: 05-Programming-Structures.md:10
msgid ""
"Well, you're in for an exciting treat! It turns out that basic programming str"
"uctures such as looping, conditionals, functions and threads give you amazingl"
"y powerful tools to express your musical ideas."
msgstr ""
"Nou, sta je voor een spannende traktatie! Het blijkt dat fundamentele programm"
"eerstructuren zoals loops, conditionals, functies en threads jou  ongelooflijk"
" krachtige tools geven om jou muzikale ideeën uit te drukken."

#: 05-Programming-Structures.md:14
msgid "Let's get stuck in with the basics..."
msgstr "We bijten ons vast in de basisbeginselen hiervan..."

#: 05.1-Blocks.md:1
msgid "5.1 Blocks"
msgstr "5.1 Blocks"

#: 05.1-Blocks.md:3
msgid "Blocks"
msgstr "Blocks"

#: 05.1-Blocks.md:5
msgid ""
"A structure you'll see a lot in Sonic Pi is the block. Blocks allow us to do u"
"seful things with large chunks of code. For example, with synth and sample par"
"ameters we were able to change something that happened on a single line. Howev"
"er, sometimes we want to do something meaningful to a number of lines of code."
" For example, we may wish to loop it, to add reverb to it, to only run it 1 ti"
"me out of 5, etc. Consider the following code:"
msgstr ""
"Een structuur die je vaak zal terugvinden in Sonic Pi is de blok-structuur. De"
"ze \"Blocks\" kunnen ervoor zorgen dat we heel handig met grote happen code gaan"
" kunnen omspringen. Met de Synth en sample parameters konden we deze al op een"
" enkele lijn gaan veranderen. Soms willen we echter op een slimme manier versc"
"hillende lijnen kunnen aanspreken om hun parameters te gaan veranderen. Bijvoo"
"rbeeld, als we die willen loop-en, een reverb toe willen voegen, deze 1 van de"
" vijf keer willen laten afspelen etc... Kijk dan even naar deze code:"

#: 05.1-Blocks.md:13
#, no-wrap
msgid ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_plip\n"
"sleep 0.5\n"
"play 62"
msgstr ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_plip\n"
"sleep 0.5\n"
"play 62"

#: 05.1-Blocks.md:21
msgid ""
"To do something with a chunk of code, we need to tell Sonic Pi where the code "
"block *starts* and where it *ends*. We use `do` for start and `end` for end. F"
"or example:"
msgstr ""
"Om iets met een stuk code-reeksen te laten gebeuren, moeten we Sonic Pi vertel"
"len waar die blok van code moet *starten* en waar deze *eindigt*. Hiervoor geb"
"ruiken we `do` om te starten en `end` om te eindigen. Bijvoorbeeld:"

#: 05.1-Blocks.md:25
#, no-wrap
msgid ""
"do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"

#: 05.1-Blocks.md:35
msgid ""
"However, this isn't yet complete and won't work (try it and you'll get an erro"
"r) as we haven't told Sonic Pi what we want to do with this *do/end block*. We"
" tell Sonic Pi this by writing some special code before the `do`. We'll see a "
"number of these special pieces of code later on in this tutorial. For now, it'"
"s important to know that wrapping your code within `do` and `end` tells Sonic "
"Pi you wish to do something special with that chunk of code."
msgstr ""
"Maar... we zijn er nog niet helemaal (als je dit zou uitproberen krijg je een "
"foutmelding) want we hebben Sonic Pi nog niet verteld wat we willen doen met d"
"eze *do/end block*. Door een speciale code vóór de `do` te zetten kunnen we di"
"t duidelijk maken aan Sonic Pi. We zullen deze speciale stukjes code later in "
"deze handleiding bekijken. Het belangrijkste om weten nu, is dat als je je cod"
"e inpakt met deze `do` en `end` je hiermee iets speciaal kan aanvangen."

#: 05.2-Iteration-and-Loops.md:1
msgid "5.2 Iteration and Loops"
msgstr "5.2 Herhaling en Loops"

#: 05.2-Iteration-and-Loops.md:3
msgid "Iteration and Loops"
msgstr "Herhaling en Loops"

#: 05.2-Iteration-and-Loops.md:5
msgid ""
"So far we've spent a lot of time looking at the different sounds you can make "
"with `play` and `sample` blocks. We've also learned how to trigger these sound"
"s through time using `sleep`."
msgstr ""
"Tot nu toe hebben we al een heleboel tijd besteed aan de verschillende klanken"
" die we kunnen maken met de `play` en `sample` lijnen. We hebben ook geleerd d"
"eze met een zekere regelmaat te triggeren met behulp van `sleep`."

#: 05.2-Iteration-and-Loops.md:9
msgid ""
"As you've probably found out, there's a *lot* of fun you can have with these b"
"asic building blocks. However, a whole new dimension of fun opens up when you "
"start using the power of code to structure your music and compositions. In the"
" next few sections we'll explore some of these powerful new tools. First up is"
" iteration and loops."
msgstr ""
"Zoals je waarschijnlijk hebt ontdekt, je kan *veel* plezier beleven met deze b"
"asis bouwstenen. Er zal echter een nieuwe wereld voor je opengaan wanneer je d"
"e kracht van code gaat gebruiken om structuur te geven aan jouw muziek en comp"
"osities. In de volgende secties gaan we enkele van deze krachtige hulpmiddelen"
" verkennen. Vooraleerst zijn herhaling en loop aan de beurt."

#: 05.2-Iteration-and-Loops.md:15
msgid "Repetition"
msgstr "Repetitieve herhaling"

#: 05.2-Iteration-and-Loops.md:17
msgid ""
"Have you written some code you'd like to repeat a few times? For example, you "
"might have something like this:"
msgstr ""
"Heb je wat code geschreven dat je graag een paar keer wil herhalen? Bijvoorbee"
"ld, zoiets als deze::"

#: 05.2-Iteration-and-Loops.md:20
#, no-wrap
msgid ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25"
msgstr ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25"

#: 05.2-Iteration-and-Loops.md:29
msgid ""
"What if we wished to repeat this 3 times? Well, we could do something simple a"
"nd just copy and paste it three times:"
msgstr ""
"Wat als wij deze 3 keer willen herhalen? Nou simpel, we kunnen deze drie keer "
"kopiëren en plakken:"

#: 05.2-Iteration-and-Loops.md:32
#, no-wrap
msgid ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25"
msgstr ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25"

#: 05.2-Iteration-and-Loops.md:55
msgid ""
"Now that's a lot of code! What happens if you want to change the sample to `:e"
"lec_plip`? You're going to have to find all the places with the original `:ele"
"c_blup` and switch them over. More importantly, what if you wanted to repeat t"
"he original piece of code 50 times or 1000? Now that would be a lot of code, a"
"nd a lot of lines of code to alter if you wanted to make a change."
msgstr ""
"Dat is wel een heleboel code! Wat als je nu de sample `:elec_plip` wil verande"
"ren? Dan moet je de code helemaal afgaan en overal waar deze voorkomt vervange"
"n door de nieuwe sample. En, nog belangrijker, wat als ik de code 50 of 1000 k"
"eer wil herhalen? Dat zou een heleboel code zijn, en heel wat regels wijzigen "
"om een verandering te maken."

#: 05.2-Iteration-and-Loops.md:62
msgid "Iteration"
msgstr "Iteratie"

#: 05.2-Iteration-and-Loops.md:64
msgid ""
"In fact, repeating the code should be as easy as saying *do this three times*."
" Well, it pretty much is. Remember our old friend the code block? We can use i"
"t to mark the start and end of the code we'd like to repeat three times. We th"
"en use the special code `3.times`. So, instead of writing *do this three times"
"*, we write `3.times do` - that's not too hard. Just remember to write `end` a"
"t the end of the code you'd like to repeat:"
msgstr ""
"In feite zou het herhalen van code zo eenvoudig moeten zijn als zeggen *doe di"
"t drie keer*. Zo is het ook wel een beetje. Herinner je je onze oude vriend de"
" code block nog? We kunnen hem gebruiken om het start- en eindpunt, van de cod"
"e die we willen herhalen, aan te duiden. We gebruiken dan onze speciale code `"
"3.times`. In plaats van *doe dit drie keer*, schrijven we `3.times do`, eenvou"
"dig niet? Vergeet ook niet `end`op het einde van het te herhalen block te schr"
"ijven:"

#: 05.2-Iteration-and-Loops.md:72
#, no-wrap
msgid ""
"3.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_blup\n"
"  sleep 0.5\n"
"  play 62\n"
"  sleep 0.25\n"
"end"
msgstr ""
"3.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_blup\n"
"  sleep 0.5\n"
"  play 62\n"
"  sleep 0.25\n"
"end"

#: 05.2-Iteration-and-Loops.md:83
msgid ""
"Now isn't that much neater than cutting and pasting! We can use this to create"
" lots of nice repeating structures:"
msgstr ""
"Nu is dat niet veel netter dan knippen en plakken! We kunnen dit gebruiken om "
"allerlei leuke herhalende structuren te maken:"

#: 05.2-Iteration-and-Loops.md:86
#, no-wrap
msgid ""
"4.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"end\n"
"8.times do\n"
"  play 55, release: 0.2\n"
"  sleep 0.25\n"
"end\n"
"4.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"end"
msgstr ""
"4.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"end\n"
"8.times do\n"
"  play 55, release: 0.2\n"
"  sleep 0.25\n"
"end\n"
"4.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"end"

#: 05.2-Iteration-and-Loops.md:103
msgid "Nesting Iterations"
msgstr "Geneste Iteraties"

#: 05.2-Iteration-and-Loops.md:105
msgid ""
"We can put iterations inside other iterations to create interesting patterns. "
"For example:"
msgstr ""
"We kunnen iteraties binnen andere iteraties plaatsen om interessante patronen "
"te creëren. Bijvoorbeeld:"

#: 05.2-Iteration-and-Loops.md:108
#, no-wrap
msgid ""
"4.times do\n"
"  sample :drum_heavy_kick\n"
"  2.times do\n"
"    sample :elec_blip2, rate: 2\n"
"    sleep 0.25\n"
"  end\n"
"  sample :elec_snare\n"
"  4.times do\n"
"    sample :drum_tom_mid_soft\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"4.times do\n"
"  sample :drum_heavy_kick\n"
"  2.times do\n"
"    sample :elec_blip2, rate: 2\n"
"    sleep 0.25\n"
"  end\n"
"  sample :elec_snare\n"
"  4.times do\n"
"    sample :drum_tom_mid_soft\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: 05.2-Iteration-and-Loops.md:123
msgid "Looping"
msgstr "Loop-en"

#: 05.2-Iteration-and-Loops.md:125
msgid ""
"If you want something to repeat a lot of times, you might find yourself using "
"really large numbers such as `1000.times do`. In this case, you're probably be"
"tter off asking Sonic Pi to repeat forever (at least until you press the stop "
"button!). Let's loop the amen break forever:"
msgstr ""
"Als je iets lang wil laten herhalen, ga je je misschien op betrappen van grote"
" getallen te gebruiken zoals bv. `1000.times do`. In dat geval kan je Sonic Pi"
" misschien beter opdragen van deze oneindig veel keer te herhalen ( als je ten"
"minste niet op de stop-knop drukt,natuurlijk!) Laat ons de Amen Break eindeloo"
"s herhalen:"

#: 05.2-Iteration-and-Loops.md:130
#, no-wrap
msgid ""
"loop do\n"
"  sample :loop_amen\n"
"  sleep sample_duration :loop_amen\n"
"end"
msgstr ""
"loop do\n"
"  sample :loop_amen\n"
"  sleep sample_duration :loop_amen\n"
"end"

#: 05.2-Iteration-and-Loops.md:137
msgid ""
"The important thing to know about loops is that they act like black holes for "
"code. Once the code enters a loop it can never leave until you press stop - it"
" will just go round and round the loop forever. This means if you have code af"
"ter the loop you will *never* hear it. For example, the cymbal after this loop"
" will never play:"
msgstr ""
"Belangrijk om weten is dat loops zich kunnen gedragen als zwarte gaten in je c"
"ode. Eens de code in loop gaat, geraakt hij er niet meer uit tenzij je op stop"
" drukt - de code blijft in deze loop doordraaien. Dit betekent dan, als je cod"
"e hebt geschreven na de loop, je deze code *nooit* zal horen. In dit voorbeeld"
", zal de cymbaal na de loop nooit spelen:"

#: 05.2-Iteration-and-Loops.md:143
#, no-wrap
msgid ""
"loop do\n"
"  play 50\n"
"  sleep 1\n"
"end\n"
"sample :drum_cymbal_open"
msgstr ""
"loop do\n"
"  play 50\n"
"  sleep 1\n"
"end\n"
"sample :drum_cymbal_open"

#: 05.2-Iteration-and-Loops.md:152
msgid "Now, get structuring your code with iteration and loops!"
msgstr "Nu gaan we de code structureren met iteratie en loops!"

#: 05.3-Conditionals.md:1
msgid "5.3 Conditionals"
msgstr "5.3 Conditionelen"

#: 05.3-Conditionals.md:3
msgid "Conditionals"
msgstr "Conditionelen"

#: 05.3-Conditionals.md:5
msgid ""
"A common thing you'll likely find yourself wanting to do is to not only play a"
" random note (see the previous section on randomness) but also make a random d"
"ecision and based on the outcome run some code or some other code. For example"
", you might want to randomly play a drum or a cymbal. We can achieve this with"
" an `if` statement."
msgstr ""
"Eén van de dingen die je op een zeker moment zeker wil gaan doen is,dat je nie"
"t alleen willekeurige noten wil spelen (zie de voorgaande sectie hierover)  ma"
"ar ook een willekeurige (random) beslissing kunnen maken en gebaseerd op de ui"
"tkomst van andere uitgevoerde code of andere code. Zo wil je bijvoorbeeld een "
"drum of cimbaal willekeurig bespelen.  Dit kunnen we bereiken met de instructi"
"e 'als'."

#: 05.3-Conditionals.md:11
msgid "Flipping a Coin"
msgstr "Een muntje opgooien"

#: 05.3-Conditionals.md:13
msgid ""
"So, let's flip a coin: if it's heads, play a drum, if it's tails, play a cymba"
"l. Easy. We can emulate a coin flip with our `one_in` function (introduced in "
"the section on randomness) specifying a probability of 1 in 2: `one_in(2)`. We"
" can then use the result of this to decide between two pieces of code, the cod"
"e to play the drum and the code to play the cymbal:"
msgstr ""
"Laten we een muntje opgooien: Als het kop is, speel je een trommel, als het mu"
"nt is, speel je een cimbaal. Makkelijk. We kunnen kop of munt nabootsen met on"
"ze  `one_in` functie (voorgesteld in onze sectie over willekeurigheid) door ee"
"n waarschijnlijkheid in te bouwen van 1 op 2: 'one_in(2)'.  We kunnen het resu"
"ltaat,vervolgens gebruiken om te kunnen kiezen tussen twee stukken van de code"
", de code om de trommel te spelen en de code om de cimbaal  te spelen :"

#: 05.3-Conditionals.md:20
#, no-wrap
msgid ""
"loop do\n"
"  if one_in(2)\n"
"    sample :drum_heavy_kick\n"
"  else\n"
"    sample :drum_cymbal_closed\n"
"  end\n"
"  \n"
"  sleep 0.5\n"
"  \n"
"end"
msgstr ""
"loop do\n"
"  if one_in(2)\n"
"    sample :drum_heavy_kick\n"
"  else\n"
"    sample :drum_cymbal_closed\n"
"  end\n"
"  \n"
"  sleep 0.5\n"
"  \n"
"end"

#: 05.3-Conditionals.md:34
msgid "Notice that `if` statements have three parts:"
msgstr "Merk op dat 'if' verklaringen drie delen hebben:"

#: 05.3-Conditionals.md:36
msgid "The question to ask"
msgstr "De vraagstelling"

#: 05.3-Conditionals.md:37
msgid "The first choice of code to run (if the answer to the question is yes)"
msgstr "De eerste keuze van de uit te voeren code (als het antwoord op de vraag ja is)"

#: 05.3-Conditionals.md:38
msgid "The second choice of code to run (if the answer to the question is no)"
msgstr ""
"De tweede keuze van de uit te voeren code (als het antwoord op de vraag neen i"
"s)"

#: 05.3-Conditionals.md:40
msgid ""
"Typically in programming languages, the notion of yes is represented by the te"
"rm `true` and the notion of no is represented by the term `false`. So we need "
"to find a question that will give us a `true` or `false` answer which is exact"
"ly what `one_in` does."
msgstr ""
"Typisch in programmeertalen, wordt ja aangeduid door de term 'true' en neen do"
"or de term 'false'. Dus moeten we een vraag vinden die ons een `true` of `fals"
"e` antwoord geeft, dat is precies wat `one_in´ doet."

#: 05.3-Conditionals.md:45
msgid ""
"Notice how the first choice is wrapped between the `if` and the `else` and the"
" second choice is wrapped between the `else` and the `end`. Just like do/end b"
"locks you can put multiple lines of code in either place. For example:"
msgstr ""
"Merk op hoe de eerste keuze verpakt  is tussen `if` en `else` en de tweede keu"
"s verpakt tussen `else` en `end`. Net zoals bij een do/end blok kun je meerder"
"e coderegels in beide plaatsen zetten. Bijvoorbeeld:"

#: 05.3-Conditionals.md:50
#, no-wrap
msgid ""
"loop do\n"
"  if one_in(2)\n"
"    sample :drum_heavy_kick\n"
"    sleep 0.5\n"
"  else\n"
"    sample :drum_cymbal_closed\n"
"    sleep 0.25\n"
"  end\n"
"  \n"
"end"
msgstr ""
"loop do\n"
"  if one_in(2)\n"
"    sample :drum_heavy_kick\n"
"    sleep 0.5\n"
"  else\n"
"    sample :drum_cymbal_closed\n"
"    sleep 0.25\n"
"  end\n"
"  \n"
"end"

#: 05.3-Conditionals.md:64
msgid ""
"This time we're sleeping for a different amount of time depending on which cho"
"ice we make."
msgstr ""
"Dit keer hebben we verschillende rustijden afhankelijk van de keuze die wordt "
"gemaakt."

#: 05.3-Conditionals.md:68
msgid "Simple if"
msgstr "Gewoon if"

#: 05.3-Conditionals.md:70
msgid ""
"Sometimes you want to optionally execute just one line of code. This is possib"
"le by placing `if` and then the question at the end. For example:"
msgstr ""
"Soms wilt je optioneel slechts één regel code uitvoeren. Dit is mogelijk door "
"het plaatsen van `if` en vervolgens de vraag aan het einde. Bijvoorbeeld:"

#: 05.3-Conditionals.md:73
#, no-wrap
msgid ""
"use_synth :dsaw\n"
"loop do\n"
"  play 50, amp: 0.3, release: 2\n"
"  play 53, amp: 0.3, release: 2 if one_in(2)\n"
"  play 57, amp: 0.3, release: 2 if one_in(3)\n"
"  play 60, amp: 0.3, release: 2 if one_in(4)\n"
"  sleep 1.5\n"
"end"
msgstr ""
"use_synth :dsaw\n"
"loop do\n"
"  play 50, amp: 0.3, release: 2\n"
"  play 53, amp: 0.3, release: 2 if one_in(2)\n"
"  play 57, amp: 0.3, release: 2 if one_in(3)\n"
"  play 60, amp: 0.3, release: 2 if one_in(4)\n"
"  sleep 1.5\n"
"end"

#: 05.3-Conditionals.md:85
msgid ""
"This will play chords of different numbers with the chance of each note playin"
"g having a different probability."
msgstr ""
"Dit zal akoorden met andere getallen, bij iedere gespeelde noot, de kans op ee"
"n verschillende mogelijkheid spelen."

#: 05.4-Threads.md:1
msgid "5.4 Threads"
msgstr "5.4 Threads"

#: 05.4-Threads.md:3
msgid "Threads"
msgstr "Threads"

#: 05.4-Threads.md:5
msgid ""
"So you've made your killer bassline and a phat beat. How do you play them at t"
"he same time? One solution is to weave them together manually - play some bass"
", then a bit of drums, then more bass... However, the timing soon gets hard to"
" think about, especially when you start weaving in more elements."
msgstr ""
"Dus je hebt je fatale baslijn en een vette beat. Hoe speel je ze op hetzelfde "
"moment? Een oplossing is deze handmatig verweven- een beetje bas , dan wat dru"
"ms, wat meer bas... Lang gaat het niet duren eer je je de timing moeilijk kan "
"voorstellen, zeker als je nog meer elementen hierin wil verweven."

#: 05.4-Threads.md:11
msgid ""
"What if Sonic Pi could weave things for you automatically? Well, it can, and y"
"ou do it with a special thing called a *thread*."
msgstr ""
"Wat als Sonic Pi deze automatisch kan verweven voor jou? Nou, het kan, en je h"
"et doet dat met wat heet een *thread*."

#: 05.4-Threads.md:14
msgid "Infinite Loops"
msgstr "Oneindige Loops"

#: 05.4-Threads.md:16
msgid ""
"To keep this example simple, you'll have to imagine that this is a phat beat a"
"nd a killer bassline:"
msgstr ""
"Om het voorbeeld eenvoudig te houden, moet je je voorstellen dat dit een waanz"
"innige baslijn is en een vette beat:"

#: 05.4-Threads.md:19
#, no-wrap
msgid ""
"loop do\n"
"  sample :drum_heavy_kick\n"
"  sleep 1\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end"
msgstr ""
"loop do\n"
"  sample :drum_heavy_kick\n"
"  sleep 1\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end"

#: 05.4-Threads.md:32
msgid ""
"As we've discussed previously, loops are like *black holes* for the program. O"
"nce you enter a loop you can never exit from it until you hit stop. How do we "
"play both loops at the same time? We have to tell Sonic Pi that we want to sta"
"rt something at the same time as the rest of the code. This is where threads c"
"ome to the rescue."
msgstr ""
"Zoals we reeds eerder bespraken, zijn loops zoals *zwarte gaten* voor het prog"
"ramma. Zodra je in loop bent geraakt, kan je deze niet verlaten totdat u op st"
"op hebt gedrukt. Hoe spelen we dan deze beide loops op hetzelfde moment? We mo"
"eten Sonic Pi vertellen dat we iets op hetzelfde moment als de rest van de cod"
"e willen beginnen. Dit is waar de threads ons redding brengen."

#: 05.4-Threads.md:38
msgid "Threads to the Rescue"
msgstr "Threads bieden redding"

#: 05.4-Threads.md:40
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end"
msgstr ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end"

#: 05.4-Threads.md:55
msgid ""
"By wrapping the first loop in an `in_thread` do/end block we tell Sonic Pi to "
"run the contents of the do/end block at *exactly* the same time as the next st"
"atement after the do/end block (which happens to be the second loop). Try it a"
"nd you'll hear both the drums and the bassline weaved together!"
msgstr ""
"Door de eerste loop in een `in_thread` do/end block te plaatsen, vertellen we "
"Sonic Pi de inhoud van de do/end block uit te voeren op *exact* hetzelfde mome"
"nt als de volgende instructie na de do/end block (toevallig ook onze tweede lu"
"s). Probeer het en je zal de baslijn en de drums samen horen spelen!"

#: 05.4-Threads.md:61
msgid "Now, what if we wanted to add a synth on top. Something like:"
msgstr "Wat als we hieraan nog een synth willen toevoegen? Zoiets als:"

#: 05.4-Threads.md:63
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end\n"
"loop do\n"
"  use_synth :zawa\n"
"  play 52, release: 2.5, phase: 2, amp: 0.5\n"
"  sleep 2\n"
"end"
msgstr ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end\n"
"loop do\n"
"  use_synth :zawa\n"
"  play 52, release: 2.5, phase: 2, amp: 0.5\n"
"  sleep 2\n"
"end"

#: 05.4-Threads.md:84
msgid ""
"Now we have the same problem as before. The first loop is played at the same t"
"ime as the second loop due to the `in_thread`. However, *the third loop is nev"
"er reached*. We therefore need another thread:"
msgstr ""
"Nu hebben we hetzelfde probleem als hiervoor. De eerste loop wordt gespeeld op"
" hetzelfde moment als de tweede loop, door onze 'in_thread'. *De derde loop wo"
"rdt weer nooit bereikt*. Daarom hebben we een andere thread nodig:"

#: 05.4-Threads.md:88
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    use_synth :fm\n"
"    play 40, release: 0.2\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :zawa\n"
"  play 52, release: 2.5, phase: 2, amp: 0.5\n"
"  sleep 2\n"
"end"
msgstr ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    use_synth :fm\n"
"    play 40, release: 0.2\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :zawa\n"
"  play 52, release: 2.5, phase: 2, amp: 0.5\n"
"  sleep 2\n"
"end"

#: 05.4-Threads.md:111
msgid "Runs as threads"
msgstr "Voert uit als threads"

#: 05.4-Threads.md:113
msgid ""
"What may surprise you is that when you press the Run button, you're actually c"
"reating a new thread for the code to run. This is why pressing it multiple tim"
"es will layer sounds over each other. As the runs themselves are threads, they"
" will automatically weave the sounds together for you."
msgstr ""
"Wat je mischien zal verbazen is dat iedere keer je op de afspeel-knop drukt je"
" eigenlijk een nieuwe thread aanmaakt voor de uitvoerende code. Vandaar dat, w"
"anneer je meerdere keren op afspelen drukt, de klanken op elkaar hoort opstape"
"len. Vermits deze een thread op zich is, verweeft hij deze code voor jou autom"
"atisch."

#: 05.4-Threads.md:119
msgid "Scope"
msgstr "Toepassingsgebied"

#: 05.4-Threads.md:121
msgid ""
"As you learn how to master Sonic Pi, you'll learn that threads are the most im"
"portant building blocks for your music. One of the important jobs they have is"
" to isolate the notion of *current settings* from other threads. What does thi"
"s mean? Well, when you switch synths using `use_synth` you're actually just sw"
"itching the synth in the *current thread* - no other thread will have their sy"
"nth switched. Let's see this in action:"
msgstr ""
"Als je Sonic Pi leert beheersen, ga je zien dat threads de belangrijkste bouws"
"tenen voor jouw muziek zullen zijn. Eén van de belangrijkste taak die zij hebb"
"en is het isoleren van *de huidige staat* van andere threads. Wat betekend dit"
"? Wel, wanneer je van synth overschakeld door het gebruik van `use_synth` scha"
"kel je van synth in *de huidige thread* - geen enkele andere thread zal van sy"
"nth veranderen. Laten we dit in actie zien:"

#: 05.4-Threads.md:129
#, no-wrap
msgid ""
"play 50\n"
"sleep 1\n"
"in_thread do\n"
"  use_synth :tb303\n"
"  play 50\n"
"end\n"
"sleep 1\n"
"play 50"
msgstr ""
"play 50\n"
"sleep 1\n"
"in_thread do\n"
"  use_synth :tb303\n"
"  play 50\n"
"end\n"
"sleep 1\n"
"play 50"

#: 05.4-Threads.md:142
msgid ""
"Notice how the middle sound was different to the others? The `use_synth` state"
"ment only affected the thread it was in and not the outer main run thread."
msgstr ""
"Merk je op dat de middelste klank anders is dan de andere? De `use_synth` decl"
"aratie zal enkel invloed hebben op de thread waarin deze zich bevind en niet o"
"p de threads daarbuiten."

#: 05.4-Threads.md:146
msgid "Inheritance"
msgstr "Erfenis"

#: 05.4-Threads.md:148
msgid ""
"When you create a new thread with `in_thread`, the new thread will automatical"
"ly inherit all of the current settings from the current thread. Let's see that"
":"
msgstr ""
"Wanneer je een nieuwe thread met `in_thread` creëert, zal de nieuwe thread de "
"instellingen van de huidige thread overnemen. Laten we dit even bekijken :"

#: 05.4-Threads.md:152
#, no-wrap
msgid ""
"use_synth :tb303\n"
"play 50\n"
"sleep 1\n"
"in_thread do\n"
"  play 55\n"
"end"
msgstr ""
"use_synth :tb303\n"
"play 50\n"
"sleep 1\n"
"in_thread do\n"
"  play 55\n"
"end"

#: 05.4-Threads.md:162
msgid ""
"Notice how the second note is played with the `:tb303` synth even though it wa"
"s played from a separate thread? Any of the settings modified with the various"
" `use_*` functions will behave in the same way."
msgstr ""
"Merk je op hoe de tweede noot met de ': tb303' synth wordt gespeeld, hoewel he"
"t door een aparte thread werd aangestuurd? Elk van de met verschillende `use_*"
"`  functies gewijzigde instellingen, zullen zich op dezelfde manier gaan gedra"
"gen."

#: 05.4-Threads.md:166
msgid ""
"When threads are created, they inherit all the settings from their parent but "
"they don't share any changes back."
msgstr ""
"Wannneer threads worden gecreëerd, erven zij alle instellingen over van bovenl"
"iggende (parent) maar zij delen geen veranderingen aan hen terug."

#: 05.4-Threads.md:169
msgid "Naming Threads"
msgstr "Naamgeving aan Threads"

#: 05.4-Threads.md:171
msgid "Finally, we can give our threads names:"
msgstr "Ook nog kunnen wij namen geven aan threads:"

#: 05.4-Threads.md:173
#, no-wrap
msgid ""
"in_thread(name: :bass) do\n"
"  loop do\n"
"    use_synth :prophet\n"
"    play chord(:e2, :m7).choose, release: 0.6\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"in_thread(name: :drums) do\n"
"  loop do\n"
"    sample :elec_snare\n"
"    sleep 1\n"
"  end\n"
"end"
msgstr ""
"in_thread(name: :bass) do\n"
"  loop do\n"
"    use_synth :prophet\n"
"    play chord(:e2, :m7).choose, release: 0.6\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"in_thread(name: :drums) do\n"
"  loop do\n"
"    sample :elec_snare\n"
"    sleep 1\n"
"  end\n"
"end"

#: 05.4-Threads.md:190
msgid ""
"Look at the log pane when you run this code. See how the log reports the name "
"of the thread with the message?"
msgstr ""
"Kijk naar het log venster wanneer u deze code uitvoert. Zie je hoe het logboek"
" de naam rapporteert van de thread met een bericht?"

#: 05.4-Threads.md:193
#, no-wrap
msgid ""
"[Run 36, Time 4.0, Thread :bass]\n"
" |- synth :prophet, {release: 0.6, note: 47}"
msgstr ""
"[Run 36, Time 4.0, Thread :bass]\n"
" |- synth :prophet, {release: 0.6, note: 47}"

#: 05.4-Threads.md:198
msgid "Only One Thread per Name Allowed"
msgstr "Slechts één thread per naam toegestaan"

#: 05.4-Threads.md:200
msgid ""
"One last thing to know about named threads is that only one thread of a given "
"name may be running at the same time. Let's explore this. Consider the followi"
"ng code:"
msgstr ""
"Wat je nog moet weten over benoemde threads is dat slechts één thread met een "
"bepaalde naam tegelijkertijd kan worden uitgevoerd. Laten we dit onderzoeken m"
"et de volgende code:"

#: 05.4-Threads.md:204
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    sample :loop_amen\n"
"    sleep sample_duration :loop_amen\n"
"  end\n"
"end"
msgstr ""
"in_thread do\n"
"  loop do\n"
"    sample :loop_amen\n"
"    sleep sample_duration :loop_amen\n"
"  end\n"
"end"

#: 05.4-Threads.md:213
msgid ""
"Go ahead and paste that into a buffer and press the Run button. Press it again"
" a couple of times. Listen to the cacophony of multiple amen breaks looping ou"
"t of time with each other. Ok, you can press Stop now."
msgstr ""
"Ga je gang en plak deze in een buffer en druk op de knop afspelen. Druk er opn"
"ieuw een paar keer. Luister naar de kakofonie van meerdere amen breaks in loop"
", uit de maat afspelen . OK, je mag nu op Stop drukken."

#: 05.4-Threads.md:217
msgid ""
"This is the behaviour we've seen again and again - if you press the Run button"
", sound layers on top of any existing sound. Therefore if you have a loop and "
"press the Run button three times, you'll have three layers of loops playing si"
"multaneously."
msgstr ""
"Dit soort gedrag hebben we al keer op keer gezien - dat als je de afspeelknop "
"aanklikt, geluidslagen op bestaande klanken gaan stapelen. Dus als je een loop"
" hebt en je klikt drie keer op afspelen zal je drie lagen loops tegelijkertijd"
" horen afspelen."

#: 05.4-Threads.md:222
msgid "However, with named threads it is different:"
msgstr "Met benoemde threads is dat echter anders:"

#: 05.4-Threads.md:224
#, no-wrap
msgid ""
"in_thread(name: :amen) do\n"
"  loop do\n"
"    sample :loop_amen\n"
"    sleep sample_duration :loop_amen\n"
"  end\n"
"end"
msgstr ""
"in_thread(name: :amen) do\n"
"  loop do\n"
"    sample :loop_amen\n"
"    sleep sample_duration :loop_amen\n"
"  end\n"
"end"

#: 05.4-Threads.md:233
msgid ""
"Try pressing the Run button multiple times with this code. You'll only ever he"
"ar one amen break loop. You'll also see this in the log:"
msgstr ""
"Probeer de afspeel-knop meerdere malen met deze code. Je zal nu één enkele ame"
"n break loop horen. Ook zie je dit in het logboek:"

#: 05.4-Threads.md:236
#, no-wrap
msgid "==> Skipping thread creation: thread with name :amen already exists."
msgstr "==> Skipping thread creation: thread with name :amen already exists."

#: 05.4-Threads.md:240
msgid ""
"Sonic Pi is telling you that a thread with the name `:amen` is already playing"
", so it's not creating another."
msgstr ""
"Sonic Pi vertelt je hier dat een thread met de naam `:amen` al aan het spelen "
"is , en gaat geen andere creëren."

#: 05.4-Threads.md:243
msgid ""
"This behaviour may not seem immediately useful to you now - but it will be ver"
"y handy when we start to live code..."
msgstr ""
"Dit gedrag lijkt misschien niet onmiddellijk bruikbaar voor je nu - maar het z"
"al erg handig worden wanneer we beginnen met het spelen van code live..."

#: 05.5-Functions.md:1
msgid "5.5 Functions"
msgstr "5.5 functies"

#: 05.5-Functions.md:3
msgid "Functions"
msgstr "Functies"

#: 05.5-Functions.md:5
msgid ""
"Once you start writing lots of code, you may wish to find a way to organise an"
"d structure things to make them tidier and easier to understand. Functions are"
" a very powerful way to do this. They give us the ability to give a name to a "
"bunch of code. Let's take a look."
msgstr ""
"Zodra u veel code begint te schrijven, kan je als je wil, een manier vinden om"
" dingen te gaan organiseren en structureren, om deze netter te maken en gemakk"
"elijker te begrijpen. Functies zijn een zeer krachtige manier om dit te doen. "
"Ze brengen ons de mogelijkheid om een naam te geven aan een bundel code. Laten"
" we een kijkje nemen."

#: 05.5-Functions.md:10
msgid "Defining functions"
msgstr "Functies definiëren"

#: 05.5-Functions.md:12
#, no-wrap
msgid ""
"define :foo do\n"
"  play 50\n"
"  sleep 1\n"
"  play 55\n"
"  sleep 2\n"
"end"
msgstr ""
"define :foo do\n"
"  play 50\n"
"  sleep 1\n"
"  play 55\n"
"  sleep 2\n"
"end"

#: 05.5-Functions.md:21
msgid ""
"Here, we've defined a new function called `foo`. We do this with our old frien"
"d the do/end block and the magic word `define` followed by the name we wish to"
" give to our function. We didn't have to call it `foo`, we could have called i"
"t anything we want such as `bar`, `baz` or ideally something meaningful to you"
" like `main_section` or `lead_riff`."
msgstr ""
"Hier hebben we een nieuwe functie genaamd `foo` gedefinieerd. We doen dit met "
"onze oude vriend het do/end blok en het magische woord `define`  gevolgd door "
"de naam die wij willen geven aan onze functie. We hoefde deze niet `foo` te no"
"emen, we konden deze om het even wat noemen zoals `fiets`, `bal`  of een ideal"
"e beschrijving  zoals `refrein_stuk` of `lead_riff`."

#: 05.5-Functions.md:27
msgid ""
"Remember to prepend a colon `:` to the name of your function when you define i"
"t."
msgstr ""
"Vergeet niet van een dubbele punt `:` bij de naam van je functie te voegen wan"
"neer je deze definieert."

#: 05.5-Functions.md:30
msgid "Calling functions"
msgstr "Functies aanroepen"

#: 05.5-Functions.md:32
msgid "Once we have defined our function we can call it by just writing its name:"
msgstr ""
"Eens we een functie hebben gedefinieerd kunnen we deze oproepen door gewoon zi"
"jn naam te schrijven:"

#: 05.5-Functions.md:35
#, no-wrap
msgid ""
"define :foo do\n"
"  play 50\n"
"  sleep 1\n"
"  play 55\n"
"  sleep 0.5\n"
"end\n"
"foo\n"
"sleep 1\n"
"2.times do\n"
"  foo\n"
"end"
msgstr ""
"define :foo do\n"
"  play 50\n"
"  sleep 1\n"
"  play 55\n"
"  sleep 0.5\n"
"end\n"
"foo\n"
"sleep 1\n"
"2.times do\n"
"  foo\n"
"end"

#: 05.5-Functions.md:52
msgid ""
"We can even use `foo` inside iteration blocks or anywhere we may have written "
"`play` or `sample`. This gives us a great way to express ourselves and to crea"
"te new meaningful words for use in our compositions."
msgstr ""
"We kunnen zelfs gebruik maken van 'foo' binnen iteratie blokken of overal waar"
" we `spelen` of `samplen` hebben geschreven. Dit schenkt ons een geweldige man"
"ier om onszelf te uiten en nieuwe zinvolle woorden te gebruiken in onze compos"
"ities."

#: 05.5-Functions.md:56
msgid "Functions are remembered across runs"
msgstr "Functies worden onthouden langsheen het uitvoer commando"

#: 05.5-Functions.md:58
msgid ""
"So far, every time you've pressed the Run button, Sonic Pi has started from a "
"completely blank slate. It knows nothing except for what is in the buffer. You"
" can't reference code in another buffer or another thread. However, functions "
"change that. When you define a function, Sonic Pi *remembers* it. Let's try it"
". Delete all the code in your buffer and replace it with:"
msgstr ""
"Tot nu toe was het zo, dat telkens als u de Afspeel-knop ingedrukte, Sonic Pi "
"met een schone lei startte. Het weet weet van niets tenzij van wat er in de bu"
"ffer zit. Je kan niet verwijzen naar code die in een andere buffer of een ande"
"re thread zit. Met functies veranderd dat. Wanneer je een functie definieert z"
"al Sonic Pi zich deze *herinneren*. Laten we dit eens proberen. Verwijder alle"
" code uit uw buffer en vervang het met:"

#: 05.5-Functions.md:65
#, no-wrap
msgid "foo"
msgstr "foo"

#: 05.5-Functions.md:69
msgid ""
"Press the Run button - and hear your function play. Where did the code go? How"
" did Sonic Pi know what to play? Sonic Pi just remembered your function - so e"
"ven after you deleted it from the buffer, it remembered what you had typed. Th"
"is behaviour only works with functions created using `define` (and `defonce`)."
msgstr ""
"Druk op de Afspeel-knop - en hoor je functie nu spelen. Zo zonder code? Hoe wi"
"st Sonic Pi wat het moest spelen? Sonic Pi herinnerde zich jouw functie - dus "
"zelfs nadat je deze hebt gewist uit de buffer, het herinnerde zich wat jij had"
" getypt. Dit gedrag werkt alleen met functies die zijn gemaakt met `define` (e"
"n `defonce`)."

#: 05.5-Functions.md:75
msgid "Parameterised functions"
msgstr "geparametreerde functies"

#: 05.5-Functions.md:77
msgid ""
"You might be interested in knowing that just like you can pass min and max val"
"ues to `rrand`, you can teach your functions to accept arguments. Let's take a"
" look:"
msgstr ""
"Interessant om weten ook is dat je net zoals je min als max waarden kan geven "
"aan `rrand`, kan je ook jouw functies argumenten laten accepteren. Laat ons da"
"t even bekijken:"

#: 05.5-Functions.md:81
#, no-wrap
msgid ""
"define :my_player do |n|\n"
"  play n\n"
"end\n"
"my_player 80\n"
"sleep 0.5\n"
"my_player 90"
msgstr ""
"define :my_player do |n|\n"
"  play n\n"
"end\n"
"my_player 80\n"
"sleep 0.5\n"
"my_player 90"

#: 05.5-Functions.md:91
msgid ""
"This isn't very exciting, but it illustrates the point. We've created our own "
"version of `play` called `my_player` which is parameterised."
msgstr ""
"Dit is niet erg spannend, maar het illustreert wel de zaak. We hebben onze eig"
"en versie van `play` genaamd 'my_player' die is geparametriseerd."

#: 05.5-Functions.md:94
msgid ""
"The parameters need to go after the `do` of the `define` do/end block, surroun"
"ded by vertical goalposts `|` and separated by commas `,`. You may use any wor"
"ds you want for the parameter names."
msgstr ""
"De parameters moeten na de `do` van het `define` do/end blok komen te staan, o"
"mringd door een sluisteken `|`en gescheiden door komma's `,`. Om deze paramete"
"rs te benoemen mag je elk woord gebruiken dat je maar wil."

#: 05.5-Functions.md:98
msgid ""
"The magic happens inside the `define` do/end block. You may use the parameter "
"names as if they were real values. In this example I'm playing note `n`. You c"
"an consider the parameters as a kind of promise that when the code runs, they "
"will be replaced with actual values. You do this by passing a parameter to the"
" function when you call it. I do this with `my_player 80` to play note 80. Ins"
"ide the function definition, `n` is now replaced with 80, so `play n` turns in"
"to `play 80`. When I call it again with `my_player 90`, `n` is now replaced wi"
"th 90, so `play n` turns into `play 90`."
msgstr ""
"Het zit 'h allemaal in de `define` do/end blok. Je kan de parameternamen gebru"
"iken zoals echte waarden. In dit voorbeeld speel ik de noot `n. Je kan deze be"
"schouwen als een soort toezegging, dat wanneer de code loopt, deze door de wer"
"kelijke waarden vervangen wordt wanneer je deze benoemd. Ik doe dit met `my_pl"
"ayer 80`. om noot 80 te spelen. Binnen de definitie van deze functie, is `n`nu"
" vervangen door 80, dus `play n` verandert in `play 80`. Wanneer ik deze verno"
"em met `my_player 90´, is `n` nu vervangen met 90, play `n`is veranderd in pla"
"y `90`."

#: 05.5-Functions.md:108
msgid "Let's see a more interesting example:"
msgstr "Laten we eens kijken naar een interessanter voorbeeld:"

#: 05.5-Functions.md:110
#, no-wrap
msgid ""
"define :chord_player do |root, repeats| \n"
"  repeats.times do\n"
"    play chord(root, :minor), release: 0.3\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"chord_player :e3, 2\n"
"sleep 0.5\n"
"chord_player :a3, 3\n"
"chord_player :g3, 4\n"
"sleep 0.5\n"
"chord_player :e3, 3"
msgstr ""
"define :chord_player do |root, repeats| \n"
"  repeats.times do\n"
"    play chord(root, :minor), release: 0.3\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"chord_player :e3, 2\n"
"sleep 0.5\n"
"chord_player :a3, 3\n"
"chord_player :g3, 4\n"
"sleep 0.5\n"
"chord_player :e3, 3"

#: 05.5-Functions.md:126
msgid ""
"Here I used `repeats` as if it was a number in the line `repeats.times do`. I "
"also used `root` as if it was a note name in my call to `play`."
msgstr ""
"Hier gebruikte ik `repeats` als een cijfer in de regel `repeats.times do`.Ik g"
"ebruikte `root` ook als naam van een noot in mijn `play` oproep."

#: 05.5-Functions.md:129
msgid ""
"See how we're able to write something very expressive and easy to read by movi"
"ng a lot of our logic into a function!"
msgstr ""
"Hierbij zien we dat we in staat zijn om iets zeer expressief, maar makkelijk l"
"eesbaar te schrijven door onze logica in een functie te steken!"

#: 05.6-Variables.md:1
msgid "5.6 Variables"
msgstr "5.6 Variabelen"

#: 05.6-Variables.md:3
msgid "Variables"
msgstr "Variabelen"

#: 05.6-Variables.md:5
msgid ""
"A useful thing to do in your code is to create names for things. Sonic Pi make"
"s this very easy: you write the name you wish to use, an equal sign (`=`), the"
"n the thing you want to remember:"
msgstr ""
"Het is handig om in jouw code is namen voor dingen te creëren. Sonic Pi maakt "
"jou dit zeer eenvoudig, je schrijft de naam die je wenst te gebruiken, een gel"
"ijkteken ('='), en dan wat je wilt onthouden:"

#: 05.6-Variables.md:9
#, no-wrap
msgid "sample_name = :loop_amen"
msgstr "sample_name = :loop_amen"

#: 05.6-Variables.md:13
msgid ""
"Here, we've 'remembered' the symbol `:loop_amen` in the variable `sample_name`"
". We can now use `sample_name` everywhere we might have used `:loop_amen`. For"
" example:"
msgstr ""
"Hier, we hebben  het symbool `:loop_amen` 'onthouden' in de variabele `sample_"
"name` . Nu kunnen we `sample_name` gebruiken, overal waar we `:loop_amen` hebb"
"en gebruikt. Bijvoorbeeld:"

#: 05.6-Variables.md:17
#, no-wrap
msgid ""
"sample_name = :loop_amen\n"
"sample sample_name"
msgstr ""
"sample_name = :loop_amen\n"
"sample sample_name"

#: 05.6-Variables.md:22
msgid ""
"There are three main reasons for using variables in Sonic Pi: communicating me"
"aning, managing repetition and capturing the results of things."
msgstr ""
"Er zijn drie belangrijke redenen voor het gebruik van variabelen in Sonic Pi: "
"in het communiceren, het beheer van herhaling en het vastleggen van de resulta"
"ten van zaken."

#: 05.6-Variables.md:26
msgid "Communicating Meaning"
msgstr "In de zin van Communicatie"

#: 05.6-Variables.md:28
msgid ""
"When you write code it's easy to just think you're telling the computer how to"
" do stuff - as long as the computer understands it's OK. However, it's importa"
"nt to remember that it's not just the computer that reads the code. Other peop"
"le may read it too and try to understand what's going on. Also, you're likely "
"to read your own code in the future and try to understand what's going on. Alt"
"hough it might seem obvious to you now - it might not be so obvious to others "
"or even your future self!"
msgstr ""
"Als je code schrijft, denk ,je snel dat je je computer verteld wat hij moet do"
"en, en zolang de computer deze kan verstaan, alles OK is. \n"
"Maar het is ook belangrijk om er op te letten dat niet alleen de computer jouw"
" code leest. Andere mensen kunnen deze ook lezen en proberen te begrijpen wat "
"er gaande is. Ook, wil je waarschijnlijk jouw eigen code in de toekomst lezen "
"en proberen te begrijpen hoe die werkt. Hoewel deze code voor jou nu vanzelfsp"
"rekend lijkt - is het misschien niet zo duidelijk voor anderen of zelfs je toe"
"komstige zelf!"

#: 05.6-Variables.md:36
msgid ""
"One way to help others understand what your code is doing is to write comments"
" (as we saw in a previous section). Another is to use meaningful variable name"
"s. Look at this code:"
msgstr ""
"Een manier om andere jouw code te laten begrijpen is deze van een commentaar-l"
"ijn voorzien (zoals we in een voorgaande sectie hebben gezien). Een ander is z"
"involle variabele namen gebruiken. Kijk naar deze code:"

#: 05.6-Variables.md:40
#, no-wrap
msgid "sleep 1.7533"
msgstr "sleep 1.7533"

#: 05.6-Variables.md:44
msgid ""
"Why does it use the number `1.7533`? Where did this number come from? What doe"
"s it mean? However, look at this code:"
msgstr ""
"Waarom maakt men hier gebruik van het cijfer `1.7533`? Waar komt dit getal van"
"daan? Wat betekent het? En kijk nu eens naar deze code:"

#: 05.6-Variables.md:47
#, no-wrap
msgid ""
"loop_amen_duration = 1.7533\n"
"sleep loop_amen_duration"
msgstr ""
"loop_amen_duration = 1.7533\n"
"sleep loop_amen_duration"

#: 05.6-Variables.md:52
msgid ""
"Now, it's much clearer what `1.7533` means: it's the duration of the sample `:"
"loop_amen`! Of course, you might say why not simply write:"
msgstr ""
"Het is nu veel duidelijker wat '1.7533' betekent: het is de duur van de sample"
" `:loop_amen`! Natuurlijk, zou je kunnen zeggen, waarom schrijf je gewoon niet"
":"

#: 05.6-Variables.md:55
#, no-wrap
msgid "sleep sample_duration(:loop_amen)"
msgstr "sleep sample_duration(:loop_amen)"

#: 05.6-Variables.md:59
msgid "Which, of course, is a very nice way of communicating the intent of the code."
msgstr ""
"Wat natuurlijk een zeer mooie manier is om de intentie van de code te communic"
"eren ."

#: 05.6-Variables.md:62
msgid "Managing Repetition"
msgstr "Herhaling Beheren"

#: 05.6-Variables.md:64
msgid ""
"Often you see a lot of repetition in your code and when you want to change thi"
"ngs, you have to change it in a lot of places. Take a look at this code:"
msgstr ""
"Vaak zie je een heleboel herhaling in je code en als je dingen wil veranderen,"
" moet je deze op een heleboel plaatsen veranderen. Kijk even naar deze code:"

#: 05.6-Variables.md:68
#, no-wrap
msgid ""
"sample :loop_amen\n"
"sleep sample_duration(:loop_amen)\n"
"sample :loop_amen, rate: 0.5\n"
"sleep sample_duration(:loop_amen, rate: 0.5)\n"
"sample :loop_amen\n"
"sleep sample_duration(:loop_amen)"
msgstr ""
"sample :loop_amen\n"
"sleep sample_duration(:loop_amen)\n"
"sample :loop_amen, rate: 0.5\n"
"sleep sample_duration(:loop_amen, rate: 0.5)\n"
"sample :loop_amen\n"
"sleep sample_duration(:loop_amen)"

#: 05.6-Variables.md:77
msgid ""
"We're doing a lot of things with `:loop_amen`! What if we wanted to hear what "
"it sounded like with another loop sample such as `:loop_garzul`? We'd have to "
"find and replace all `:loop_amen`s with `:loop_garzul`. That might be fine if "
"you have lots of time - but what if you're performing on stage? Sometimes you "
"don't have the luxury of time - especially if you want to keep people dancing."
msgstr ""
"We doen hier heel wat met ': loop_amen'! Maar als we nu willen horen hoe dit k"
"linkt met een andere sample loop, zoals `:loop_garzul`? Dan zouden we deze moe"
"ten gaan zoeken en alle `:loop_amen`s met `:loop_garzul` vervangen'. Dat zou f"
"ijn zijn als je veel tijd hebt- maar wat als je dit uitvoert op het podium? So"
"ms heb je de luxe van de tijd niet - vooral niet als je de mensen aan het dans"
"en wil houden."

#: 05.6-Variables.md:84
msgid "What if you'd written your code like this:"
msgstr "Wat als je je code als het volgt zou schrijven:"

#: 05.6-Variables.md:86
#, no-wrap
msgid ""
"sample_name = :loop_amen\n"
"sample sample_name\n"
"sleep sample_duration(sample_name)\n"
"sample sample_name, rate: 0.5\n"
"sleep sample_duration(sample_name, rate: 0.5)\n"
"sample sample_name\n"
"sleep sample_duration(sample_name)"
msgstr ""
"sample_name = :loop_amen\n"
"sample sample_name\n"
"sleep sample_duration(sample_name)\n"
"sample sample_name, rate: 0.5\n"
"sleep sample_duration(sample_name, rate: 0.5)\n"
"sample sample_name\n"
"sleep sample_duration(sample_name)"

#: 05.6-Variables.md:96
msgid ""
"Now, that does exactly the same as above (try it). It also gives us the abilit"
"y to just change one line `sample_name = :loop_amen` to `sample_name = :loop_g"
"arzul` and we change it in many places through the magic of variables."
msgstr ""
"Nu dat doet net het zelfde als deze hierboven (probeer maar). Het geeft ons oo"
"k de mogelijkheid om één enkele lijn te moeten gaan veranderen: `sample_naam ="
" :loop_amen` naar `sample_naam = :loop_garzul, en we veranderen deze op vele p"
"laatsen binnen onze code door de magie van variabelen."

#: 05.6-Variables.md:101
msgid "Capturing Results"
msgstr "Vastleggen van de resultaten"

#: 05.6-Variables.md:103
msgid ""
"Finally, a good motivation for using variables is to capture the results of th"
"ings. For example, you may wish to do things with the duration of a sample:"
msgstr ""
"Tot slot, een goede motivatie om variabelen te gaan gebruiken is om resultaten"
" van zaken vast te leggen. Misschien wilt u bijvoorbeeld iets doen met de duur"
" van een sample:"

#: 05.6-Variables.md:107
#, no-wrap
msgid "sd = sample_duration(:loop_amen)"
msgstr "sd = sample_duration(:loop_amen)"

#: 05.6-Variables.md:111
msgid "We can now use `sd` anywhere we need the duration of the `:loop_amen` sample."
msgstr ""
"We kunnen nu  'sd' overal gebruiken waar we de duur van de sample `:loop_amen`"
" nodig hebben."

#: 05.6-Variables.md:114
msgid ""
"Perhaps more importantly, a variable allows us to capture the result of a call"
" to `play` or `sample`:"
msgstr ""
"Wat misschien nog belangrijker is, een variabele stelt ons in staat het result"
"aat te capteren van een oproep naar `play` of `sample`:"

#: 05.6-Variables.md:117
#, no-wrap
msgid "s = play 50, release: 8"
msgstr "s = play 50, release: 8"

#: 05.6-Variables.md:121
msgid ""
"Now we have caught and remembered `s` as a variable, which allows us to contro"
"l the synth as it is running:"
msgstr ""
"Nu hebben we  `s` gevangen en onthouden als een variabele, hetgeen ons toelaat"
" de synth te controleren wanneer deze speelt:"

#: 05.6-Variables.md:124
#, no-wrap
msgid ""
"s = play 50, release: 8\n"
"sleep 2\n"
"control s, note: 62"
msgstr ""
"s = play 50, release: 8\n"
"sleep 2\n"
"control s, note: 62"

#: 05.6-Variables.md:130
msgid "We'll look into controlling synths in more detail in a later section."
msgstr ""
"We zullen het manipuleren van synth's in een later sectie meer in detail bekij"
"ken."

#: 05.6-Variables.md:133
msgid "Warning: Variables and Threads"
msgstr "Waarschuwing: Variabelen en threads"

#: 05.6-Variables.md:135
msgid ""
"Whilst variables are great for giving things names and capturing the results o"
"f things, it is important to know that they should typically only be used loca"
"lly within a thread. For example, *don't do this*:"
msgstr ""
"Alhoewel variabelen goed zijn voor het geven van namen aan dingen en het opsla"
"an van de resultaten van dingen, is het belangrijk om te weten dat ze typisch "
"alleen lokaal gebruikt dienen te worden binnen een thread. Bijvoorbeeld, *doe "
"dit niet*:"

#: 05.6-Variables.md:139
#, no-wrap
msgid ""
"a = (ring 6, 5, 4, 3, 2, 1)\n"
"live_loop :sorted do\n"
"  a = a.sort\n"
"  sleep 0.5\n"
"  puts \"sorted: \", a\n"
"end\n"
"live_loop :shuffled do\n"
"  a = a.shuffle\n"
"  sleep 0.5\n"
"end"
msgstr ""
"a = (ring 6, 5, 4, 3, 2, 1)\n"
"live_loop :sorted do\n"
"  a = a.sort\n"
"  sleep 0.5\n"
"  puts \"sorted: \", a\n"
"end\n"
"live_loop :shuffled do\n"
"  a = a.shuffle\n"
"  sleep 0.5\n"
"end"

#: 05.6-Variables.md:154
msgid ""
"In the above example we assign a ring of numbers to a variable `a` and then us"
"ed it within two separate `live_loop`s. In the first live loop every `0.5`s we"
" sort the ring (to `(ring 1, 2, 3, 4, 5, 6)`) and then print it out to the log"
". If you run the code, you'll find that the printed list *is not always sorted"
"!*. This may surprise you - especially that sometimes the list is printed as s"
"orted, and sometimes it is not. This is called non-deterministic behaviour and"
" is the result of a rather nasty problem called a race-condition. The problem "
"is due to the fact that the second live loop is also manipulating the list (in"
" this case shuffling it) and by the time the list is printed, sometimes it has"
" just been sorted and sometimes it has just been shuffled. Both live loops are"
" racing to do something different to the same variable and every time round a "
"different loop 'wins'."
msgstr ""
"In het bovenstaande voorbeeld kenden we een ring van getallen toe aan variabel"
"e `a` en werd deze gebruikt in twee `live_loop`'s. In de eerste lus sorteren w"
"e de ring elke 0,5s (naar `(ring 1, 2, 3, 4, 5, 6)`) en drukken deze af naar h"
"et log. Wanneer je de code draait kom je erachter dat de afgedrukte lijst *nie"
"t altijd gesorteerd is!*. Dit kan je verrassen, zeker omdat de lijst soms geso"
"rteerd is afgedrukt en soms niet. Dit wordt niet deterministisch gedrag genoem"
"d en is het resultaat van een behoorlijk naar probleem genaamd race conditie. "
"Het probleem komt doordat de tweede lus de lijst ook manipuleert (in dit geval"
" door elkaar schudden). Tegen de tijd dat de lijst wordt afgedrukt is deze som"
"s net gesorteerd en soms net geschud. Beide lussen 'racen' om iets anders te d"
"oen met dezelfde variabele en elke keer 'wint' er een andere lus."

#: 05.6-Variables.md:168
msgid ""
"There are two solutions to this. Firstly, *don't use the same variable in mult"
"iple live loops or threads*. For example, the following code will always print"
" a sorted list as each live loop has its own separate variable:"
msgstr ""
"Er zijn hiervoor twee oplossingen. Ten eerste, *gebruik dezelfde variabele nie"
"t in meerdere live lussen of threads*. Bijvoorbeeld: de volgende code drukt al"
"tijd een gesorteerde lijst omdat iedere live lus een aparte eigen variabele he"
"eft:"

#: 05.6-Variables.md:173
#, no-wrap
msgid ""
"live_loop :shuffled do\n"
"  a = (ring 6, 5, 4, 3, 2, 1)\n"
"  a = a.shuffle\n"
"  sleep 0.5\n"
"end\n"
"live_loop :sorted do\n"
"  a = (ring 6, 5, 4, 3, 2, 1)\n"
"  a = a.sort\n"
"  sleep 0.5\n"
"  puts \"sorted: \", a\n"
"end"
msgstr ""
"live_loop :geschud do\n"
"  a = (ring 6, 5, 4, 3, 2, 1)\n"
"  a = a.shuffle\n"
"  sleep 0.5\n"
"end\n"
"live_loop :gesorteerd do\n"
"  a = (ring 6, 5, 4, 3, 2, 1)\n"
"  a = a.sort\n"
"  sleep 0.5\n"
"  puts \"gesorteerd: \", a\n"
"end"

#: 05.6-Variables.md:188
msgid ""
"However, sometimes we do want to share things across threads. For example, the"
" current key, BPM, synth etc. In these cases, the solution is to use Sonic Pi'"
"s special thread-safe state system via the fns `get` and `set`. This is discus"
"sed later on in section 10."
msgstr ""
"Soms willen we echter dingen delen tussen threads. Bijvoorbeeld de huidige too"
"nsoort, BPM, synth, etc. In deze gevallen is de oplossing om gebruik te maken "
"van de speciale thread-safe state systemen in Sonic Pi via de functies `get` e"
"n `set`. Dit wordt verder beproken in sectie 10."

#: 05.7-Thread-Synchronisation.md:1
msgid "5.7 Thread Synchronisation"
msgstr "5.7 Het Synchroniseren van Threads"

#: 05.7-Thread-Synchronisation.md:3
msgid "Thread Synchronisation"
msgstr "Het Synchroniseren van Threads"

#: 05.7-Thread-Synchronisation.md:5
msgid ""
"Once you have become sufficiently advanced live coding with a number of functi"
"ons and threads simultaneously, you've probably noticed that it's pretty easy "
"to make a mistake in one of the threads which kills it. That's no big deal, be"
"cause you can easily restart the thread by hitting Run. However, when you rest"
"art the thread it is now *out of time* with the original threads."
msgstr ""
"Eens je het live coderen voldoende onder de knie hebt met een aantal functies "
"en threads tezelfdertijd, dan heb je misschien opgemerkt dat het niet moeilijk"
" is om een fout te maken in één van de threads die dodelijk kan zijn. Niet hee"
"l erg, want je kan makkelijk de thread terug herstarten door op afspelen te kl"
"ikken. Maar als je de thread herstart is deze *uit de maat* met de originele t"
"hreads."

#: 05.7-Thread-Synchronisation.md:12
msgid "Inherited Time"
msgstr "Overgenomen Tijd"

#: 05.7-Thread-Synchronisation.md:14
msgid ""
"As we discussed earlier, new threads created with `in_thread` inherit all of t"
"he settings from the parent thread. This includes the current time. This means"
" that threads are always in time with each other when started simultaneously."
msgstr ""
"Zoals we eerder hebben besproken, erven nieuwe threads gemaakt met `in_thread`"
" alle instellingen van de bovenliggende thread. Dus ook de huidige tijd. Dit b"
"etekent dat de threads altijd synchroon met elkaar zijn als zij tegelijkertijd"
" zijn gestart."

#: 05.7-Thread-Synchronisation.md:19
msgid ""
"However, when you start a thread on its own it starts with its own time which "
"is unlikely to be in sync with any of the other currently running threads."
msgstr ""
"Wanneer je een thread op zich start, begint het met zijn eigen klok die waarsc"
"hijnlijk niet in sync is met een van de andere actieve threads."

#: 05.7-Thread-Synchronisation.md:23
msgid "Cue and Sync"
msgstr "Cue en Sync"

#: 05.7-Thread-Synchronisation.md:25
msgid ""
"Sonic Pi provides a solution to this problem with the functions `cue` and `syn"
"c`."
msgstr ""
"Sonic Pi biedt een oplossing voor dit probleem met de functies 'cue' en 'sync'"
"."

#: 05.7-Thread-Synchronisation.md:28
msgid ""
"`cue` allows us to send out heartbeat messages to all other threads. By defaul"
"t the other threads aren't interested and ignore these heartbeat messages. How"
"ever, you can easily register interest with the `sync` function."
msgstr ""
"'cue' laat ons toe, hartslag-berichten te sturen aan alle andere threads. Stan"
"daard zijn de andere threads niet geïnteresseerd in deze, en negeren deze hart"
"slag-berichten. Je kan hun aandacht wel vragen met de functie 'sync'."

#: 05.7-Thread-Synchronisation.md:33
msgid ""
"The important thing to be aware of is that `sync` is similar to `sleep` in tha"
"t it stops the current thread from doing anything for a period of time. Howeve"
"r, with `sleep` you specify how long you want to wait while with `sync` you do"
"n't know how long you will wait - as `sync` waits for the next `cue` from anot"
"her thread which may be soon or a long time away."
msgstr ""
"Het belangrijkst om weten is dat 'sync' vergelijkbaar is met `sleep` in die zi"
"n dat het de huidige thread stopt  voor een periode van tijd om om actief te z"
"ijn. Met `sleep` geef je echter aan hoe lang je wilt wachten terwijl je met 's"
"ync' niet weet hoe lang je zal wachten -  als 'sync' op de volgende 'cue' van "
"een andere thread wacht die lang of kort kan wegblijven."

#: 05.7-Thread-Synchronisation.md:40
msgid "Let's explore this in a little more detail:"
msgstr "Laten we dit in detail bekijken:"

#: 05.7-Thread-Synchronisation.md:42
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    cue :tick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :tick\n"
"    sample :drum_heavy_kick\n"
"  end\n"
"end"
msgstr ""
"in_thread do\n"
"  loop do\n"
"    cue :tick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :tick\n"
"    sample :drum_heavy_kick\n"
"  end\n"
"end"

#: 05.7-Thread-Synchronisation.md:58
msgid ""
"Here we have two threads - one acting like a metronome, not playing any sounds"
" but sending out `:tick` heartbeat messages every beat. The second thread is s"
"ynchronising on `tick` messages and when it receives one it inherits the time "
"of the `cue` thread and continues running."
msgstr ""
"Hier hebben we twee threads - één gedraagt zich als metronoom, zonder geluid t"
"e maken en zend elke maat enkel `:tick` hartslag-berichten uit. De tweede thre"
"ad synchroniseerd op `tick` berichten en wanneer deze er één ontvangt, erft hi"
"j de `cue` tijd thread en blijft lopen."

#: 05.7-Thread-Synchronisation.md:63
msgid ""
"As a result, we will hear the `:drum_heavy_kick` sample exactly when the other"
" thread sends the `:tick` message, even if the two threads didn't start their "
"execution at the same time:"
msgstr ""
"Als gevolg zullen wij de ': drum_heavy_kick' sample horen, precies op het mome"
"nt dat de andere thread het `:tick` bericht uitzend, zelfs als de twee threads"
" niet met de uitvoering ervan op hetzelfde moment beginnen:"

#: 05.7-Thread-Synchronisation.md:67
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    cue :tick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"sleep(0.3)\n"
"in_thread do\n"
"  loop do\n"
"    sync :tick\n"
"    sample :drum_heavy_kick\n"
"  end\n"
"end"
msgstr ""
"in_thread do\n"
"  loop do\n"
"    cue :tick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"sleep(0.3)\n"
"in_thread do\n"
"  loop do\n"
"    sync :tick\n"
"    sample :drum_heavy_kick\n"
"  end\n"
"end"

#: 05.7-Thread-Synchronisation.md:85
msgid ""
"That naughty `sleep` call would typically make the second thread out of phase "
"with the first. However, as we're using `cue` and `sync`, we automatically syn"
"c the threads bypassing any accidental timing offsets."
msgstr ""
"Die ondeugende `sleep` aanroep zou doorgaans de tweede thread uit fase laten l"
"open met de éérste. Als we echter `cue` en `sync` gebruiken, synchroniseren we"
" automatisch alle lopende threads die toevallige verschuivingen in timing omze"
"ilen."

#: 05.7-Thread-Synchronisation.md:90
msgid "Cue Names"
msgstr "Cue Namen"

#: 05.7-Thread-Synchronisation.md:92
msgid ""
"You are free to use whatever name you'd like for your `cue` messages - not jus"
"t `:tick`. You just need to ensure that any other threads are `sync`ing on the"
" correct name - otherwise they'll be waiting for ever (or at least until you p"
"ress the Stop button)."
msgstr ""
"Je mag eender welke naam gebruiken voor jouw `cue` berichten, niet enkel `:tic"
"k`. Je hoeft er alleen voor de zorgen dat alle threads op de correcte naam `sy"
"nc`-en, anders gaan ze voor eeuwig wachten (of tot je op de stopknopstop klikt"
" tenminste)."

#: 05.7-Thread-Synchronisation.md:97
msgid "Let's play with a few `cue` names:"
msgstr "Laten we met en paar `cue` namen spelen:"

#: 05.7-Thread-Synchronisation.md:99
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do \n"
"    cue [:foo, :bar, :baz].choose\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do \n"
"    sync :foo \n"
"    sample :elec_beep\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :bar\n"
"    sample :elec_flip\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :baz\n"
"    sample :elec_blup\n"
"  end\n"
"end"
msgstr ""
"in_thread do\n"
"  loop do \n"
"    cue [:foo, :bar, :baz].choose\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do \n"
"    sync :foo \n"
"    sample :elec_beep\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :bar\n"
"    sample :elec_flip\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :baz\n"
"    sample :elec_blup\n"
"  end\n"
"end"

#: 05.7-Thread-Synchronisation.md:129
msgid ""
"Here we have a main `cue` loop which is randomly sending one of the heartbeat "
"names `:foo`, `:bar` or `:baz`. We then also have three loop threads syncing o"
"n each of those names independently and then playing a different sample. The n"
"et effect is that we hear a sound every 0.5 beats as each of the `sync` thread"
"s is randomly synced with the `cue` thread and plays its sample."
msgstr ""
"Hier hebben we een hoofd  `cue` loop die random de heartbeat namen `:foo`, `:b"
"ar` or `:baz`uitzend. We hebben ook drie loop threads die elk onafhankelijk op"
" één van die namen synct en daarbij een verschillende sample afspeeld. Het net"
"to effect is dat we elke 0.5 beat een klank horen als wordt elk van deze 0.5 `"
"sync` threads random ge-synct wordt met de `cue` thread en zijn sample speelt."

#: 05.7-Thread-Synchronisation.md:136
msgid ""
"This of course also works if you order the threads in reverse as the `sync` th"
"reads will simply sit and wait for the next `cue`."
msgstr ""
"Dit werkt natuurlijk ook als jen de threads omgekeerd ordend omdat de`sync` th"
"reads gewoon op de volgende `cue` zitten wachten."

#: 06-FX.md:1
msgid "6 FX"
msgstr "6 FX"

#: 06-FX.md:3
msgid "Studio FX"
msgstr "Studio FX"

#: 06-FX.md:5
msgid ""
"One of the most rewarding and fun aspects of Sonic Pi is the ability to easily"
" add studio effects to your sounds. For example, you may wish to add some reve"
"rb to parts of your piece, or some echo or perhaps even distort or wobble your"
" basslines."
msgstr ""
"Een van de meest lonende en leuke aspecten van Sonic Pi is de mogelijkheid om "
"gemakkelijk  studio-effecten aan uw geluiden toe te voegen . Bijvoorbeeld, op "
"sommige delen van je muziekstuk een reverb toevoegen, of wat echo of misschien"
" zelfs distortion op je  wobbelende basslijnen."

#: 06-FX.md:10
msgid ""
"Sonic Pi provides a very simple yet powerful way of adding FX. It even allows "
"you to chain them (so you can pass your sounds through distortion, then echo a"
"nd then reverb) and also control each individual FX unit with opts (in a simil"
"ar way to giving params to synths and samples). You can even modify the opts o"
"f the FX whilst it's still running. So, for example, you could increase the re"
"verb on your bass throughout the track..."
msgstr ""
"Sonic Pi biedt een erg simpele, doch krachtige manier om effecten toe te voege"
"n. Je kan deze zelfs in een ketting aan elkaar schakelen (dus kan je je klanke"
"n doogeven via distortion, dan echo-delay en dan reverb) en de effect-modules "
"apart besturen (op een vergelijkbare manier dat je dat met de parameters van e"
"en synth of sampler zou doen). Je kan zelfs de opties modifiëren terwijl deze "
"nog steeds loopt. Dus, bijvoorbeeld, je zou de reverb op je bas kunnen verhoge"
"n terwijl de track loopt..."

#: 06-FX.md:18
msgid "Guitar Pedals"
msgstr "Gitaar Pedalen"

#: 06-FX.md:20
msgid ""
"If all of this sounds a bit complicated, don't worry. Once you play around wit"
"h it a little, it will all become quite clear. Before you do though, a simple "
"analogy is that of guitar FX pedals. There are many kinds of FX pedals you can"
" buy. Some add reverb, others distort etc. A guitarist will plug his or her gu"
"itar into one FX pedal - i.e. distortion -, then take another cable and connec"
"t (chain) a reverb pedal. The output of the reverb pedal can then be plugged i"
"nto the amplifier:"
msgstr ""
"Als dit allemaal een beetje ingewikkeld klinkt, maak je geen zorgen. Eens je h"
"iermee een beetje speelt, zal het allemaal duidelijk worden. Maar voor je eraa"
"n begint, moet je weten dat het een werkt zoals bij gitaar effecten pedalen. E"
"r zijn verschillende effect-pedalen te koop. Sommigen voegen een reverb-klank "
"toe, andere distortion enz. Een gitarist zal zij of haar gitaar in één van de "
"effect-pedalen pluggen, bv. distortion, en zal dan bvb een reverb effect in de"
" uitgang van de eerste pedaal pluggen om het geluid door te schakelen (chain=k"
"etting). De uitgang van de reverb-pedaal kan dan in de versterker geplugt word"
"en:"

#: 06-FX.md:29
#, no-wrap
msgid "Guitar -> Distortion -> Reverb -> Amplifier"
msgstr "Gitaar -> Distortion -> Reverb -> Amplifier (Versterker)"

#: 06-FX.md:33
msgid ""
"This is called FX chaining. Sonic Pi supports exactly this. Additionally, each"
" pedal often has dials and sliders to allow you to control how much distortion"
", reverb, echo etc. to apply. Sonic Pi also supports this kind of control. Fin"
"ally, you can imagine a guitarist playing whilst someone plays with the FX con"
"trols whilst they're playing. Sonic Pi also supports this - but instead of nee"
"ding someone else to control things for you, that's where the computer steps i"
"n."
msgstr ""
"Dit heet FX chaining. Sonic Pi ondersteunt precies dit. Bovendien heeft elke p"
"edaal vaak wijzerplaten en schuifregelaars zodat je kan bepalen hoeveel distor"
"tion, reverb, echo enz je kan toepassen. Sonic Pi ondersteunt ook dit soort co"
"ntrole. Tot slot kan je je bvb gitaristen voorstellen en dat iemand anders  me"
"t de FX-besturingselementen speelt, terwijl zij aan het spelen zijn. Sonic Pi "
"ondersteunt dit ook- maar in plaats van dat iemand anders  dingen voor jou con"
"troleert, doet de computer dit."

#: 06-FX.md:42
msgid "Let's explore FX!"
msgstr "Laten we FX verkennen!"

#: 06.1-Adding-FX.md:1
msgid "6.1 Adding FX"
msgstr "6.1 FX  Toevoegen"

#: 06.1-Adding-FX.md:3 13.1-Sound-In.md:26
msgid "Adding FX"
msgstr "FX  Toevoegen"

#: 06.1-Adding-FX.md:5
msgid ""
"In this section we'll look at a couple of FX: reverb and echo. We'll see how t"
"o use them, how to control their opts and how to chain them."
msgstr ""
"In deze sectie zullen we naar een paar Effecten kijken : reverb en echo. We zu"
"llen zien hoe ze te gebruiken, hoe hun opts te besturen en hoe ze te chainen."

#: 06.1-Adding-FX.md:9
msgid ""
"Sonic Pi's FX system uses blocks. So if you haven't read section 5.1 you might"
" want to take a quick look and then head back."
msgstr ""
"Sonic Pi's FX systeem maakt gebruik van blokken. Dus als je die niet hebt gele"
"zen in sectie 5.1 Kan je hier snel naar kijken en kom dan naar hier terug."

#: 06.1-Adding-FX.md:12
msgid "Reverb"
msgstr "Reverb"

#: 06.1-Adding-FX.md:14
msgid ""
"If we want to use reverb we write `with_fx :reverb` as the special code to our"
" block like this:"
msgstr ""
"Als we reverb willen gebruiken schrijven we `with_fx :reverb` als speciale cod"
"e naar ons blok als volgt:"

#: 06.1-Adding-FX.md:17
#, no-wrap
msgid ""
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"

#: 06.1-Adding-FX.md:27
msgid ""
"Now play this code and you'll hear it played with reverb. It sounds good, does"
"n't it! Everything sounds pretty nice with reverb."
msgstr ""
"Speel deze code nu en hoor dat deze met reverb wordt gespeeld. Dat klinkt goed"
", niet?Alles klinkt vrij aardig met een reverb."

#: 06.1-Adding-FX.md:30
msgid "Now let's look what happens if we have code outside the do/end block:"
msgstr "Laten we nu kijken wat er gebeurt als we buiten het do/end blok code hebben:"

#: 06.1-Adding-FX.md:32
#, no-wrap
msgid ""
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end\n"
"sleep 1\n"
"play 55"
msgstr ""
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end\n"
"sleep 1\n"
"play 55"

#: 06.1-Adding-FX.md:45
msgid ""
"Notice how the final `play 55` isn't played with reverb. This is because it is"
" *outside* the do/end block, so it isn't captured by the reverb FX."
msgstr ""
"Merk op hoe de laatste `play 55` niet met reverb gespeeld wordt. Dit is omdat "
"het *buiten* het do/end blok staat, en dus niet door de reverb FX gecapteerd k"
"an worden."

#: 06.1-Adding-FX.md:48
msgid ""
"Similarly, if you make sounds before the do/end block, they also won't be capt"
"ured:"
msgstr ""
"Op dezelfde manier zullen klanken vòòr het do/end blok ook niet gecapteerd wor"
"den:"

#: 06.1-Adding-FX.md:51
#, no-wrap
msgid ""
"play 55\n"
"sleep 1\n"
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end\n"
"sleep 1\n"
"play 55"
msgstr ""
"play 55\n"
"sleep 1\n"
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end\n"
"sleep 1\n"
"play 55"

#: 06.1-Adding-FX.md:67
msgid "Echo"
msgstr "Echo"

#: 06.1-Adding-FX.md:69
msgid "There are many FX to choose from. How about some echo?"
msgstr "Er zijn veel effecten te kiezen. Wat dacht je van wat echo?"

#: 06.1-Adding-FX.md:71
#, no-wrap
msgid ""
"with_fx :echo do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :echo do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"

#: 06.1-Adding-FX.md:81
msgid ""
"One of the powerful aspects of Sonic Pi's FX blocks is that they may be passed"
" opts similar to opts we've already seen with `play` and `sample`. For example"
" a fun echo opt to play with is `phase:` which represents the duration of a gi"
"ven echo in beats. Let's make the echo slower:"
msgstr ""
"Één van de sterke punten van Sonic Pi's FX blokken is dat je er opties aan kun"
"t meegeven, vergelijkbaar met de opts die we al met `play` en `sample` hebben "
"gezien. Een plezante echo opt om mee te spelen is `phase:` die de duurtijd van"
" een echo in tellen (Beats) weergeeft. Laat ons even de echo vertragen:"

#: 06.1-Adding-FX.md:87
#, no-wrap
msgid ""
"with_fx :echo, phase: 0.5 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :echo, phase: 0.5 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"

#: 06.1-Adding-FX.md:97
msgid "Let's also make the echo faster:"
msgstr "Laten we de echo sneller maken:"

#: 06.1-Adding-FX.md:99
#, no-wrap
msgid ""
"with_fx :echo, phase: 0.125 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :echo, phase: 0.125 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"

#: 06.1-Adding-FX.md:109
msgid ""
"Let's make the echo take longer to fade away by setting the `decay:` time to 8"
" beats:"
msgstr ""
"Laat ons de echo over een langere tijd uitfaden door de `decay:` tijd in te st"
"ellen naar 8 beats:"

#: 06.1-Adding-FX.md:112
#, no-wrap
msgid ""
"with_fx :echo, phase: 0.5, decay: 8 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :echo, phase: 0.5, decay: 8 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"

#: 06.1-Adding-FX.md:122
msgid "Nesting FX"
msgstr "Effecten nesten"

#: 06.1-Adding-FX.md:124
msgid ""
"One of the most powerful aspects of the FX blocks is that you can nest them. T"
"his allows you to very easily chain FX together. For example, what if you want"
"ed to play some code with echo and then with reverb? Easy, just put one inside"
" the other:"
msgstr ""
"Een van de krachtigste aspecten van de FX-blokken is dat u hen kunt nesten. Hi"
"erdoor kan je heel gemakkelijk een FX keten samenstellen. Bijvoorbeeld, wat al"
"s je wat code met echo  wilde spelen en vervolgens met een reverb? Gemakkelijk"
", zet de één gewoon in de andere:"

#: 06.1-Adding-FX.md:129
#, no-wrap
msgid ""
"with_fx :reverb do\n"
"  with_fx :echo, phase: 0.5, decay: 8 do\n"
"    play 50\n"
"    sleep 0.5\n"
"    sample :elec_blup\n"
"    sleep 0.5\n"
"    play 62\n"
"  end\n"
"end"
msgstr ""
"with_fx :reverb do\n"
"  with_fx :echo, phase: 0.5, decay: 8 do\n"
"    play 50\n"
"    sleep 0.5\n"
"    sample :elec_blup\n"
"    sleep 0.5\n"
"    play 62\n"
"  end\n"
"end"

#: 06.1-Adding-FX.md:141
msgid ""
"Think about the audio flowing from the inside out. The sound of all the code w"
"ithin the inner do/end block such as `play 50` is first sent to the echo FX an"
"d the sound of the echo FX is in turn sent out to the reverb FX."
msgstr ""
"Denk aan de audio als zou deze van binnenuit stromen. Het geluid van alle code"
" binnen het binnenste do/end blok zoals 'play 50' wordt eerst verzonden naar d"
"e echo FX en het geluid van de echo FX wordt op zijn beurt verstuurd naar de r"
"everb FX."

#: 06.1-Adding-FX.md:146
msgid ""
"We may use very deep nestings for crazy results. However, be warned, the FX ca"
"n use a lot of resources and when you nest them you're effectively running mul"
"tiple FX simultaneously. So be sparing with your use of FX especially on low p"
"owered platforms such as the Raspberry Pi."
msgstr ""
"We kunnen heel diep nesten en deze gebruiken voor maffe resultaten. Maar wees "
"hierbij gewaarschuwd, want de FX kunnen veel cpu gebruiken wanneer u effectief"
" meerdere effecten nest die gelijktijdig worden uitgevoerd. Wees dus spaarzaam"
" op uw gebruik van effecten zeker op laag aangedreven platforms zoals  Raspber"
"ry Pi."

#: 06.1-Adding-FX.md:151
msgid "Discovering FX"
msgstr "Effecten ontdekken"

#: 06.1-Adding-FX.md:153
msgid ""
"Sonic Pi ships with a large number of FX for you to play with. To find out whi"
"ch ones are available, click on FX in the far left of this help system and you"
"'ll see a list of available options. Here's a list of some of my favourites:"
msgstr ""
"Sonic Pi wordt  met een groot aantal effecten geleverd om mee te spelen. Als j"
" wil weten welke er beschikbaar zijn, klik op FX in het linkeruiteinde van het"
" help-systeem en je zal een lijst van beschikbare opties zien. Hier is een lij"
"st van enkele van mijn favorieten:"

#: 06.1-Adding-FX.md:158
msgid "wobble,"
msgstr "wobble,"

#: 06.1-Adding-FX.md:159
msgid "reverb,"
msgstr "reverb,"

#: 06.1-Adding-FX.md:160
msgid "echo,"
msgstr "echo,"

#: 06.1-Adding-FX.md:161
msgid "distortion,"
msgstr "distortion,"

#: 06.1-Adding-FX.md:162
msgid "slicer"
msgstr "slicer"

#: 06.1-Adding-FX.md:164
msgid "Now go crazy and add FX everywhere for some amazing new sounds!"
msgstr ""
"Doe nu maar eens goed gek en zet overal effecten op voor wat verbazingwekkende"
" nieuwe geluiden!"

#: 06.2-FX-in-Practice.md:1
msgid "6.2 FX in Practice"
msgstr "6.2 FX in de praktijk"

#: 06.2-FX-in-Practice.md:3
msgid "FX in Practice"
msgstr "FX in de praktijk"

#: 06.2-FX-in-Practice.md:5
msgid ""
"Although they look deceptively simple on the outside, FX are actually quite co"
"mplex beasts internally. Their simplicity often entices people to overuse them"
" in their pieces. This may be fine if you have a powerful machine, but if - li"
"ke me - you use a Raspberry Pi to jam with, you need to be careful about how m"
"uch work you ask it to do if you want to ensure the beats keep flowing."
msgstr ""
"Hoewel ze eenvoudig aan de buitenkant lijken, zijn effecten best complexe bees"
"ten intern. Hun eenvoud verleid mensen ertoe ze te gaan overgebruiken. Dit kan"
" goed gaan op een krachtige machine, maar als je zoals ik een Raspberry Pi geb"
"ruikt om mee te jammen, met je voorzichtig zijn met de gevraagde werkkracht al"
"s je zeker wil zijn van een goede flow van jouw beats."

#: 06.2-FX-in-Practice.md:12
msgid "Consider this code:"
msgstr "Bekijk even deze code:"

#: 06.2-FX-in-Practice.md:14
#, no-wrap
msgid ""
"loop do\n"
"  with_fx :reverb do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"loop do\n"
"  with_fx :reverb do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: 06.2-FX-in-Practice.md:23
msgid ""
"In this code we're playing note 60 with a very short release time, so it's a s"
"hort note. We also want reverb so we've wrapped it in a reverb block. All good"
" so far. Except..."
msgstr ""
"In deze code spelen we noot 60 met een zeer korte release tijd, dus een korte "
"noot. We willen ook reverb, dus hebben we die in een reverb blok gewikkeld. Da"
"t gaat goed. Behalve..."

#: 06.2-FX-in-Practice.md:27
msgid ""
"Let's look at what the code does. First we have a `loop` which means everythin"
"g inside of it is repeated forever. Next we have a `with_fx` block. This means"
" we will create a new reverb FX *every time we loop*. This is like having a se"
"parate FX reverb pedal for every time you pluck a string on a guitar. It's coo"
"l that you can do this, but it's not always what you want. For example, this c"
"ode will struggle to run nicely on a Raspberry Pi. All the work of creating th"
"e reverb and then waiting until it needs to be stopped and removed is all hand"
"led by `with_fx` for you, but this takes CPU power which may be precious."
msgstr ""
"Laten we eens kijken wat de code doet. Vooraleerst hebben we een `loop` wat be"
"tekent dat al wat hierin zit voor eeuwig wordt herhaald. Vervolgens hebben we "
"een `with_fx` blok. Dit betekent dat we een nieuwe reverb FX zullen creëren *e"
"lke keer de loop opnieuw aan zijn beginpositie komt *. Dit is alsof we een ext"
"ra FX reverb pedaal zouden bijkrijgen, elke keer dat je aan een snaar van een "
"gitaar plukt. Het is wel cool dat je dit kunt doen, maar het is niet altijd wa"
"t je wilt. Deze code zal bijvoorbeeld moeite hebben mooi te draaien op een Ras"
"pberry Pi. Want al het werk om de reverb te vormen, en het wachten naar het mo"
"ment dat deze moet stoppen en weer weggedaan moet worden wordt allemaal voor j"
"ou gedaan door de `with_fx`, maar dat vraagt CPU kracht die kostbaar kan zijn."

#: 06.2-FX-in-Practice.md:37
msgid ""
"How do we make it more similar to a traditional setup where our guitarist has "
"just *one* reverb pedal which all sounds pass through? Simple:"
msgstr ""
"Hoe maken we deze meer vergelijkbaar met een traditionele opstelling waar onze"
" gitarist slechts *één* reverb-pedaal heeft waardoor alle klanken passeren? Ee"
"nvoudig:"

#: 06.2-FX-in-Practice.md:41
#, no-wrap
msgid ""
"with_fx :reverb do\n"
"  loop do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"with_fx :reverb do\n"
"  loop do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: 06.2-FX-in-Practice.md:50
msgid ""
"We put our loop *inside* the `with_fx` block. This way we only create a single"
" reverb for all notes played in our loop. This code is a lot more efficient an"
"d would work fine on a Raspberry Pi."
msgstr ""
"We zetten onze loop *binnen* het blok 'with_fx'. Op deze manier maken wij slec"
"hts een enkele reverb voor alle noten die gespeeld worden in onze loop. Deze c"
"ode is een stuk efficiënter en zou prima werken op een Raspberry Pi."

#: 06.2-FX-in-Practice.md:54
msgid "A compromise is to use `with_fx` over an iteration within a loop:"
msgstr ""
"Een compromis is het gebruik van 'with_fx' buiten van de herhaling binnen een "
"loop:"

#: 06.2-FX-in-Practice.md:56
#, no-wrap
msgid ""
"loop do\n"
"  with_fx :reverb do\n"
"    16.times do\n"
"      play 60, release: 0.1\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"
msgstr ""
"loop do\n"
"  with_fx :reverb do\n"
"    16.times do\n"
"      play 60, release: 0.1\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"

#: 06.2-FX-in-Practice.md:67
msgid ""
"This way we've lifted the `with_fx` out of the inner part of the `loop` and we"
"'re now creating a new reverb every 16 notes."
msgstr ""
"Op deze manier hebben we de 'with_fx'  uit het binnenste deel van de `loop` ge"
"haald en nu creëren we  een nieuwe reverb elke 16 noten."

#: 06.2-FX-in-Practice.md:70
msgid ""
"This is such a common pattern that `with_fx` supports an opt to do exactly thi"
"s but without having to write the `16.times` block:"
msgstr ""
"Deze situatie gaat in ons werk zo dikwijls terugkeren dat `with_fx` deze met e"
"en opt ondersteunt die dat zelf doet zonder de `16.times` blok te hoeven schri"
"jven:"

#: 06.2-FX-in-Practice.md:73
#, no-wrap
msgid ""
"loop do\n"
"  with_fx :reverb, reps: 16 do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"loop do\n"
"  with_fx :reverb, reps: 16 do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: 06.2-FX-in-Practice.md:82
msgid ""
"Both the `reps: 16` and `16.times do` examples will behave identically. The `r"
"eps: 16` essentially repeats the code in the `do/end` block 16 times so you ca"
"n use them both interchangeably and choose the one that feels best for you."
msgstr ""
"In de voorbeelden van `reps 16` en `16.times do` zullen zich beiden identiek g"
"edragen. De `reps: 16` herhalen in wezen de code in het `do/end` blok 16 keer "
"zodat u hen beide door elkaar kunt gebruiken en je kies gewoon de manier die v"
"oor jou het beste voelt."

#: 06.2-FX-in-Practice.md:87
msgid ""
"Remember, there are no mistakes, just possibilities. However, some of these ap"
"proaches will have a different sound and also different performance characteri"
"stics. So play around and use the approach that sounds best to you whilst also"
" working within the performance constraints of your platform."
msgstr ""
"Onthou, er zijn geen misstappen, enkel mogelijkheden. Echter, sommige benaderi"
"ngen zullen een andere klank of een ander performant karakter hebben. Dus spee"
"l een beetje met deze verschillende benaderingen en gebruik diegene het best b"
"ij jou past en die het best samengaan met de beperkingen van de prestaties van"
" het platform dat je gebruikt."

#: 07-Control.md:1
msgid "7 Control"
msgstr "7 Controle"

#: 07-Control.md:3
msgid "Controlling running sounds"
msgstr "De controle over lopende klank"

#: 07-Control.md:5
msgid ""
"So far we've looked at how you can trigger synths and samples, and also how to"
" change their default opts such as amplitude, pan, envelope settings and more."
" Each sound triggered is essentially its own sound with its own list of option"
"s set for the duration of the sound."
msgstr ""
"Tot nu toe hebben we gekeken hoe je synths en samples kunt activeren, en ook h"
"un standaard opties zoals amplitude, pan, envelop-instellingen en meer te wijz"
"igen. Elk geactiveerd geluid is wezenlijk haar eigen geluid, met een eigen lij"
"st van opties ingesteld voor de duur van de klank."

#: 07-Control.md:11
msgid ""
"Wouldn't it also be cool if you could change a sound's opts whilst it's still "
"playing, just like you might bend a string of a guitar whilst it's still vibra"
"ting?"
msgstr ""
"Zou het ook niet gaaf zijn dat als je dit geluid zou kunnen veranderen terwijl"
" het nog steeds speelt, zoals je misschien een snaar van een gitaar zou buigen"
" terwijl deze nog trilt?"

#: 07-Control.md:15
msgid "You're in luck - this section will show you how to do exactly this."
msgstr "Je hebt geluk- deze sectie gaat precies daarover."

#: 07.1-Controlling-Running-Synths.md:1
msgid "7.1 Controlling Running Synths"
msgstr "7.1 De controle over lopende Synths"

#: 07.1-Controlling-Running-Synths.md:3
msgid "Controlling Running Synths"
msgstr "Lopende Synths Contoleren"

#: 07.1-Controlling-Running-Synths.md:5
msgid ""
"So far we've only concerned ourselves with triggering new sounds and FX. Howev"
"er, Sonic Pi gives us the ability to manipulate and control currently running "
"sounds. We do this by using a variable to capture a reference to a synth:"
msgstr ""
"Tot nu toe hebben we onszelf alleen bezig gehouden met de triggering van nieuw"
"e drumklanken en FX. Sonic Pi geeft ons echter de mogelijkheid op het manipule"
"ren en controleren van de momenteel lopende klanken. We doen dit door middel v"
"an een variabele die een verwijzing naar een synthesizer opvangt:"

#: 07.1-Controlling-Running-Synths.md:10
#, no-wrap
msgid "s = play 60, release: 5"
msgstr "s = play 60, release: 5"

#: 07.1-Controlling-Running-Synths.md:14
msgid ""
"Here, we have a run-local variable `s` which represents the synth playing note"
" 60. Note that this is *run-local* - you can't access it from other runs like "
"functions."
msgstr ""
"Hier hebben we de variabele van een run-local waarmee de synth noot 60 speelt."
" Merk op dat dit een *run-local* is - je kan geen toegang   hebben tot deze va"
"naf een andere uitvoering zoals bij functies."

#: 07.1-Controlling-Running-Synths.md:18
msgid "Once we have `s`, we can start controlling it via the `control` function:"
msgstr "Eens we  `s` hebben, kunnen we deze beginnen tweaken via de `control` functie:"

#: 07.1-Controlling-Running-Synths.md:21 07.3-Sliding-Parameters.md:13
#, no-wrap
msgid ""
"s = play 60, release: 5\n"
"sleep 0.5\n"
"control s, note: 65\n"
"sleep 0.5\n"
"control s, note: 67\n"
"sleep 3\n"
"control s, note: 72"
msgstr ""
"s = play 60, release: 5\n"
"sleep 0.5\n"
"control s, note: 65\n"
"sleep 0.5\n"
"control s, note: 67\n"
"sleep 3\n"
"control s, note: 72"

#: 07.1-Controlling-Running-Synths.md:31
msgid ""
"The thing to notice is that we're not triggering 4 different synths here - we'"
"re just triggering one synth and then change the pitch 3 times afterwards, whi"
"le it's playing."
msgstr ""
"Wat je bij deze moet opmerken is dat wij hier geen 4 verschillende synths trig"
"geren - maar slechts één synth triggeren om dan de toonhoogte 3 keer te wijzig"
"en achteraf, terwijl deze wordt afgespeeld."

#: 07.1-Controlling-Running-Synths.md:35
msgid ""
"We can pass any of the standard opts to `control`, so you can control things l"
"ike `amp:`, `cutoff:` or `pan:`."
msgstr ""
"We kunnen iedere standaard opt doorgeven om `controle` over te hebben, zodat j"
"e `amp:`, `cutoff:` or `pan:´ kan controllen."

#: 07.1-Controlling-Running-Synths.md:38
msgid "Non-controllable Options"
msgstr "Niet-Control-bare Opties"

#: 07.1-Controlling-Running-Synths.md:40
msgid ""
"Some of the opts can't be controlled once the synth has started. This is the c"
"ase for all the ADSR envelope parameters. You can find out which opts are cont"
"rollable by looking at their documentation in the help system. If the document"
"ation says *Can not be changed once set*, you know it's not possible to contro"
"l the opt after the synth has started."
msgstr ""
"Sommige opts kunnen niet gecontrold worden eens de synth gestart is. Dis is he"
"t geval voor alle ADSR envelop parameters. Je kan uitzoeken welke opts gecontr"
"old kunnen worden door naar hun documentie te kijken in het hulp systeem. Als "
"de de documentatie zegt *Can not be changed once set*, dan weet je dat het nie"
"t mogelijk is om de opt te controllen als de synth al loopt."

#: 07.2-Controlling-FX.md:1
msgid "7.2 Controlling FX"
msgstr "7.2 FX Controllen"

#: 07.2-Controlling-FX.md:3
msgid "Controlling FX"
msgstr "FX Controllen"

#: 07.2-Controlling-FX.md:5
msgid ""
"It is also possible to control FX, although this is achieved in a slightly dif"
"ferent way:"
msgstr ""
"Het is ook mogelijk om FX te controllen, hoewel dit op een iets andere manier "
"wordt bereikt:"

#: 07.2-Controlling-FX.md:8
#, no-wrap
msgid ""
"with_fx :reverb do |r|\n"
"  play 50\n"
"  sleep 0.5\n"
"  control r, mix: 0.7\n"
"  play 55\n"
"  sleep 1\n"
"  control r, mix: 0.9\n"
"  sleep 1\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :reverb do |r|\n"
"  play 50\n"
"  sleep 0.5\n"
"  control r, mix: 0.7\n"
"  play 55\n"
"  sleep 1\n"
"  control r, mix: 0.9\n"
"  sleep 1\n"
"  play 62\n"
"end"

#: 07.2-Controlling-FX.md:21
msgid ""
"Instead of using a variable, we use the goalpost parameters of the do/end bloc"
"k. Inside the `|` bars, we need to specify a unique name for our running FX wh"
"ich we then reference from the containing do/end block. This behaviour is iden"
"tical to using parameterised functions."
msgstr ""
"In plaats van een variabele, gebruiken we de sluisteken parameters van het do/"
"end blok. Binnen de  `|` staafjes , moeten we een unieke naam voor onze lopend"
"e FX opgeven die we vervolgens verwijzen vanuit het  do/end blok. Dit gedrag i"
"s identiek aan het gebruik van geparametriseerde functies."

#: 07.2-Controlling-FX.md:26
msgid "Now go and control some synths and FX!"
msgstr "Ga nu enkele synths en FX Controllen !"

#: 07.3-Sliding-Parameters.md:1
msgid "7.3 Sliding Options"
msgstr "7.3 Glijdende Opties"

#: 07.3-Sliding-Parameters.md:3
msgid "Sliding Opts"
msgstr "Glijdende Opties"

#: 07.3-Sliding-Parameters.md:5
msgid ""
"Whilst exploring the synth and FX opts, you might have noticed that there are "
"a number of opts ending with `_slide`. You might have even tried calling them "
"and seeing no effect. This is because they're not normal parameters, they're s"
"pecial opts that only work when you control synths as introduced in the previo"
"us section."
msgstr ""
"Tijdens het verkennen van de synth en FX opties is het je misschien opgevallen"
" dat er een aantal opts zijn die eindigen op `_slide`. Je hebt deze misschien "
"ook proberen oproepen en daarmee opgemerkt dat zij geen effect hebben. Dat is "
"omdat zij geen normale parameters zijn, het zijn speciale opts die enkel werke"
"n wanneer je synths controlt zoals beschreven in de voorgaande sectie."

#: 07.3-Sliding-Parameters.md:11
msgid "Consider the following example:"
msgstr "Beschouw het volgende voorbeeld:"

#: 07.3-Sliding-Parameters.md:23
msgid ""
"Here, you can hear the synth pitch changing immediately on each `control` call"
". However, we might want the pitch to slide between changes. As we're controll"
"ing the `note:` parameter, to add slide, we need to set the `note_slide` param"
"eter of the synth:"
msgstr ""
"Hier hoor je de toonhoogte van de synth onmiddellijk wijzigen op elke `control"
"` appèl  . Wij willen echter dat de toonhoogte slide (glijdt) tussen de verand"
"eringen. Vermits we de `note:` parameter controllen, om slide toe te voegen, m"
"oeten we de parameter 'note_slide' van de synth instellen:"

#: 07.3-Sliding-Parameters.md:28
#, no-wrap
msgid ""
"s = play 60, release: 5, note_slide: 1\n"
"sleep 0.5\n"
"control s, note: 65\n"
"sleep 0.5\n"
"control s, note: 67\n"
"sleep 3\n"
"control s, note: 72"
msgstr ""
"s = play 60, release: 5, note_slide: 1\n"
"sleep 0.5\n"
"control s, note: 65\n"
"sleep 0.5\n"
"control s, note: 67\n"
"sleep 3\n"
"control s, note: 72"

#: 07.3-Sliding-Parameters.md:38
msgid ""
"Now we hear the notes being bent between the `control` calls. It sounds nice, "
"doesn't it? You can speed up the slide by using a shorter time such as `note_s"
"lide: 0.2` or slow it down by using a longer slide time."
msgstr ""
"Nu horen we de de noten buigen tussen de `control`aanroep. Dat klinkt lekker, "
"niet? Je kan de slide versnellen door een kortere tijd te gebruiken zoals `not"
"e_slide: 0.2` of vertragen door een langere slide time in te stellen."

#: 07.3-Sliding-Parameters.md:43
msgid ""
"Every parameter that can be controlled has a corresponding `_slide` parameter "
"for you to play with."
msgstr ""
"Elke parameter die controlt kan worden heeft een identieke parameter '_slide' "
"voor jou om mee te spelen."

#: 07.3-Sliding-Parameters.md:46
msgid "Sliding is sticky"
msgstr "Slide-en blijft plakken"

#: 07.3-Sliding-Parameters.md:48
msgid ""
"Once you've set a `_slide` parameter on a running synth, it will be remembered"
" and used every time you slide the corresponding parameter. To stop sliding yo"
"u must set the `_slide` value to 0 before the next `control` call."
msgstr ""
"Zodra u hebt een parameter '_slide' ingesteld op een lopende synth, zal het wo"
"rden onthoudenen telkens wanneer u de bijbehorende parameter slide gebruikt . "
"Als je de slide wilt stoppen moet je de waarde '_slide' op 0 instellen voor de"
" volgende oproep van `control`."

#: 07.3-Sliding-Parameters.md:53
msgid "Sliding FX Opts"
msgstr "Sliding FX Opts"

#: 07.3-Sliding-Parameters.md:55
msgid "It is also possible to slide FX opts:"
msgstr "Het is ook mogelijk FX opts te slide-en:"

#: 07.3-Sliding-Parameters.md:57
#, no-wrap
msgid ""
"with_fx :wobble, phase: 1, phase_slide: 5 do |e|\n"
"  use_synth :dsaw\n"
"  play 50, release: 5\n"
"  control e, phase: 0.025\n"
"end"
msgstr ""
"with_fx :wobble, phase: 1, phase_slide: 5 do |e|\n"
"  use_synth :dsaw\n"
"  play 50, release: 5\n"
"  control e, phase: 0.025\n"
"end"

#: 07.3-Sliding-Parameters.md:65
msgid ""
"Now have fun sliding things around for smooth transitions and flowing control."
".."
msgstr ""
"Veel plezier met het rond slide-en van zaken voor een vloeiende overgang en ee"
"n vlotte control..."

#: 08-Data-Structures.md:1
msgid "8 Data Structures"
msgstr "8 Datastructuren"

#: 08-Data-Structures.md:3
msgid "Data Structures"
msgstr "Datastructuren"

#: 08-Data-Structures.md:5
msgid "A very useful tool in a programmer's toolkit is a data structure."
msgstr ""
"Een zeer nuttig hulpmiddel in de gereedschapskist van een programmeur is een d"
"atastructuur."

#: 08-Data-Structures.md:7
msgid ""
"Sometimes you may wish to represent and use more than one thing. For example, "
"you may find it useful to have a series of notes to play one after another. Pr"
"ogramming languages have data structures to allow you do exactly this."
msgstr ""
"Soms wil je meer dan één ding kunnen representeren en gebruiken. Zo kan je het"
" bijvoorbeeld op en moment nodig vinden om een serie noten achter elkaar te sp"
"elen,de één na de andere. Programmeertalen hebben datastructuren die jou dit t"
"oelaten."

#: 08-Data-Structures.md:12
msgid ""
"There are many exciting and exotic data structures available to programmers - "
"and people are always inventing new ones. However, for now we only really need"
" to consider a very simple data structure - the list."
msgstr ""
"Er zijn vele spannende en exotische gegevensstructuren beschikbaar voor progra"
"mmeurs - en veel mensen zijn nog altijd bezig met het uitvinden van nieuwe. Ma"
"ar momenteel gaan we enkel een zeer eenvoudige gegevensstructuur beschouwen- d"
"e lijst."

#: 08-Data-Structures.md:16
msgid ""
"Let's look at it in more detail. We'll cover its basic form and then also how "
"lists can be used to represent scales and chords."
msgstr ""
"Laten we dit eens in detail bekijken. We zullen zijn basisvorm behandelen en o"
"ok hoe lijsten kunnen worden gebruikt voor toonladders en akkoorden."

#: 08.1-Lists.md:1
msgid "8.1 Lists"
msgstr "8.1 Lijsten"

#: 08.1-Lists.md:3
msgid "Lists"
msgstr "Lijsten"

#: 08.1-Lists.md:5
msgid ""
"In this section we'll take a look at a data structure which is very useful - t"
"he list. We met it very briefly before in the section on randomisation when we"
" randomly chose from a list of notes to play:"
msgstr ""
"In deze sectie zullen we een kijkje nemen naar een datastructuur die zeer nutt"
"ig kan zijn - de lijst. We hebben dit al kort gezien in het gedeelte over rand"
"omiseren, wanneer we willekeurig uit een lijst van noten kiezen om te spelen:"

#: 08.1-Lists.md:9
#, no-wrap
msgid "play choose([50, 55, 62])"
msgstr "play choose([50, 55, 62])"

#: 08.1-Lists.md:13
msgid ""
"In this section we'll explore using lists to also represent chords and scales."
" First let's recap how we might play a chord. Remember that if we don't use `s"
"leep`, sounds all happen at the same time:"
msgstr ""
"In deze sectie verkennen we om ook akkoorden en toonladders door lijsten te la"
"ten vertegenwoordigen. Eerste recapituleren we even hoe we een snaar kunnen be"
"spelen. Denk eraan dat als we geen gebruik maken van `sleep` we alle klanken t"
"ezelfdertijd horen :"

#: 08.1-Lists.md:17
#, no-wrap
msgid ""
"play 52\n"
"play 55\n"
"play 59"
msgstr ""
"play 52\n"
"play 55\n"
"play 59"

#: 08.1-Lists.md:23
msgid "Let's look at other ways to represent this code."
msgstr "Laten we eens kijken naar andere manieren om deze code weer te geven."

#: 08.1-Lists.md:25
msgid "Playing a List"
msgstr "Afspelen van een lijst"

#: 08.1-Lists.md:27
msgid ""
"One option is to place all the notes in a list: `[52, 55, 59]`. Our friendly `"
"play` function is smart enough to know how to play a list of notes. Try it:"
msgstr ""
"Een optie zou kunnen zijn om alle noten in een lijst te zeten `[52, 55, 59]`. "
"Onze vriendschappelijke `play` functie is slim genoeg om een lijst van noten t"
"e kunnen spelen. Probeer maar:"

#: 08.1-Lists.md:31
#, no-wrap
msgid "play [52, 55, 59]"
msgstr "play [52, 55, 59]"

#: 08.1-Lists.md:35
msgid ""
"Ooh, that's already nicer to read. Playing a list of notes doesn't stop you fr"
"om using any of the parameters as normal:"
msgstr ""
"Ooh, dat is al aangenamer om lezen. Een lijst met noten afspelen weerhoud je n"
"iet om de gewoonlijke parameters te gaan gebruiken:"

#: 08.1-Lists.md:38
#, no-wrap
msgid "play [52, 55, 59], amp: 0.3"
msgstr "play [52, 55, 59], amp: 0.3"

#: 08.1-Lists.md:42
msgid ""
"Of course, you can also use the traditional note names instead of the MIDI num"
"bers:"
msgstr ""
"Natuurlijk kan je ook de traditionele benaming van de noten gebruiken ipv. de "
"MIDI nummers:"

#: 08.1-Lists.md:45
#, no-wrap
msgid "play [:E3, :G3, :B3]"
msgstr "play [:E3, :G3, :B3]"

#: 08.1-Lists.md:49
msgid ""
"Now those of you lucky enough to have studied some music theory might recognis"
"e that chord as *E Minor* played in the 3rd octave."
msgstr ""
"De gelukkigen onder jullie die wat muziektheorie hebben geleerd, hebben het ak"
"koord *E Mineur* in het 3de octaaf herkend."

#: 08.1-Lists.md:52
msgid "Accessing a List"
msgstr "Toegang tot een lijst"

#: 08.1-Lists.md:54
msgid ""
"Another very useful feature of a list is the ability to get information out of"
" it. This may sound a bit strange, but it's no more complicated than someone a"
"sking you to turn a book to page 23. With a list, you'd say, what's the elemen"
"t at index 23? The only strange thing is that in programming indexes usually s"
"tart at 0 not 1."
msgstr ""
"Een andere zeer nuttige functie van een lijst is de mogelijkheid om er informa"
"tie uit te krijgen. Dit klinkt misschien een beetje vreemd, maar het is niet i"
"ngewikkelder dan iemand die jou vraagt een boek op pagina 23 open te slaan. Bi"
"j een lijst, zou je kunnen zeggen: wat is het element op index 23? Het vreemde"
" alleen is dat programmeer indexen meestal bij 0 beginnen en niet 1."

#: 08.1-Lists.md:60
msgid "With list indexes we don't count 1, 2, 3... Instead we count 0, 1, 2..."
msgstr "Met lijst indexen tellen we niet 1,2,3... maar 0,1,2..."

#: 08.1-Lists.md:62
msgid "Let's look at this in a little more detail. Take a look at this list:"
msgstr ""
"Laten we dit een beetje meer in detail bekijken. Neem een kijkje naar deze lij"
"st:"

#: 08.1-Lists.md:64
#, no-wrap
msgid "[52, 55, 59]"
msgstr "[52, 55, 59]"

#: 08.1-Lists.md:68
msgid ""
"There's nothing especially scary about this. Now, what's the second element in"
" that list? Yes, of course, it's `55`. That was easy. Let's see if we can get "
"the computer to answer it for us too:"
msgstr ""
"Dit is niet onoverkomelijk. Wat is nu het tweede element in de lijst? Dat is `"
"55` natuurlijk ja. Dat was makkelijk. Laten we eens kijken of de computer zove"
"r kunnen krijgen om dit voor ons te doen:"

#: 08.1-Lists.md:72 08.4-Rings.md:12
#, no-wrap
msgid "puts [52, 55, 59][1]"
msgstr "puts [52, 55, 59][1]"

#: 08.1-Lists.md:76
msgid ""
"OK, that looks a bit weird if you've never seen anything like it before. Trust"
" me though, it's not too hard. There are three parts to the line above: the wo"
"rd `puts` , our list `52, 55, 59` and our index `[1]`. Firstly we're saying `p"
"uts` because we want Sonic Pi to print the answer out for us in the log. Next,"
" we're giving it our list, and finally our index is asking for the second elem"
"ent. We need to surround our index with square brackets and because counting s"
"tarts at `0`, the index for the second element is `1`. Look:"
msgstr ""
"OK, dat ziet er misschien een beetje raar als je nog nooit zoiets gezien hebt."
" Geloof me maar, het is niet te moeilijk. Er zijn drie onderdelen naar de rege"
"l erboven: het woord `puts`, onze lijst ' 52, 55, 59' en onze index '[1]'. Ten"
" eerste: we zeggen `puts` omdat we willen dat Sonic Pi het antwoord voor ons i"
"n het logboek afdrukt . Vervolgens geven we het onze lijst, en tenslotte vraag"
"t onze index naarr het tweede element. We moeten onze index omringen met vierk"
"ante haken en omdat tellen bij '0' begint, is de index voor het tweede element"
" `1`. Kijk:"

#: 08.1-Lists.md:85
#, no-wrap
msgid ""
"# indexes:  0   1   2\n"
"           [52, 55, 59]"
msgstr ""
"# indexes:  0   1   2\n"
"           [52, 55, 59]"

#: 08.1-Lists.md:90
msgid ""
"Try running the code `puts [52, 55, 59][1]` and you'll see `55` pop up in the "
"log. Change the index `1` to other indexes, try longer lists and think about h"
"ow you might use a list in your next code jam. For example, what musical struc"
"tures might be represented as a series of numbers..."
msgstr ""
"Probeer de code uit te voeren ´puts [52, 55, 59] [1]` en je ziet `55´ in het l"
"ogboek opduiken. Zet de index ´1´ om in andere indexen, probeer langere lijste"
"n en denk na over hoe u een lijst in uw volgende code jam kunt gebruiken. Welk"
"e muzikale structuren kunnen bijvoorbeeld worden weergegeven als een reeks get"
"allen..."

#: 08.2-Chords.md:1
msgid "8.2 Chords"
msgstr "8.2 Akkoorden"

#: 08.2-Chords.md:5
msgid ""
"Sonic Pi has built-in support for chord names which will return lists. Try it "
"for yourself:"
msgstr ""
"Sonic Pi heeft ingebouwde ondersteuning voor akkoordnamen die lijsten zullen w"
"eergeven. Probeer dit voor jezelf:"

#: 08.2-Chords.md:8
#, no-wrap
msgid "play chord(:E3, :minor)"
msgstr "play chord(:E3, :minor)"

#: 08.2-Chords.md:12
msgid ""
"Now, we're really getting somewhere. That looks a lot more pretty than the raw"
" lists (and is easier to read for other people). So what other chords does Son"
"ic Pi support? Well, a *lot*. Try some of these:"
msgstr ""
"Nu komen we er. Dit ziet er veel beter uit dan de rauwe lijst (en is makkelijk"
"er te lezen voor andere mensen). Welke andere akkoorden ondersteund Sonic Pi n"
"og? Wel, een *hoop*. Probeer wat van deze:"

#: 08.2-Chords.md:16
msgid "`chord(:E3, :m7)`"
msgstr "`chord(:E3, :m7)`"

#: 08.2-Chords.md:17
msgid "`chord(:E3, :minor)`"
msgstr "`chord(:E3, :minor)`"

#: 08.2-Chords.md:18
msgid "`chord(:E3, :dim7)`"
msgstr "`chord(:E3, :dim7)`"

#: 08.2-Chords.md:19
msgid "`chord(:E3, :dom7)`"
msgstr "`chord(:E3, :dom7)`"

#: 08.2-Chords.md:21
msgid "Arpeggios"
msgstr "Arpeggio 's"

#: 08.2-Chords.md:23
msgid "We can easily turn chords into arpeggios with the function `play_pattern`:"
msgstr ""
"We kunnen gemakkelijk akkoorden in arpeggio's omzetten met de functie 'play_pa"
"ttern':"

#: 08.2-Chords.md:26
#, no-wrap
msgid "play_pattern chord(:E3, :m7)"
msgstr "play_pattern chord(:E3, :m7)"

#: 08.2-Chords.md:30
msgid ""
"Ok, that's not so fun - it played it really slowly. `play_pattern` will play e"
"ach note in the list separated with a call to `sleep 1` between each call to `"
"play`. We can use another function `play_pattern_timed` to specify our own tim"
"ings and speed things up:"
msgstr ""
"Ok, dit is niet zo fijn- het speelde het echt te traag. `play_pattern` zal elk"
"e noot van de lijst apart afspelen met een rust van `sleep 1` tussen elke opro"
"ep naar `play`. We kunnen de functie  `play_pattern_timed` gebruiken om een ei"
"gen timing aan te geven en het wat sneller te laten gaan:"

#: 08.2-Chords.md:35
#, no-wrap
msgid "play_pattern_timed chord(:E3, :m7), 0.25"
msgstr "play_pattern_timed chord(:E3, :m7), 0.25"

#: 08.2-Chords.md:39
msgid "We can even pass a list of times which it will treat as a circle of times:"
msgstr ""
"We kunnen zelfs een lijst met tijden doorgeven, welke als een tijdscirkel zull"
"en worden behandeld:"

#: 08.2-Chords.md:42
#, no-wrap
msgid "play_pattern_timed chord(:E3, :m13), [0.25, 0.5]"
msgstr "play_pattern_timed chord(:E3, :m13), [0.25, 0.5]"

#: 08.2-Chords.md:46
msgid "This is the equivalent to:"
msgstr "Dit is gelijk aan:"

#: 08.2-Chords.md:48
#, no-wrap
msgid ""
"play 52\n"
"sleep 0.25\n"
"play 55\n"
"sleep 0.5\n"
"play 59\n"
"sleep 0.25\n"
"play 62\n"
"sleep 0.5\n"
"play 66\n"
"sleep 0.25\n"
"play 69\n"
"sleep 0.5\n"
"play 73"
msgstr ""
"play 52\n"
"sleep 0.25\n"
"play 55\n"
"sleep 0.5\n"
"play 59\n"
"sleep 0.25\n"
"play 62\n"
"sleep 0.5\n"
"play 66\n"
"sleep 0.25\n"
"play 69\n"
"sleep 0.5\n"
"play 73"

#: 08.2-Chords.md:64
msgid "Which would you prefer to write?"
msgstr "Welke wil je liever schrijven?"

#: 08.3-Scales.md:1
msgid "8.3 Scales"
msgstr "8.3 Toonladders"

#: 08.3-Scales.md:3
msgid "Scales"
msgstr "Toonladders"

#: 08.3-Scales.md:5
msgid ""
"Sonic Pi has support for a wide range of scales. How about playing a C3 major "
"scale?"
msgstr ""
"Sonic Pi geeft ondersteuning aan een breed scala van toonladders. Wat dacht je"
" van de toonladder C3 majeur?"

#: 08.3-Scales.md:8
#, no-wrap
msgid "play_pattern_timed scale(:c3, :major), 0.125, release: 0.1"
msgstr "play_pattern_timed scale(:c3, :major), 0.125, release: 0.1"

#: 08.3-Scales.md:12
msgid "We can even ask for more octaves:"
msgstr "We kunnen zelfs meer octaven vragen:"

#: 08.3-Scales.md:14
#, no-wrap
msgid "play_pattern_timed scale(:c3, :major, num_octaves: 3), 0.125, release: 0.1"
msgstr "play_pattern_timed scale(:c3, :major, num_octaves: 3), 0.125, release: 0.1"

#: 08.3-Scales.md:18
msgid "How about all the notes in a pentatonic scale?"
msgstr "Wat dacht je van deze noten  in een pentatonische toonladder?"

#: 08.3-Scales.md:20
#, no-wrap
msgid ""
"play_pattern_timed scale(:c3, :major_pentatonic, num_octaves: 3), 0.125, relea"
"se: 0.1"
msgstr ""
"play_pattern_timed scale(:c3, :major_pentatonic, num_octaves: 3), 0.125, relea"
"se: 0.1"

#: 08.3-Scales.md:24
msgid "Random notes"
msgstr "Random noten"

#: 08.3-Scales.md:26
msgid ""
"Chords and scales are great ways of constraining a random choice to something "
"meaningful. Have a play with this example which picks random notes from the ch"
"ord E3 minor:"
msgstr ""
"Akkoorden en toonladders zijn een goede manieren om een willekeurige keuze tot"
" iets zinvols te beperken. Speel met dit voorbeeld dat willekeurige noten uitk"
"iest van het akkoord E3 mineur:"

#: 08.3-Scales.md:30
#, no-wrap
msgid ""
"use_synth :tb303\n"
"loop do\n"
"  play choose(chord(:E3, :minor)), release: 0.3, cutoff: rrand(60, 120)\n"
"  sleep 0.25\n"
"end"
msgstr ""
"use_synth :tb303\n"
"loop do\n"
"  play choose(chord(:E3, :minor)), release: 0.3, cutoff: rrand(60, 120)\n"
"  sleep 0.25\n"
"end"

#: 08.3-Scales.md:38
msgid "Try switching in different chord names and cutoff ranges."
msgstr "Probeer verschillende akkoordnamen en cutoff in te geven."

#: 08.3-Scales.md:40
msgid "Discovering Chords and Scales"
msgstr "Akkoorden en toonladders ontdekken"

#: 08.3-Scales.md:42
msgid ""
"To find out which scales and chords are supported by Sonic Pi simply click the"
" Lang button on the far left of this tutorial and then choose either chord or "
"scale in the API list. In the information in the main panel, scroll down until"
" you see a long list of chords or scales (depending on which you're looking at"
")."
msgstr ""
"Om erachter te komen welke toonladders en akkoorden worden ondersteund door So"
"nic Pi klikt u de knop Lang op het linkeruiteinde van deze tutorial en kies ve"
"rvolgens chord of scale in de lijst van de API. Scroll In de informatie van he"
"t hoofdpaneel naar beneden totdat u een lange lijst van akkoorden of schalen z"
"iet (afhankelijk van welke u zoekt)."

#: 08.3-Scales.md:48
msgid "Have fun and remember: there are no mistakes, only opportunities."
msgstr "Veel plezier en vergeet niet: er zijn geen fouten, alleen kansen."

#: 08.4-Rings.md:1
msgid "8.4 Rings"
msgstr "8.4 Ringen"

#: 08.4-Rings.md:3 A.11-beat-tracking.md:62
msgid "Rings"
msgstr "Ringen"

#: 08.4-Rings.md:5
msgid ""
"An interesting spin on standard lists are rings. If you know some programming,"
" you might have come across ring buffers or ring arrays. Here, we'll just go f"
"or ring - it's short and simple."
msgstr ""
"Een interessante draai aan standaard lijsten zijn ringen. Als u wat programmer"
"en weet, ben je misschien al ring buffers of ring array's tegengekomen. Hier g"
"aan we gewoon voor ring - het is kort en simpel."

#: 08.4-Rings.md:9
msgid ""
"In the previous section on lists we saw how we could fetch elements out of the"
"m by using the indexing mechanism:"
msgstr ""
"In de vorige sectie over lijsten zagen we al hoe we elementen door het indexee"
"r mechanisme uit hen konden halen:"

#: 08.4-Rings.md:16
msgid ""
"Now, what happens if you want index `100`? Well, there's clearly no element at"
" index 100 as the list has only three elements in it. So Sonic Pi will return "
"you `nil` which means nothing."
msgstr ""
"War gebeurd er nu als je `100` wil indexeren? Wel er is duidelijk geen element"
" bij index 100 daar de lijst enkel drie elementen bevat. Dus Sonic Pi zal `nil"
"` weergeven, wat niets betekent."

#: 08.4-Rings.md:20
msgid ""
"However, consider you have a counter such as the current beat which continuall"
"y increases. Let's create our counter and our list:"
msgstr ""
"Stel nu even dat je een teller hebt en dat deze jouw huidige beat is die in sn"
"elheid toeneemt. Lat ons deze teller en lijst aanmaken:"

#: 08.4-Rings.md:23
#, no-wrap
msgid ""
"counter = 0\n"
"notes = [52, 55, 59]"
msgstr ""
"counter = 0\n"
"notes = [52, 55, 59]"

#: 08.4-Rings.md:28
msgid "We can now use our counter to access a note in our list:"
msgstr ""
"We kunnen nu onze teller gebruiken om toegang te krijgen tot een noot in onze "
"lijst:"

#: 08.4-Rings.md:30
#, no-wrap
msgid "puts notes[counter]"
msgstr "puts notes[counter]"

#: 08.4-Rings.md:34
msgid "Great, we got `52`. Now, let's increment our counter and get another note:"
msgstr ""
"Geweldig, we hebben `52`. Nu, laten we onze teller verhogen en krijg een ander"
"e noot:"

#: 08.4-Rings.md:37
#, no-wrap
msgid ""
"counter = (inc counter)\n"
"puts notes[counter]"
msgstr ""
"counter = (inc counter)\n"
"puts notes[counter]"

#: 08.4-Rings.md:42
msgid ""
"Super, we now get `55` and if we do it again we get `59`. However, if we do it"
" again, we'll run out of numbers in our list and get `nil`. What if we wanted "
"to just loop back round and start at the beginning of the list again? This is "
"what rings are for."
msgstr ""
"Super, we krijgen nu `55` en als wij het opnieuw doen krijgen we `59`. Als wij"
" het nogmaals doen, raken onze cijfer op in onze lijst en krijgen we `nil`. Wa"
"t als we bij het begin van de lijst weer willen beginnen? Dit is wat waar ring"
"en voor zijn."

#: 08.4-Rings.md:47
msgid "Creating Rings"
msgstr "Ringen maken"

#: 08.4-Rings.md:49
msgid ""
"We can create rings one of two ways. Either we use the `ring` function with th"
"e elements of the ring as parameters:"
msgstr ""
"We kunnen ringen op twee manieren maken. We kunnen de `ring` functie gebruiken"
" met de elementen van de ring als parameters:"

#: 08.4-Rings.md:52
#, no-wrap
msgid "(ring 52, 55, 59)"
msgstr "(ring 52, 55, 59)"

#: 08.4-Rings.md:56
msgid ""
"Or we can take a normal list and convert it to a ring by sending it the `.ring"
"` message:"
msgstr ""
"Of we kunnen een normale lijst nemen en deze naar een ring omzetten door naar "
"deze een `.ring` bericht te zenden :"

#: 08.4-Rings.md:59
#, no-wrap
msgid "[52, 55, 59].ring"
msgstr "[52, 55, 59].ring"

#: 08.4-Rings.md:63
msgid "Indexing Rings"
msgstr "Ringen Indexeren"

#: 08.4-Rings.md:65
msgid ""
"Once we have a ring, you can use it in exactly the same way you would use a no"
"rmal list with the exception that you can use indexes that are negative or lar"
"ger than the size of the ring and they'll wrap round to always point at one of"
" the ring's elements:"
msgstr ""
"Eens we een ring hebben, kan je deze op exact de zelfde manier als gewone lijs"
"ten gebruiken met uitzondering dat je indexen kunt gebruiken die negatief zijn"
" of groter dan de grootte van de ring, en altijd naar één van de elementen van"
" de ring zullen omslaan:"

#: 08.4-Rings.md:70
#, no-wrap
msgid ""
"(ring 52, 55, 59)[0] #=> 52\n"
"(ring 52, 55, 59)[1] #=> 55\n"
"(ring 52, 55, 59)[2] #=> 59\n"
"(ring 52, 55, 59)[3] #=> 52\n"
"(ring 52, 55, 59)[-1] #=> 59"
msgstr ""
"(ring 52, 55, 59)[0] #=> 52\n"
"(ring 52, 55, 59)[1] #=> 55\n"
"(ring 52, 55, 59)[2] #=> 59\n"
"(ring 52, 55, 59)[3] #=> 52\n"
"(ring 52, 55, 59)[-1] #=> 59"

#: 08.4-Rings.md:78
msgid "Using Rings"
msgstr "Ringen Gebruiken"

#: 08.4-Rings.md:80
msgid ""
"Let's say we're using a variable to represent the current beat number. We can "
"use this as an index into our ring to fetch notes to play, or release times or"
" anything useful we've stored in our ring regardless of the beat number we're "
"currently on."
msgstr ""
"Laten we zeggen dat we een variabele gebruiken om het nummer van de huidige be"
"at te vertegenwoordigen. We kunnen dit als een index in onze ring  gebruiken o"
"m noten te halen om te spelen of release tijden of alles wat nuttig zou kunnen"
" zijn en we hebben opgeslagen in onze ring ongeacht het beat nummer dat we mom"
"enteel hebben."

#: 08.4-Rings.md:85
msgid "Scales and Chords are Rings"
msgstr "Toonladders en Akkoorden zijn ringen"

#: 08.4-Rings.md:87
msgid ""
"A useful thing to know is that the lists returned by `scale` and `chord` are a"
"lso rings and allow you to access them with arbitrary indexes."
msgstr ""
"Handig om weten is dat de lijsten door `scale` en de `chord` opgeroepen, ook r"
"ingen zijn en jou toelaten willekeurige indexen te openen."

#: 08.4-Rings.md:90
msgid "Ring Constructors"
msgstr "Ring Bouwers"

#: 08.4-Rings.md:92
msgid ""
"In addition to `ring` there are a number of other functions which will constru"
"ct a ring for us."
msgstr ""
"Naast de `ring` zijn er een aantal andere functies die een ring voor ons zulle"
"n bouwen."

#: 08.4-Rings.md:95
msgid "`range` invites you specify a starting point, end point and step size."
msgstr ""
"`range`nodigt je uit om een start en een eindpositie op te geven en de grootte"
" van de stappen."

#: 08.4-Rings.md:96
msgid "`bools` allows you to use `1`s and `0`s to succinctly represent booleans."
msgstr ""
"`bools` laten het gebruik van `1`s en `0`s om beknopte booleaans te vertegenwo"
"ordigen."

#: 08.4-Rings.md:97
msgid "`knit` allows you to knit a sequence of repeated values."
msgstr "`knit` laat jou een sequentie met repeterende waarden breien."

#: 08.4-Rings.md:98
msgid "`spread` creates a ring of bools with a Euclidean distribution."
msgstr "`spread` creëert een ring van een boleaanse met een Euclidische distributie."

#: 08.4-Rings.md:100
msgid "Take a look at their respective documentation for more information."
msgstr ""
"Neem een kijkje naar hun respectievelijke documentatie voor meer informatie hi"
"erover."

#: 08.5-Ring-Chains.md:1
msgid "8.5 Ring Chains"
msgstr "8.5 Ring Kettingen"

#: 08.5-Ring-Chains.md:3
msgid "Ring Chains"
msgstr "Ring Kettingen"

#: 08.5-Ring-Chains.md:5
msgid ""
"In addition to the constructors such as `range` and `spread` another way of cr"
"eating new rings is to manipulate existing rings."
msgstr ""
"Als toevoeging tot de bouwers zoals `range`en `spread`is het manipuleren van b"
"estaande ringen, een andere manier om nieuwe ringen te maken."

#: 08.5-Ring-Chains.md:9
msgid "Chain Commands"
msgstr "Ketting Commando's"

#: 08.5-Ring-Chains.md:11
msgid "To explore this, take a simple ring:"
msgstr "Neem deze eenvoudige ring om dit te verkennen:"

#: 08.5-Ring-Chains.md:13
#, no-wrap
msgid "(ring 10, 20, 30, 40, 50)"
msgstr "(ring 10, 20, 30, 40, 50)"

#: 08.5-Ring-Chains.md:17
msgid ""
"What if we wanted it backwards? Well we'd use the chain command `.reverse` to "
"take the ring and turn it around:"
msgstr ""
"Wat als we deze andersom willen? Dan kunnen we het chain commando `.reverse ne"
"men om de ring om te draaien:"

#: 08.5-Ring-Chains.md:20
#, no-wrap
msgid "(ring 10, 20, 30, 40, 50).reverse  #=> (ring 50, 40, 30, 20, 10)"
msgstr "(ring 10, 20, 30, 40, 50).reverse  #=> (ring 50, 40, 30, 20, 10)"

#: 08.5-Ring-Chains.md:24
msgid "Now, what if we wanted the first three values from the ring?"
msgstr "En wat als we de eerste drie waarden van de ring willen nemen?"

#: 08.5-Ring-Chains.md:26
#, no-wrap
msgid "(ring 10, 20, 30, 40, 50).take(3)  #=> (ring 10, 20, 30)"
msgstr "(ring 10, 20, 30, 40, 50).take(3)  #=> (ring 10, 20, 30)"

#: 08.5-Ring-Chains.md:30
msgid "Finally, what if we wanted to shuffle the ring?"
msgstr "En wat als we de ring willen verschuiven?"

#: 08.5-Ring-Chains.md:32
#, no-wrap
msgid "(ring 10, 20, 30, 40, 50).shuffle  #=> (ring 40, 30, 10, 50, 20)"
msgstr "(ring 10, 20, 30, 40, 50).shuffle  #=> (ring 40, 30, 10, 50, 20)"

#: 08.5-Ring-Chains.md:36
msgid "Multiple Chains"
msgstr "Meerdere Kettingen"

#: 08.5-Ring-Chains.md:38
msgid ""
"This is already a powerful way of creating new rings. However, the *real* powe"
"r comes when you chain a few of these commands together."
msgstr ""
"Dit is al een krachtige manier om nieuwe ringen te creëren. De *echte* kracht "
"komt wanneer je een paar van deze opdrachten samen chaint."

#: 08.5-Ring-Chains.md:41
msgid "How about shuffling the ring, dropping 1 element and then taking the next 3?"
msgstr ""
"Wat denk je ervan de ring te shuffelen, 1 element te laten vallen en vervolgen"
"s de volgende 3 te nemen?"

#: 08.5-Ring-Chains.md:43
msgid "Let's take this in stages:"
msgstr "Laten we dit in fasen doen:"

#: 08.5-Ring-Chains.md:45
msgid "`(ring 10, 20, 30, 40, 50)` - our initial ring"
msgstr "`(ring 10, 20, 30, 40, 50)` - our initial ring"

#: 08.5-Ring-Chains.md:46
msgid "`(ring 10, 20, 30, 40, 50).shuffle` - shuffles - `(ring 40, 30, 10, 50, 20)`"
msgstr "`(ring 10, 20, 30, 40, 50).shuffle` - shuffles - `(ring 40, 30, 10, 50, 20)`"

#: 08.5-Ring-Chains.md:47
msgid "`(ring 10, 20, 30, 40, 50).shuffle.drop(1)` - drop 1 - `(ring 30, 10, 50, 20)`"
msgstr "`(ring 10, 20, 30, 40, 50).shuffle.drop(1)` - drop 1 - `(ring 30, 10, 50, 20)`"

#: 08.5-Ring-Chains.md:48
msgid ""
"`(ring 10, 20, 30, 40, 50).shuffle.drop(1).take(3)` - take 3 - `(ring 30, 10, "
"50)`"
msgstr ""
"`(ring 10, 20, 30, 40, 50).shuffle.drop(1).take(3)` - take 3 - `(ring 30, 10, "
"50)`"

#: 08.5-Ring-Chains.md:50
msgid ""
"Can you see how we can just create a long chain of these methods by just *stic"
"king them together*. We can combine these in any order we want creating an ext"
"remely rich and powerful way of generating new rings from existing ones."
msgstr ""
"Kan je nu zien dat we een lange ketting van deze methoden kunnen gebruiken doo"
"r deze *bij elkaar te plakken*. We kunnen deze in eender welke volgorde combin"
"eren en ontwikkellen hierbij een uiterst rijke en krachtige manier om nieuwe r"
"ingen van bestaande ringen te creëren."

#: 08.5-Ring-Chains.md:55
msgid "Immutability"
msgstr "Onveranderbaarheid"

#: 08.5-Ring-Chains.md:57
msgid ""
"These rings have a powerful and important property. They are immutable which m"
"eans that they can not change. This means that the chaining methods described "
"in this section *do not change rings* rather they *create new rings*. This mea"
"ns you're free to share rings across threads and start chaining them within a "
"thread knowing you won't be affecting any other thread using the same ring."
msgstr ""
"Deze ringen hebben een krachtige en belangrijke eigenschap. Ze zijn onverander"
"lijk wat betekent dat je ze niet kunt veranderen. Dit betekent dat de chaining"
" methode die in deze sectie beschreven word *ringen niet veranderd* maar eerde"
"r *nieuwe ringen maakt*. Dit betekent dat u vrij bent om te ringen te delen me"
"t threads en je hen kan beginnen chainen binnen een thread met de wetenschap d"
"at je geen andere thread zal beïnvloeden die gebruik maakt van dezelfde ring."

#: 08.5-Ring-Chains.md:64
msgid "Available Chain Methods"
msgstr "Beschikbare Chain Methoden"

#: 08.5-Ring-Chains.md:66
msgid "Here's a list of the available chain methods for you to play with:"
msgstr "Hier is een lijst van de beschikbare chain methoden voor jou om mee te spelen:"

#: 08.5-Ring-Chains.md:68
msgid "`.reverse` - returns a reversed version of the ring"
msgstr "'.reverse' - geeft een omgekeerde versie van de ring"

#: 08.5-Ring-Chains.md:69
msgid "`.sort` - creates a sorted version of the ring"
msgstr "'.sort' - creëert een gesorteerde versie van de ring"

#: 08.5-Ring-Chains.md:70
msgid "`.shuffle` - creates a shuffled version of the ring"
msgstr "'.shuffle' - creëert een geshuffelde versie van de ring"

#: 08.5-Ring-Chains.md:71
#, fuzzy
msgid "`.pick` - returns a ring with the results of calling `.choose` once"
msgstr "'.pick(3)' - geeft een ring met de resultaten van de aanroep `.choose` 3 keer"

#: 08.5-Ring-Chains.md:72
msgid "`.pick(3)` - returns a ring with the results of calling `.choose` 3 times"
msgstr "'.pick(3)' - geeft een ring met de resultaten van de aanroep `.choose` 3 keer"

#: 08.5-Ring-Chains.md:73
msgid "`.take(5)` - returns a new ring containing only the first 5 elements"
msgstr ""
"'.take(5)' - geeft als resultaat een nieuwe ring die alleen eerste 5 elementen"
" bevat"

#: 08.5-Ring-Chains.md:74
msgid "`.drop(3)` - returns a new ring with everything but the first 3 elements"
msgstr ""
"'.drop(3)' - geeft als resultaat een nieuwe ring met alles behalve de eerste 3"
" elementen"

#: 08.5-Ring-Chains.md:75
msgid "`.butlast` - returns a new ring with the last element missing"
msgstr ""
"'.butlast' - geeft als resultaat een nieuwe ring maar ontbreekt het laatste el"
"ement"

#: 08.5-Ring-Chains.md:76
msgid "`.drop_last(3)` - returns a new ring with the last 3 elements missing"
msgstr ""
"'.drop_last(3)' - geeft als resultaat een nieuwe ring maar de laatste 3 elemen"
"ten ontbreken"

#: 08.5-Ring-Chains.md:77
msgid "`.take_last(6)`- returns a new ring with only the last 6 elements"
msgstr ""
"'.take_last(6)'-geeft als resultaat een nieuwe ring met alleen de laatste 6 el"
"ementen"

#: 08.5-Ring-Chains.md:78
msgid "`.stretch(2)` - repeats each element in the ring twice"
msgstr "'.stretch(2)' - herhaald tweemaal elk element in de ring"

#: 08.5-Ring-Chains.md:79
msgid "`.repeat(3)` - repeats the entire ring 3 times"
msgstr "'.repeat(3)' - herhaalt de hele ring 3 keer"

#: 08.5-Ring-Chains.md:80
msgid "`.mirror` - adds the ring to a reversed version of itself"
msgstr "'.mirror' - voegt de ring naar een omgekeerde versie van zichzelf toe"

#: 08.5-Ring-Chains.md:81
msgid "`.reflect` - same as mirror but doesn't duplicate middle value"
msgstr ""
"'.reflect' - hetzelfde als spiegel maar middelste waarde wordt niet geduplicee"
"rd"

#: 08.5-Ring-Chains.md:82
msgid ""
"`.scale(2)` - returns a new ring with all elements multiplied by 2 (assumes ri"
"ng contains numbers only)"
msgstr ""
"`.scale(2)`- geeft een nieuwe ring met alle elementen, maal 2 (van uitgegaan d"
"at ring alleen cijfers bevat)"

#: 08.5-Ring-Chains.md:84
msgid ""
"Of course, those chain methods that take numbers can take other numbers too! S"
"o feel free to call `.drop(5)` instead of `.drop(3)` if you want to drop the f"
"irst 5 elements."
msgstr ""
"Natuurlijk, kan je in deze chain methoden ook andere cijfers gebruiken! Dus vo"
"el je vrij om `.drop(5)` in plaats van `.drop(3)` als je de eerste 5 elementen"
" wilt laten vallen."

#: 09-Live-Coding.md:1
msgid "9 Live Coding"
msgstr "9 Live Codering"

#: 09-Live-Coding.md:5
msgid ""
"One of the most exciting aspects of Sonic Pi is that it enables you to write a"
"nd modify code live to make music, just like you might perform live with a gui"
"tar. One advantage of this approach is to give you more feedback whilst compos"
"ing (get a simple loop running and keep tweaking it till it sounds just perfec"
"t). However, the main advantage is that you can take Sonic Pi on stage and gig"
" with it."
msgstr ""
"Éen van de meest opwindende aspecten van Sonic Pi is dat je live code kan schr"
"ijven en deze veranderd om muziek te spelen, net zoals je zou optreden met je "
"gitaar. Een voordeel van deze aanpak is dat je meer feedback krijgt terwijl je"
" componeert (je kaan een simpele code loop laten lopen en deze tweaken tot dez"
"e perfect klinkt).  Het belangrijkste voordeel is echter dat u Sonic Pi op het"
" podium mee kunt nemen en kan optreden."

#: 09-Live-Coding.md:12
msgid ""
"In this section we'll cover the fundamentals of turning your static code compo"
"sitions into dynamic performances."
msgstr ""
"In deze sectie zullen we de fundamenten bespreken hoe je je statische code kan"
" omvormen tot een dynamische voorstelling."

#: 09-Live-Coding.md:15
msgid "Hold on to your seats..."
msgstr "Zit je goed? ..."

#: 09.1-Live-Coding-Fundamentals.md:1
msgid "9.1 Live Coding Fundamentals"
msgstr "9.1 De Grondslagen van Live Codering"

#: 09.1-Live-Coding-Fundamentals.md:5
msgid ""
"Now we've learned enough to really start having some fun. In this section we'l"
"l draw from all the previous sections and show you how you can start making yo"
"ur music compositions live and turning them into a performance. For that we'll"
" need 3 main ingredients:"
msgstr ""
"Nu hebben we genoeg geleerd en kan het echte plezier beginnen. In deze sectie "
"trekken we uit alle vorige secties zaken die jou laten zien hoe je je composit"
"ies tot live muziek kan maken en ze in een voorstelling kan omtoveren. Daarvoo"
"r hebben we 3 hoofd ingrediënten nodig:"

#: 09.1-Live-Coding-Fundamentals.md:10
msgid "An ability to write code that makes sounds - CHECK!"
msgstr "Code kunnen schrijven dat geluiden kan voortbrengen - CHECK!"

#: 09.1-Live-Coding-Fundamentals.md:11
msgid "An ability to write functions - CHECK!"
msgstr "Functies kunnen schrijven - CHECK!"

#: 09.1-Live-Coding-Fundamentals.md:12
msgid "An ability to use (named) threads - CHECK!"
msgstr "(benoemde) Threads kunnen gebruiken - CHECK!"

#: 09.1-Live-Coding-Fundamentals.md:14
msgid ""
"Alrighty, let's get started. Let's live code our first sounds. We first need a"
" function containing the code we want to play. Let's start simple. We also wan"
"t to loop calls to that function in a thread:"
msgstr ""
"We gaan aan de slag. We coderen onze eerste geluiden. We moeten eerst een func"
"tie hebben met de code die we willen spelen. Laten we eenvoudig beginnen. Wij "
"willen ook loops oproepen die in een thread functioneren:"

#: 09.1-Live-Coding-Fundamentals.md:18
#, no-wrap
#, fuzzy
msgid ""
"define :my_sound do\n"
"  play 50\n"
"  sleep 1\n"
"end\n"
"in_thread(name: :looper) do\n"
"  loop do\n"
"    my_sound\n"
"  end\n"
"end"
msgstr ""
"define :my_loop do\n"
"  play 50\n"
"  sleep 1\n"
"end\n"
"in_thread(name: :looper) do\n"
"  loop do\n"
"    my_loop\n"
"  end\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:31
msgid ""
"If that looks a little too complicated to you, go back and re-read the section"
"s on functions and threads. It's not too complicated if you've already wrapped"
" your head around these things."
msgstr ""
"Als dat een beetje te ingewikkeld voor je lijkt, ga dan even terug en herlees "
"de passages over functies en threads. Het is niet al te ingewikkeld nu je je a"
"l in deze zaken verdiept hebt."

#: 09.1-Live-Coding-Fundamentals.md:35
#, fuzzy
msgid ""
"What we have here is a function definition which just plays note 50 and sleeps"
" for a beat. We then define a named thread called `:looper` which just loops a"
"round calling `my_sound` repeatedly."
msgstr ""
"Wat we hier hebben is een functiedefinitie dat gewoon noot 50 speelt en een be"
"at slaapt. Vervolgens definiëren we een benoemde thread genaamd `:looper` die "
"herhaaldelijk rond `my_loop` loopt."

#: 09.1-Live-Coding-Fundamentals.md:39
msgid "If you run this code, you'll hear note 50 repeating again and again..."
msgstr ""
"Als u deze code uitvoert, zult je noot 50 altijd opnieuw en opnieuw horen spel"
"en..."

#: 09.1-Live-Coding-Fundamentals.md:41
msgid "Changing it up"
msgstr "Veranderingen aanbrengen"

#: 09.1-Live-Coding-Fundamentals.md:43
msgid ""
"Now, this is where the fun starts. Whilst the code is *still running* change 5"
"0 to another number, say 55, then press the Run button again. Woah! It changed"
"! Live!"
msgstr ""
"Nu, hier is waar de pret begint. Terwijl de code *nog loopt* wijzigen 50 naar "
"een ander nummer, zeg 55, druk nogmaals op de knop afspelen. Woah! Het verande"
"rd! Live!"

#: 09.1-Live-Coding-Fundamentals.md:47
#, fuzzy
msgid ""
"It didn't add a new layer because we're using named threads which only allow o"
"ne thread for each name. Also, the sound changed because we *redefined* the fu"
"nction. We gave `:my_sound` a new definition. When the `:looper` thread looped"
" around it simply called the new definition."
msgstr ""
"Het heeft geen nieuwe laag toegevoegd omdat we benoemde threads gebruiken, die"
" voor elke naam één thread toestaat. De klank veranderde ook omdat we de funct"
"ie hebben *geherdefinieerd*. We gaven `:my_loop` een nieuwe definitie. Wanneer"
" de `:looper` thread rond Loopt riep deze de nieuwe definitie op."

#: 09.1-Live-Coding-Fundamentals.md:52
msgid ""
"Try changing it again, change the note, change the sleep time. How about addin"
"g a `use_synth` statement? For example, change it to:"
msgstr ""
"Probeer het opnieuw te wijzigen, verander de noot, de rusttijd. Hoe zit het me"
"t het toevoegen van het `use_synth` statement? Verander het bijvoorbeeld naar:"

#: 09.1-Live-Coding-Fundamentals.md:55
#, no-wrap
#, fuzzy
msgid ""
"define :my_sound do\n"
"  use_synth :tb303\n"
"  play 50, release: 0.3\n"
"  sleep 0.25\n"
"end"
msgstr ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play 50, release: 0.3\n"
"  sleep 0.25\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:63
msgid ""
"Now it sounds pretty interesting, but we can spice it up further. Instead of p"
"laying the same note again and again, try playing a chord:"
msgstr ""
"Nu het klinkt erg interessant, maar we kunnen het verder verlevendigen. In pla"
"ats van dezelfde noot opnieuw en opnieuw te spelen, speel een akkoord:"

#: 09.1-Live-Coding-Fundamentals.md:67
#, no-wrap
#, fuzzy
msgid ""
"define :my_sound do\n"
"  use_synth :tb303\n"
"  play chord(:e3, :minor), release: 0.3\n"
"  sleep 0.5\n"
"end"
msgstr ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play chord(:e3, :minor), release: 0.3\n"
"  sleep 0.5\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:75
msgid "How about playing random notes from the chord:"
msgstr "Wat denk je van random noten van het akkoord te spelen:"

#: 09.1-Live-Coding-Fundamentals.md:77
#, no-wrap
#, fuzzy
msgid ""
"define :my_sound do\n"
"  use_synth :tb303\n"
"  play choose(chord(:e3, :minor)), release: 0.3\n"
"  sleep 0.25\n"
"end"
msgstr ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play choose(chord(:e3, :minor)), release: 0.3\n"
"  sleep 0.25\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:85
msgid "Or using a random cutoff value:"
msgstr "Of met behulp van een willekeurige cutoff waarde:"

#: 09.1-Live-Coding-Fundamentals.md:87
#, no-wrap
#, fuzzy
msgid ""
"define :my_sound do\n"
"  use_synth :tb303\n"
"  play choose(chord(:e3, :minor)), release: 0.2, cutoff: rrand(60, 130)\n"
"  sleep 0.25\n"
"end"
msgstr ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play choose(chord(:e3, :minor)), release: 0.2, cutoff: rrand(60, 130)\n"
"  sleep 0.25\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:95
msgid "Finally, add some drums:"
msgstr "Ten slotte, voeg enkele drums toe:"

#: 09.1-Live-Coding-Fundamentals.md:97
#, no-wrap
#, fuzzy
msgid ""
"define :my_sound do\n"
"  use_synth :tb303\n"
"  sample :drum_bass_hard, rate: rrand(0.5, 2)\n"
"  play choose(chord(:e3, :minor)), release: 0.2, cutoff: rrand(60, 130)\n"
"  sleep 0.25\n"
"end"
msgstr ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  sample :drum_bass_hard, rate: rrand(0.5, 2)\n"
"  play choose(chord(:e3, :minor)), release: 0.2, cutoff: rrand(60, 130)\n"
"  sleep 0.25\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:106
msgid "Now things are getting exciting!"
msgstr "Nu word het steeds spannender!"

#: 09.1-Live-Coding-Fundamentals.md:108
msgid ""
"However, before you jump up and start live coding with functions and threads, "
"stop what you're doing and read the next section on `live_loop` which will cha"
"nge the way you code in Sonic Pi forever..."
msgstr ""
"Maar voor je recht springt en je begint te live coden met functies en threads,"
" stop met wat je doet en lees de volgende sectie over `live_loop` wat de manie"
"r van coderen in Sonic Pi voor eeuwig zal veranderen..."

#: 09.2-Live-Loops.md:1
msgid "9.2 Live Loops"
msgstr "9.2 Live Loops"

#: 09.2-Live-Loops.md:3
msgid "Live Loops"
msgstr "Live Loops"

#: 09.2-Live-Loops.md:5
msgid ""
"Ok, so this section of the tutorial is the real gem. If you only read one sect"
"ion, it should be this one. If you read the previous section on Live Coding Fu"
"ndamentals, `live_loop` is a simple way of doing exactly that but without havi"
"ng to write so much."
msgstr ""
"OK, dus dit gedeelte van de handleiding is de echte parel. Als je maar één ged"
"eelte zou kunnen lezen, zou het deze moeten zijn. Als je de vorige sectie van "
"Live codering grondbeginselen leest, is 'live_loop' een eenvoudige manier om p"
"recies dat te bereiken, maar zonder zo veel code te hoeven schrijven."

#: 09.2-Live-Loops.md:10
msgid ""
"If you didn't read the previous section, `live_loop` is the best way to jam wi"
"th Sonic Pi."
msgstr ""
"Als je de vorige sectie niet gelezen hebt,  `live_loop` is de beste manier om "
" met Sonic Pi te jammen."

#: 09.2-Live-Loops.md:13
msgid "Let's play. Write the following in a new buffer:"
msgstr "Laten we hiermee even spelen. Schrijf het volgende in een nieuwe buffer:"

#: 09.2-Live-Loops.md:15
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play 60\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  play 60\n"
"  sleep 1\n"
"end"

#: 09.2-Live-Loops.md:22
msgid ""
"Now press the Run button. You hear a basic beep every beat. Nothing fun there."
" However, don't press Stop just yet. Change the `60` to `65` and press Run aga"
"in."
msgstr ""
"Druk op de afspeel knop. Je hoort elke tel een zelfde basis bliep. Niks opwind"
"end aan. Maar druk nog niet op Stop. Verander de `60` naar `65` en druk terug "
"op Afspelen."

#: 09.2-Live-Loops.md:26
msgid "Woah! It changed *automatically* without missing a beat. This is live coding."
msgstr ""
"Woeha! Het veranderde *automatisch* zonder een tel te missen. Dit is Live Codi"
"ng."

#: 09.2-Live-Loops.md:28
msgid ""
"Why not change it to be more bass like? Just update your code whilst it's play"
"ing:"
msgstr ""
"Waarom deze niet veranderen aar iets meer Bass-achtig? Gewoon je code updaten "
"terwijl het speelt:"

#: 09.2-Live-Loops.md:30
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :e1, release: 8\n"
"  sleep 8\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :e1, release: 8\n"
"  sleep 8\n"
"end"

#: 09.2-Live-Loops.md:38
msgid "Then hit Run."
msgstr "Sla Afspelen aan."

#: 09.2-Live-Loops.md:40
msgid "Let's make the cutoff move around:"
msgstr "Laten we de cutoff wat rond-bewegen:"

#: 09.2-Live-Loops.md:42
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :e1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :e1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"

#: 09.2-Live-Loops.md:50
msgid "Hit Run again."
msgstr "Sla Afspelen opnieuw aan."

#: 09.2-Live-Loops.md:52
msgid "Add some drums:"
msgstr "Voeg wat drums toe:"

#: 09.2-Live-Loops.md:54
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  sample :loop_garzul\n"
"  use_synth :prophet\n"
"  play :e1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  sample :loop_garzul\n"
"  use_synth :prophet\n"
"  play :e1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"

#: 09.2-Live-Loops.md:63
msgid "Change the note from `e1` to `c1`:"
msgstr "Verander de noot van `e1` naar `c1`:"

#: 09.2-Live-Loops.md:65
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  sample :loop_garzul\n"
"  use_synth :prophet\n"
"  play :c1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  sample :loop_garzul\n"
"  use_synth :prophet\n"
"  play :c1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"

#: 09.2-Live-Loops.md:74
msgid "Now stop listening to me and play around yourself! Have fun!"
msgstr "Stop nu met naar mij te luisteren en ga zelf aan de slag! Veel plezier!"

#: 09.3-Multiple-Live-Loops.md:1
msgid "9.3 Multiple Live Loops"
msgstr "9.3 Meerdere Live Loops"

#: 09.3-Multiple-Live-Loops.md:3
msgid "Multiple Live Loops"
msgstr "Meerdere Live Loops"

#: 09.3-Multiple-Live-Loops.md:5
msgid "Consider the following live loop:"
msgstr "Beschouw even de volgende code:"

#: 09.3-Multiple-Live-Loops.md:7
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play 50\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  play 50\n"
"  sleep 1\n"
"end"

#: 09.3-Multiple-Live-Loops.md:14
msgid ""
"You may have wondered why it needs the name `:foo`. This name is important bec"
"ause it signifies that this live loop is different from all other live loops."
msgstr ""
"Je kan je al afgevraagd hebben waarom het de naam `: foo` moet zijn. Deze naam"
" is belangrijk, omdat het betekent dat deze live loop van de andere live loops"
" verschilt."

#: 09.3-Multiple-Live-Loops.md:18
msgid "*There can never be two live loops running with the same name*."
msgstr "*Er kunnen nooit twee live loops met de zelfde naam afspelen*."

#: 09.3-Multiple-Live-Loops.md:20
msgid ""
"This means that if we want multiple concurrently running live loops, we just n"
"eed to give them different names:"
msgstr ""
"Dit betekent dat als we willen dat meerdere live loops gelijktijdig willen uit"
" voeren, moeten we ze gewoon een andere naam geven:"

#: 09.3-Multiple-Live-Loops.md:23
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :c1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :c1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"

#: 09.3-Multiple-Live-Loops.md:36
msgid ""
"You can now update and change each live loop independently and it all just wor"
"ks."
msgstr ""
"Je kan nu  elke live loop onafhankelijk van elkaar wijzigen en updaten en het "
"werkt gewoon allemaal."

#: 09.3-Multiple-Live-Loops.md:39
msgid "Syncing Live Loops"
msgstr "Synchroniseren van Live Loops"

#: 09.3-Multiple-Live-Loops.md:41
msgid ""
"One thing you might have already noticed is that live loops work automatically"
" with the thread cue mechanism we explored previously. Every time the live loo"
"p loops, it generates a new `cue` event with the name of the live loop. We can"
" therefore `sync` on these cues to ensure our loops are in sync without having"
" to stop anything."
msgstr ""
"Wat je misschien al opgevallen is is dat live loops automatisch met het thread"
" cue mechanisme werkt dat we al verkend hebben. Elke keer een live loop afspee"
"lt genereert deze een nieuw cue gebeuren met de live loop's naam. We kunnen da"
"arom op deze cue's sync-en om ons ervan te verzekeren dat onze loops in sync l"
"open zonder we daarvoor iets moeten gaan stoppen."

#: 09.3-Multiple-Live-Loops.md:47
msgid "Consider this badly synced code:"
msgstr "Beschouw even deze slecht gesyncte code:"

#: 09.3-Multiple-Live-Loops.md:49
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.4\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.4\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"

#: 09.3-Multiple-Live-Loops.md:61
msgid ""
"Let's see if we can fix the timing and sync without stopping it. First, let's "
"fix the `:foo` loop to make the sleep a factor of 1 - something like `0.5` wil"
"l do:"
msgstr ""
"Laten we eens kijken als we de timing en synchronisatie kunnen verhelpen zonde"
"r deze te stoppen. Laten we eerst de `:foo` loop fixen en de sleep factor 1 ve"
"randeren naar `0.5` :"

#: 09.3-Multiple-Live-Loops.md:65
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"

#: 09.3-Multiple-Live-Loops.md:77
msgid ""
"We're not quite finished yet though - you'll notice that the beats don't quite"
" line up correctly. This is because the loops are *out of phase*. Let's fix th"
"at by syncing one to the other:"
msgstr ""
"We zijn nog niet helemaal klaar -je zult merken dat de beats niet helemaal cor"
"rect samenlopen. Dit komt omdat de loops *uit fase* spelen. Laten we dat verhe"
"lpen door de ene aan de andere te synchroniseren:"

#: 09.3-Multiple-Live-Loops.md:81
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :bar do\n"
"  sync :foo\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :bar do\n"
"  sync :foo\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"

#: 09.3-Multiple-Live-Loops.md:94
msgid "Wow, everything is now perfectly in time - all without stopping."
msgstr "Wow,  nu is alles perfect in tijd - allemaal zonder te stoppen."

#: 09.3-Multiple-Live-Loops.md:96
msgid "Now, go forth and live code with live loops!"
msgstr "Ga nu door met je live code en live loops!"

#: 09.4-Ticking.md:1
msgid "9.4 Ticking"
msgstr "9.4 Ticking"

#: 09.4-Ticking.md:3
msgid "Ticking"
msgstr "Ticking"

#: 09.4-Ticking.md:5
msgid ""
"Something you'll likely find yourself doing a lot when live coding is looping "
"through rings. You'll be putting notes into rings for melodies, sleeps for rhy"
"thms, chord progressions, timbral variations, etc. etc."
msgstr ""
"Soms heb je best veel werk, zo lijkt het, wanneer er veel code door een ring l"
"oopt. Je zal noten in rings steken voor melodieën, rusttijden (sleep) bij ritm"
"es, akkoordenschema's, variaties op het timbre, enz. enz."

#: 09.4-Ticking.md:9
msgid "Ticking Rings"
msgstr "Tick Ringen"

#: 09.4-Ticking.md:11
msgid ""
"Sonic Pi provides a *very* handy tool for working with rings within `live_loop"
"`s. It's called the tick system. In the section about the rings we were talkin"
"g about the counter that is constantly increasing, like a current beat number."
" Tick just implements this idea. It provides you with the ability to *tick thr"
"ough rings*. Let's look at an example:"
msgstr ""
"Sonic Pi biedt een *zeer* handig hulpmiddel voor het werken met ringen binnen "
"`live_loop`s. Het heet het tick systeem. In de sectie over de ringen spraken w"
"e over de teller die constant verhoogt, zoals een weergave van de huidige tel "
". Tick voert het zelfde idee uit. Het biedt u de mogelijkheid om te *doorheen "
"ringen te tikken*. Laten we eens kijken naar een voorbeeld:"

#: 09.4-Ticking.md:17
#, no-wrap
msgid ""
"counter = 0\n"
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic)[counter], release: 0.1\n"
"  counter += 1\n"
"  sleep 0.125\n"
"end"
msgstr ""
"counter = 0\n"
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic)[counter], release: 0.1\n"
"  counter += 1\n"
"  sleep 0.125\n"
"end"

#: 09.4-Ticking.md:26
msgid "This is equivalent to:"
msgstr "Dit is gelijk aan:"

#: 09.4-Ticking.md:28
#, no-wrap
msgid ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick, release: 0.1\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick, release: 0.1\n"
"  sleep 0.125\n"
"end"

#: 09.4-Ticking.md:35
msgid ""
"Here, we're just grabbing the scale E3 minor pentatonic and ticking through ea"
"ch element. This is done by adding `.tick` to the end of the scale declaration"
". This tick is local to the live loop, so each live loop can have its own inde"
"pendent tick:"
msgstr ""
"Hier nemen we de pentatonische toonladder E3 mineur en ticking doorheen elk el"
"ement. Dit wordt gedaan door `.tick` toe te voegen aan het einde van de verkla"
"ring van de toonladder. De tick is lokaal voor de live loop, dus elke live loo"
"p kan zijn eigen onafhankelijke tick hebben:"

#: 09.4-Ticking.md:40
#, no-wrap
msgid ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick, release: 0.1\n"
"  sleep 0.125\n"
"end\n"
"live_loop :arp2 do\n"
"  use_synth :dsaw\n"
"  play (scale :e2, :minor_pentatonic, num_octaves: 3).tick, release: 0.25\n"
"  sleep 0.25\n"
"end"
msgstr ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick, release: 0.1\n"
"  sleep 0.125\n"
"end\n"
"live_loop :arp2 do\n"
"  use_synth :dsaw\n"
"  play (scale :e2, :minor_pentatonic, num_octaves: 3).tick, release: 0.25\n"
"  sleep 0.25\n"
"end"

#: 09.4-Ticking.md:53
msgid "Tick"
msgstr "Tick"

#: 09.4-Ticking.md:55
msgid "You can also call `tick` as a standard fn and use the value as an index:"
msgstr ""
"U kunt ook `tick` als een standaard fn aanroepen en de waarde gebruiken als ee"
"n index:"

#: 09.4-Ticking.md:57
#, no-wrap
msgid ""
"live_loop :arp do\n"
"  idx = tick\n"
"  play (scale :e3, :minor_pentatonic)[idx], release: 0.1\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :arp do\n"
"  idx = tick\n"
"  play (scale :e3, :minor_pentatonic)[idx], release: 0.1\n"
"  sleep 0.125\n"
"end"

#: 09.4-Ticking.md:65
msgid ""
"However, it is much nicer to call `.tick` at the end. The `tick` fn is for whe"
"n you want to do fancy things with the tick value and for when you want to use"
" ticks for other things than indexing into rings."
msgstr ""
"Het is veel leuker om `.tick` op het einde aan te roepen. de `.tick` fn is als"
" je je dingen wil verbeelden met de tick waarde en voor wanneer je ticks wil g"
"ebruiken voor andere dingen dan in ringen te indexeren."

#: 09.4-Ticking.md:70
msgid "Look"
msgstr "Kijk"

#: 09.4-Ticking.md:72
msgid ""
"The magical thing about tick is that not only does it return a new index (or t"
"he value of the ring at that index) it also makes sure that next time you call"
" tick, it's the next value. Take a look at the examples in the docs for `tick`"
" for many ways of working with this. However, for now, it's important to point"
" out that sometimes you'll want to just look at the current tick value and *no"
"t increase* it. This is available via the `look` fn. You can call `look` as a "
"standard fn or by adding `.look` to the end of a ring."
msgstr ""
"De magische van tick is dat niet alleen het resultaat geeft van een nieuwe ind"
"ex (of de waarde van de ring op die index) ook zorgt het ervoor dat de volgend"
"e keer dat u tick aanroept, dit de volgende waarde zal zijn. Neem een kijkje n"
"aar de voorbeelden in de docs `tick` voor de vele manieren om hiermee te werke"
"n. Nu is het echter belangrijk erop te wijzen dat je soms gewoon wil kijken na"
"ar de huidige waarde van de `tick` maar deze *niet te verhogen*. Deze optie is"
" beschikbaar via de `look` fn. U kunt `look` oproepen zoals een standaard fn o"
"f door toevoeging van `look`  aan het einde van een ring."

#: 09.4-Ticking.md:81
msgid "Naming Ticks"
msgstr "Ticks Benoemen"

#: 09.4-Ticking.md:83
msgid ""
"Finally, sometimes you'll need more than one tick per live loop. This is achie"
"ved by giving your tick a name:"
msgstr ""
"En nog dit, soms heb je meer dan één tick per live loop nodig. Dat kan je door"
" je tick een naam te geven:"

#: 09.4-Ticking.md:86
#, no-wrap
msgid ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick(:foo), release: 0.1\n"
"  sleep (ring 0.125, 0.25).tick(:bar)\n"
"end"
msgstr ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick(:foo), release: 0.1\n"
"  sleep (ring 0.125, 0.25).tick(:bar)\n"
"end"

#: 09.4-Ticking.md:93
msgid ""
"Here we're using two ticks one for the note to play and another for the sleep "
"time. As they're both in the same live loop, to keep them separate we need to "
"give them unique names. This is exactly the same kind of thing as naming `live"
"_loop`s - we just pass a symbol prefixed with a `:`. In the example above we c"
"alled one tick `:foo` and the other `:bar`. If we want to `look` at these we a"
"lso need to pass the name of the tick to `look`."
msgstr ""
"Hier gebruiken we twee ticks: één voor de te spelen noten en een andere voor d"
"e rusttijd (sleep). Vermits deze alle twee in dezelfde live loop zitten, moete"
"n we ze een unieke naam geven om hen te kunnen onderscheiden. Hier gaat het ne"
"t zoals een `live_loop` benoemen, we geven een symbool door, voorafgegaan door"
" een `:`. In het voorgaande voorbeeld noemden we één tick `:foo`en een andere "
"`:bar`. Als we naar dezen willen kijken ( `look`), moeten we ook de naam van d"
"e tick doorgeven aan `look`."

#: 09.4-Ticking.md:101
msgid "Don't make it too complicated"
msgstr "Maak het niet te ingewikkeld"

#: 09.4-Ticking.md:103
msgid ""
"Most of the power in the tick system isn't useful when you get started. Don't "
"try and learn everything in this section. Just focus on ticking through a sing"
"le ring. That'll give you most of the joy and simplicity of ticking through ri"
"ngs in your `live_loop`s."
msgstr ""
"De grote kracht van het tick systeem is niet behulpzaam als beginner. Probeer "
"niet alles uit deze sectie. Focus op een tick in één enkele ring. Dit geeft de"
" grootste voldoening en is het minst gekunsteld tick-en door ringen in jouw `l"
"ive_loop`s."

#: 09.4-Ticking.md:108
msgid ""
"Take a look at the documentation for `tick` where there are many useful exampl"
"es and happy ticking!"
msgstr ""
"Neem een kijkje naar de documentatie 'Tick' waar nuttige voorbeelden te vinden"
" zijn. Nog een leuke tick verder!"

#: 10-State.md:1
msgid "10 Time State"
msgstr "10 Tijd toestand"

#: 10-State.md:3
msgid "Time State"
msgstr "Tijd toestand"

#: 10-State.md:5
msgid ""
"Often it is useful to have information that is *shared across multiple threads"
" or live loops*. For example, you might want to share a notion of the current "
"key, BPM or even more abstract concepts such as the current 'complexity' (whic"
"h you'd potentially interpret in different ways across different threads). We "
"also don't want to lose any of our existing determinism guarantees when doing "
"this. In other words, we'd still like to be able to share code with others and"
" know exactly what they'll hear when they run it. At the end of Section 5.6 of"
" this tutorial we briefly discussed why we *should not use variables to share "
"information across threads* due to a loss of determinism (in turn due to race "
"conditions)."
msgstr ""
"Vaak is het nuttig om informatie te *delen over meerder threads of live lussen"
"*. Je zou bijvoorbeeld de huidige toonsoort, BPM of meer abstracte concepten z"
"oals de huidige 'complexiteit' (wat je potentieel op verschillende manieren in"
"terpreteerd in verschillende threads). We willen ook niet iets van ons bestaan"
"de garanties voor determinisme verliezen wanneer we dit doen. In andere woorde"
"n, we willen nog steeds code met andere kunnen delen en exact weten wat ze hor"
"en wanneer het wordt uitgevoerd. Aan het einde van sectie 5.6 van deze tutoria"
"l wordt kort besproken waarom we *geen variabelen zouden moeten gebruiken om i"
"nformatie te delen tussen threads* vanwege het verlies van determinisme (op hu"
"n beurt veroorzaakt door race condities)."

#: 10-State.md:16
msgid ""
"Sonic Pi's solution to the problem of easily working with global variables in "
"a deterministic way is through a novel system it calls Time State. This might "
"sound complex and difficult (in fact, in the UK, programming with multiple thr"
"eads and shared memory is typically a university level subject). However, as y"
"ou'll see, just like playing your first note, *Sonic Pi makes it incredibly si"
"mple to share state across threads* whilst still keeping your programs *thread"
"-safe and deterministic.*."
msgstr ""
"De oplossing in Sonic Pi voor het probleem van een makkelijk model met globale"
" variabelen op een deterministische wijze is door een vernieuwend systeem dat "
"tijd toestand wordt genoemd. Dit kan complex en moeilijk klinken (in feite is "
"programmeren met meerdere threads en een gedeeld geheugenmodel tipisch een ond"
"erwerp op universitair niveau). Echter, zoals je zult zien, net als het spelen"
" van de eerste noot, * Sonic Pi maakt het onzetten eenvoudig om toestand te de"
"len tussen threads* terwijl je programma's nog steeds *thread safe en determin"
"istisch blijven*."

#: 10-State.md:24
msgid "Meet `get` and `set`..."
msgstr "Maak kennis met `get` en `set`..."

#: 10.1-Set-and-Get.md:1
msgid "10.1 Set and Get"
msgstr "10.1 Set en get"

#: 10.1-Set-and-Get.md:3
msgid "Set and Get"
msgstr "Set en get"

#: 10.1-Set-and-Get.md:5
msgid ""
"Sonic Pi has a global memory store called Time State. The two main things you "
"do with it are to `set` information and `get` information. Let's dive deeper.."
"."
msgstr ""
"Sonic Pi heeft een globaal memory model genaamd tijd toestand. De twee belangr"
"ijkste dingen die je ermee doet is informattie `zetten` (set) en `ophalen` (ge"
"t). Laten we erin duiken..."

#: 10.1-Set-and-Get.md:9
msgid "Set"
msgstr "Set"

#: 10.1-Set-and-Get.md:11
msgid "To store information into the Time State we need two things:"
msgstr "Om informatie op te slaan in de tijd toestand  hebben we twee dingen nodig:"

#: 10.1-Set-and-Get.md:13
msgid "the information we want to store,"
msgstr "de informatie die we willen opslaan,"

#: 10.1-Set-and-Get.md:14
msgid "a unique name (key) for the information."
msgstr "een unieke naam (sleutel) voor de informatie."

#: 10.1-Set-and-Get.md:16
msgid ""
"For example, we might want to store the number `3000` with the key `:intensity"
"`. This is possible using the `set` function:"
msgstr ""
"We willen bijvoorbeeld het getal `3000` opslaan met de sleutel `:intensiteit`."
" Dit is mogelijk door de `set` functie te gebruiken:"

#: 10.1-Set-and-Get.md:19
#, no-wrap
msgid "set :intensity, 3000"
msgstr "set :intensiteit, 3000"

#: 10.1-Set-and-Get.md:23
msgid ""
"We can use any name for our key. If information has already been stored with t"
"hat key, our new `set` will override it:"
msgstr ""
"We kunnen elke naam gebruiken voor onze sleutel. Wanneer informatie al was opg"
"eslagen voor die sleutel, dan overschrijft de nieuwe `set` die:"

#: 10.1-Set-and-Get.md:26
#, no-wrap
msgid ""
"set :intensity, 1000\n"
"set :intensity, 3000"
msgstr ""
"set :intensiteit, 1000\n"
"set :intensiteit, 3000"

#: 10.1-Set-and-Get.md:31
msgid ""
"In the above example, as we stored both numbers under the same key, the last c"
"all to `set` 'wins', so the number associated with `:intensity` will be `3000`"
" as the first call to `set` is effectively overridden."
msgstr ""
"In het bovenstaande voorbeeld hebben we beide getallen opgeslagen onder dezelf"
"de sleutel. De laatste aanroep van `set` 'wint'. Het getal dat gekoppeld is aa"
"n `:intensiteit` zal `3000` zijn omdat de eerste aanroep van `set` effectief w"
"ordt overschreven."

#: 10.1-Set-and-Get.md:35
msgid "Get"
msgstr "Get"

#: 10.1-Set-and-Get.md:37
msgid ""
"To fetch information from the Time State we just need the key we used to `set`"
" it, which in our case is `:intensity`. We then just need to call `get[:intens"
"ity]` which we can see by printing out the result to the log:"
msgstr ""
"Om informatie op te halen uit de tijd toestand hebben we allen de sleuten nodi"
"g die werd gebruikt om voor `set`. In ons geval is dat `:intensiteit`. We hoev"
"en alleen `get[:intensiteit]` aan te roepen wat we kunnen zien door het result"
"aat naar het log af te drukken:"

#: 10.1-Set-and-Get.md:42
#, no-wrap
msgid "print get[:intensity] #=> prints 3000"
msgstr "print get[:intensiteit] #=> print 3000"

#: 10.1-Set-and-Get.md:46
msgid ""
"Notice that calls to `get` can return information that was `set` in a previous"
" run. Once a piece of information has been `set` it is available until either "
"the information is overridden (just like we clobbered the `:intensity` value o"
"f `1000` to `3000` above) or Sonic Pi is closed."
msgstr ""
"Merk op dat aanroepen van `get` informatie kunnen teruggeven die was ge`set` i"
"n de vorige uitvoering.  Wanneer een stuk informatie is ge`set` is het beschik"
"baar totdat of de informatie is overschreven (net als de aanpassing van `:inte"
"nsiteit` van de waarde `1000` naar `3000` hierboven) of Sonic Pi is afgesloten"
"."

#: 10.1-Set-and-Get.md:52
msgid "Multiple Threads"
msgstr "Meerdere threads"

#: 10.1-Set-and-Get.md:54
msgid ""
"The main benefit of the Time State system is that it can be safely used across"
" threads or live loops. For example, you could have one live loop setting info"
"rmation and another one getting it:"
msgstr ""
"Het belangrijkste voordeel van het tijd toestand systeem is dat het veilig geb"
"ruikt kan worden tussen meerdere threads of live lussen. Je kunt bijvoorbeeld "
"een live lus hebben voor het zetten van informatie en een andere voor het opha"
"len:"

#: 10.1-Set-and-Get.md:58
#, no-wrap
msgid ""
"live_loop :setter do\n"
"  set :foo, rrand(70, 130)\n"
"  sleep 1\n"
"end\n"
"live_loop :getter do\n"
"  puts get[:foo]\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :opslaan do\n"
"  set :foo, rrand(70, 130)\n"
"  sleep 1\n"
"end\n"
"live_loop :ophalen do\n"
"  puts get[:foo]\n"
"  sleep 0.5\n"
"end"

#: 10.1-Set-and-Get.md:70
msgid ""
"The nice thing about using `get` and `set` across threads like this is that it"
" will always produce the same result every time you hit run. Go on, try it. Se"
"e if you get the following in your log:"
msgstr ""
"Het leuke aan het gebruik van `get` en `set` tussen meerdere threads zoals hie"
"r is dat het altijd hetzelfde resultaat oplevert iedere keer dat je op uitvoer"
"en drukt. Vooruit, probeer het. Kijk op je het volgende in je log krijgt:"

#: 10.1-Set-and-Get.md:74
#, no-wrap
msgid ""
"{run: 0, time: 0.0}\n"
" └─ 125.72265625\n"
"{run: 0, time: 0.5}\n"
" └─ 125.72265625\n"
"{run: 0, time: 1.0}\n"
" └─ 76.26220703125\n"
"{run: 0, time: 1.5}\n"
" └─ 76.26220703125\n"
"{run: 0, time: 2.0}\n"
" └─ 114.93408203125\n"
"{run: 0, time: 2.5}\n"
" └─ 114.93408203125\n"
"{run: 0, time: 3.0}\n"
" └─ 75.6048583984375\n"
"{run: 0, time: 3.5}\n"
" └─ 75.6048583984375"
msgstr ""
"{run: 0, time: 0.0}##run: draai\n"
" └─ 125.72265625\n"
"{run: 0, time: 0.5}##run: draai\n"
" └─ 125.72265625\n"
"{run: 0, time: 1.0}##run: draai\n"
" └─ 76.26220703125\n"
"{run: 0, time: 1.5}##run: draai\n"
" └─ 76.26220703125\n"
"{run: 0, time: 2.0}##run: draai\n"
" └─ 114.93408203125\n"
"{run: 0, time: 2.5}##run: draai\n"
" └─ 114.93408203125\n"
"{run: 0, time: 3.0}##run: draai\n"
" └─ 75.6048583984375\n"
"{run: 0, time: 3.5}##run: draai\n"
" └─ 75.6048583984375"

#: 10.1-Set-and-Get.md:100
msgid ""
"Try running it a few times - see, it's the same every time. This is what we ca"
"ll deterministic behaviour and it's really very important when we want to shar"
"e our music as code and know that the person playing the code is hearing exact"
"ly what we wanted them to hear (just like playing an MP3 or internet stream so"
"unds the same for all listeners)."
msgstr ""
"Probeer het een paar keer uit te voeren, zie je wel, het is steeds hetzelfde. "
"Dit is wat we deterministisch gerag noemen en het is werkelijk heel belangrijk"
" wanneer we onze muziek als code willen delen en zeker willen weten dat de per"
"soon die code afspeelt exact hetzelfde hoort als wat we wilden dat ze hoorden "
"(net als een MP3 afpselen of een internet stream voor alle luisteraars hezelfd"
"e klinkt)."

#: 10.1-Set-and-Get.md:107
msgid "A Simple Deterministic State System"
msgstr "Een simple deterministisch toestandssysteem"

#: 10.1-Set-and-Get.md:109
msgid ""
"Back in Section 5.6 we discussed why using variables across threads can lead t"
"o random behaviour. This stops us from being able to reliably reproduce code s"
"uch as this:"
msgstr ""
"Eerder, in sectie 5.6, bespraken we waarom variabelen gebruiken over meerdere "
"threads voor willekeurig gedrag kan zorgen. Daardoor is het betrouwbaar reprod"
"uceren zoals de volgende code niet mogelijk:"

#: 10.1-Set-and-Get.md:113
#, no-wrap
msgid ""
"## An Example of Non-Deterministic Behaviour\n"
"## (due to race conditions caused by multiple\n"
"## live loops manipulating the same variable\n"
"## at the same time).\n"
"##  \n"
"## If you run this code you'll notice\n"
"## that the list that's printed is\n"
"## not always sorted!\n"
"a = (ring 6, 5, 4, 3, 2, 1)\n"
"live_loop :shuffled do\n"
"  a = a.shuffle\n"
"  sleep 0.5\n"
"end\n"
"live_loop :sorted do\n"
"  a = a.sort\n"
"  sleep 0.5\n"
"  puts \"sorted: \", a\n"
"end"
msgstr ""
"## Een voorbeeld van niet deterministisch gedrag\n"
"## (veroorzaakt door race condities veroorzaakt door meerdere\n"
"## live lussen die dezelfde variable manipuleren\n"
"## op hetzelfde moment).\n"
"##  \n"
"## Wanneer je deze code uitvoert zul je opmerken\n"
"## dat de lijst die wordt afgedrukt \n"
"## niet altijd gesorteerd is\n"
"a = (ring 6, 5, 4, 3, 2, 1)\n"
"live_loop :geschud do\n"
"  a = a.shuffle\n"
"  sleep 0.5\n"
"end\n"
"live_loop :gesorteerd do\n"
"  a = a.sort\n"
"  sleep 0.5\n"
"  puts \"gesorteerd: \", a\n"
"end"

#: 10.1-Set-and-Get.md:136
msgid "Let's take a look at how this might look using `get` and `set`:"
msgstr "Laten we kijken hoe dit eruit ziet wanneer we `get` en `set` gebruiken:"

#: 10.1-Set-and-Get.md:138
#, no-wrap
msgid ""
"## An Example of Deterministic Behaviour\n"
"## (despite concurrent access of shared state)\n"
"## using Sonic Pi's new Time State system.\n"
"##\n"
"## When this code is executed, the list that's\n"
"## printed is always sorted!\n"
"set :a, (ring 6, 5, 4, 3, 2, 1)\n"
"live_loop :shuffled do\n"
"  set :a, get[:a].shuffle\n"
"  sleep 0.5\n"
"end\n"
"live_loop :sorted do\n"
"  set :a, get[:a].sort\n"
"  sleep 0.5\n"
"  puts \"sorted: \", get[:a]\n"
"end"
msgstr ""
"## Een voorbeeld van deterministisch gedrag\n"
"## (ondanks gelijktijdige toegang tot gedeelde toestand)\n"
"## door het gebruik van het tijd toestand systeem van Sonic Pi.\n"
"##\n"
"## Wanneer deze code wordt uitgevoerd is de lijst\n"
"## die wordt afgedrukt altijd gesorteerd!\n"
"set :a, (ring 6, 5, 4, 3, 2, 1)\n"
"live_loop :geschud do\n"
"  set :a, get[:a].shuffle\n"
"  sleep 0.5\n"
"end\n"
"live_loop :gesorteerd do\n"
"  set :a, get[:a].sort\n"
"  sleep 0.5\n"
"  puts \"gesorteerd: \", get[:a]\n"
"end"

#: 10.1-Set-and-Get.md:159
msgid ""
"Notice how this code is pretty much identical to the version using a variable "
"before it. However when you run the code, it behaves as you would expect with "
"any typical Sonic Pi code - *it does the same thing every time* in this case t"
"hanks to the Time State system."
msgstr ""
"Merk op dat de code bijna identiek is aan de versie die de variabele gebruikt "
"hiervoor. Echter wanneer je de code uitvoert gedraagt het zich zoals je zou ve"
"rwachten met elk typisch stuk Sonic Pi code: *het doet elke keer hetzelfde* in"
" dit geval dankzij het tijd toestand systeem."

#: 10.1-Set-and-Get.md:164
msgid ""
"Therefore, when sharing information across live loops and threads, use `get` a"
"nd `set` instead of variables for deterministic, reproducible behaviour."
msgstr ""
"Gebruik daarom wanneer je informatie deelt tussen live lussen en threads `get`"
" en `set` in plaat van variabelen voor deterministisch en reproduceerbaar gedr"
"ag."

#: 10.2-Sync.md:1
msgid "10.2 Sync"
msgstr "10.2 Sync (\"synchroniseer\")"

#: 10.2-Sync.md:3
msgid "Sync"
msgstr "Sync (synchroniseren)"

#: 10.2-Sync.md:5
msgid ""
"Section 5.7 introduced the functions `cue` and `sync` when dealing with the is"
"sue of synchronising threads. What it didn't explain was that it is the Time S"
"tate system which provides this functionality. It just so happens that `set` i"
"s actually a variation of `cue` and is built on top of the same core functiona"
"lity which is to insert information into the Time State system. Additionally, "
"`sync` is also designed in such a way that it works seamlessly with Time State"
" - any information that we plan to store in Time State we can sync on. In othe"
"r words - *we `sync` on events yet to be inserted into Time State*."
msgstr ""
"Sectie 5.7 introduceerde de functies `cue` en `sync` om het synchroniseren van"
" threads af te handelen. Wat niet werd uitgelegd is dat het het tijd toestand "
"systeem is dat deze functionaliteit beschikbaar stelt. Eigenlijk is `set` een "
"variatie op `cue` en bouwt voort op dezelfde kernfunctionaliteit: het toevoege"
"n van informatie aan het tijd toestand systeem. Bovendien is `sync` ook zo ont"
"worpen dat het naadloos samenwerkt met de tijd toestand - alle informatie die "
"we van plan zijn op te slaan in de tijd toestand waarop we kunnen synchroniser"
"en. Met andere woorden - * we `sync`-en op gebeurtenissen die nog moeten worde"
"n ingevoegd in de tijd toestand *."

#: 10.2-Sync.md:15
msgid "Waiting for Events"
msgstr "Wachten op gebeurtenissen"

#: 10.2-Sync.md:17
msgid ""
"Let's take a quick look at how to use `sync` to wait for new events to be adde"
"d to Time State:"
msgstr ""
"Laten we kort kijken naar hoe `sync` gebruikt wordt om op nieuwe gebeurtenisse"
"n te wachten die worden toegevoegd aan tijd toestand:"

#: 10.2-Sync.md:20
#, no-wrap
msgid ""
"in_thread do\n"
"  sync :foo\n"
"  sample :ambi_lunar_land\n"
"end\n"
"sleep 2\n"
"set :foo, 1"
msgstr ""
"in_thread do\n"
"  sync :bla\n"
"  sample :ambi_lunar_land\n"
"end\n"
"sleep 2\n"
"set :bla, 1"

#: 10.2-Sync.md:31
msgid ""
"In this example first we create a thread which waits for a `:foo` event to be "
"added to the Time State. After this thread declaration we sleep for 2 beats an"
"d then `set` `:foo` to be `1`. This then releases the `sync` which then moves "
"to the next line which is to trigger the `:ambi_lunar_land` sample."
msgstr ""
"In dit voorbeeld maken we eerst een draad die wacht op een ':foo'-gebeurtenis "
"die toegevoegd wordt aan de Time State. Nadat we deze draad aangekondigd hebbe"
"n, slapen we twee slagen en dan zetten we ('set') 'foo' op '1'. Dat zorgt er v"
"ervolgens voor dat de 'sync' vrijgegeven wordt zodat op de volgende regel het "
"':ambi_lunar_land'-stukje geactiveerd wordt."

#: 10.2-Sync.md:37
msgid ""
"Note that `sync` always waits for *future events* and that it will block the c"
"urrent thread waiting for a new event. Also, it will inherit the logical time "
"of the thread which triggered it via `set` or `cue` so it may also be used to "
"sync time."
msgstr ""
"Let erop, dat 'sync' altijd wacht op *toekomstige* gebeurtenissen, en dat het "
"de huidige draad blokkeert zolang die gebeurtenis nog niet opgetreden is. Bove"
"ndien erft het de logische tijd van de draad die hem geactiveerd heeft via de "
"'set' of 'cue', zodat het gebruikt kan worden om de tijd te synchroniseren."

#: 10.2-Sync.md:42
msgid "Passing values into the Future"
msgstr "Doorgeven van waarde aan de toekomst"

#: 10.2-Sync.md:44
msgid ""
"In the example above we set `:foo` to `1` which we did nothing with. We can ac"
"tually get this value from the thread calling `sync`:"
msgstr ""
"In het bovenstaande voorbeeld is ':bla' op '1' gezet om er vervolgens niets me"
"e te doen. We kunnen de waarde ophalen van de thread door 'sync' aan te roepen"
":"

#: 10.2-Sync.md:47
#, no-wrap
msgid ""
"in_thread do\n"
"  amp = sync :foo\n"
"  sample :ambi_lunar_land, amp: amp\n"
"end\n"
"sleep 2\n"
"set :foo, 0.5"
msgstr ""
"in_thread do\n"
"  amp = sync :bla\n"
"  sample :ambi_lunar_land, amp: amp\n"
"end\n"
"sleep 2\n"
"set :bla, 0.5"

#: 10.2-Sync.md:58
msgid ""
"Note that values that are passed through `set` and `cue` must be thread safe -"
" i.e. immutable rings, numbers, symbols or frozen strings. Sonic Pi will throw"
" an error if the value you are attempting to store in the Time State is not va"
"lid."
msgstr ""
"Let erop, dat waarde die via 'set' en 'cue' doorgegeven worden 'thread safe' m"
"oeten zijn. Dat wil zeggen dat de waarden niet opeens gewijzigd mogen kunnen w"
"orden. Voorbeelden van toegestane waardetypes zijn onveranderlijke tekenreekse"
"n ('immutable strings'), getallen, symbolen of bevroren tekenreeksen ('frozen "
"strings'). Sonic Pi geeft een foutmelding als je een waarde gebruikt die niet "
"aan die voorwaarde voldoet."

#: 10.3-Pattern-Matching.md:1
msgid "10.3 Pattern Matching"
msgstr "10.3 Patroonherkenning"

#: 10.3-Pattern-Matching.md:3
msgid "Pattern Matching"
msgstr "Patroonherkenning"

#: 10.3-Pattern-Matching.md:5
msgid ""
"When getting and setting information into the Time State, it's possible to use"
" more complex keys than basic symbols such as `:foo` and `:bar`. You can also "
"use URL style strings called paths such as `\"/foo/bar/baz\"`. Once we start wor"
"king with paths, we can then start taking advantage of Sonic Pi's sophisticate"
"d pattern matching system to `get` and `sync` with 'similar' rather than 'iden"
"tical' paths. Let's take a look."
msgstr ""
"Wanneer je informatie haalt ('get') van de Time State of gegevens in de Time S"
"tate vastlegd ('set'), kun je ook complexere waarden gebruiken dan de basissym"
"bolen zoals ':foo' en ':bar'. Je kan bijvoorbeeld paden in een URL-stijl gebru"
"iken zoals '/foo/bar/baz'. Zodra we zulke paden gaan gebruiken, kunnen we voor"
"deel halen uit de slimme patroonherkenning van Sonic Pi, zodat we met vergelij"
"kbare ('similar') in plaats van precies gelijke ('identical') paden kunnen hal"
"en ('get') en synchroniseren ('sync'). Laten we eens kijken."

#: 10.3-Pattern-Matching.md:13
msgid "Match any path segment"
msgstr ""

#: 10.3-Pattern-Matching.md:15
msgid "Let's assume we want to wait for the next event that has three path segments:"
msgstr ""

#: 10.3-Pattern-Matching.md:17
#, no-wrap
msgid "sync \"/*/*/*\""
msgstr "sync \"/*/*/*\""

#: 10.3-Pattern-Matching.md:21
msgid ""
"This will match any Time State event with exactly three path segments, regardl"
"ess of their names. For example:"
msgstr ""

#: 10.3-Pattern-Matching.md:24 10.3-Pattern-Matching.md:46
#: 10.3-Pattern-Matching.md:68 10.3-Pattern-Matching.md:78
msgid "`cue \"/foo/bar/baz\"`"
msgstr "`cue \"/bla/bar/baz\"`"

#: 10.3-Pattern-Matching.md:25
msgid "`cue \"/foo/baz/quux\"`"
msgstr "`cue \"/bla/baz/quux\"`"

#: 10.3-Pattern-Matching.md:26
msgid "`cue \"/eggs/beans/toast\"`"
msgstr "`cue \"/eggs/beans/toast\"`"

#: 10.3-Pattern-Matching.md:27
msgid "`cue \"/moog/synths/rule\"`"
msgstr "`cue \"/moog/synths/rule\"`"

#: 10.3-Pattern-Matching.md:29
msgid ""
"However, it will *not* match paths with fewer or more path segments. The follo"
"wing will not match:"
msgstr ""

#: 10.3-Pattern-Matching.md:32
msgid "`cue \"/foo/bar\"`"
msgstr "`cue \"/bla/bar\"`"

#: 10.3-Pattern-Matching.md:33
msgid "`cue \"/foo/baz/quux/quaax\"`"
msgstr "`cue \"/bla/baz/quux/quaax\"`"

#: 10.3-Pattern-Matching.md:34
msgid "`cue \"/eggs\"`"
msgstr "`cue \"/eggs\"`"

#: 10.3-Pattern-Matching.md:36
msgid ""
"Each `*` means *any content*. So we could match paths with just one segment wi"
"th `/*` or paths with five segments with `/*/*/*/*/*`"
msgstr ""

#: 10.3-Pattern-Matching.md:38
msgid "Matching partial segments"
msgstr ""

#: 10.3-Pattern-Matching.md:40
#, fuzzy
msgid ""
"If we know what the segment is going to start or finish with, we can use a `*`"
" in addition to a partial segment name. For example: `\"/foo/b*/baz\"` will matc"
"h any path that has three segments, the first of which is `foo`, the last `baz"
"` and the middle segment can be anything that starts with `b`. So, it would ma"
"tch:"
msgstr "foo"

#: 10.3-Pattern-Matching.md:47
msgid "`cue \"/foo/baz/baz\"`"
msgstr "`cue \"/bla/baz/baz\"`"

#: 10.3-Pattern-Matching.md:48
msgid "`cue \"/foo/beans/baz\"`"
msgstr "`cue \"/bla/beans/baz\"`"

#: 10.3-Pattern-Matching.md:50
msgid "However, it wouldn't match the following:"
msgstr ""

#: 10.3-Pattern-Matching.md:52
msgid "`cue \"/foo/flibble/baz\"`"
msgstr "`cue \"/bla/flibble/baz\"`"

#: 10.3-Pattern-Matching.md:53
msgid "`cue \"/foo/abaz/baz\"`"
msgstr "`cue \"/bla/abaz/baz\"`"

#: 10.3-Pattern-Matching.md:54
msgid "`cue \"/foo/beans/baz/eggs\"`"
msgstr "`cue \"/bla/beans/baz/eggs\"`"

#: 10.3-Pattern-Matching.md:56
#, fuzzy
msgid ""
"You can also place the `*` at the start of the segment to specify the last cha"
"racters of a segment: `\"/foo/*zz/baz\"` which will match any 3 segment `cue` or"
" `set` where the first segment is `foo`, the last is `baz` and the middle segm"
"ent ends with `zz` such as `\"cue \"/foo/whizz/baz\"`."
msgstr "foo"

#: 10.3-Pattern-Matching.md:62
msgid "Matching Nested Path Segments"
msgstr ""

#: 10.3-Pattern-Matching.md:64
#, fuzzy
msgid ""
"Sometimes you don't know how many path segments you want to match. In these ca"
"ses you can use the powerful double star: `**` such as `\"/foo/**/baz\"` which w"
"ill match:"
msgstr "foo"

#: 10.3-Pattern-Matching.md:69
msgid "`cue \"/foo/bar/beans/baz\"`"
msgstr "`cue \"/bla/bar/beans/baz\"`"

#: 10.3-Pattern-Matching.md:70
msgid "`cue \"/foo/baz\"`"
msgstr "`cue \"/bla/baz\"`"

#: 10.3-Pattern-Matching.md:71
msgid "`cue \"/foo/a/b/c/d/e/f/baz\"`"
msgstr "`cue \"/bla/a/b/c/d/e/f/baz\"`"

#: 10.3-Pattern-Matching.md:73
msgid "Matching Single Letters"
msgstr ""

#: 10.3-Pattern-Matching.md:75
msgid ""
"You can use the `?` character to match against a single char such as `\"/?oo/ba"
"r/baz\"` which will match:"
msgstr ""

#: 10.3-Pattern-Matching.md:79
msgid "`cue \"/goo/bar/baz\"`"
msgstr "`cue \"/goo/bar/baz\"`"

#: 10.3-Pattern-Matching.md:80
msgid "`cue \"/too/bar/baz\"`"
msgstr "`cue \"/too/bar/baz\"`"

#: 10.3-Pattern-Matching.md:81
msgid "`cue \"/woo/bar/baz\"`"
msgstr "`cue \"/woo/bar/baz\"`"

#: 10.3-Pattern-Matching.md:83
msgid "Matching Multiple Words"
msgstr ""

#: 10.3-Pattern-Matching.md:85
#, fuzzy
msgid ""
"If you know that a segment may be one of a select number of words, you can use"
" the `{` and `}` matchers to specify a list of choices such as `\"/foo/{bar,bea"
"ns,eggs}/quux\"` which will only match the following:"
msgstr "foo"

#: 10.3-Pattern-Matching.md:89
msgid "`cue \"/foo/bar/quux\"`"
msgstr "`cue \"/bla/bar/quux\"`"

#: 10.3-Pattern-Matching.md:90
msgid "`cue \"/foo/beans/quux\"`"
msgstr "`cue \"/bla/beans/quux\"`"

#: 10.3-Pattern-Matching.md:91
msgid "`cue \"/foo/eggs/quux\"`"
msgstr "`cue \"/bla/eggs/quux\"`"

#: 10.3-Pattern-Matching.md:93
msgid "Matching Multiple Letters"
msgstr ""

#: 10.3-Pattern-Matching.md:95
#, fuzzy
msgid ""
"Finally, you can match against a selection of letters if you use the `[` and `"
"]` matchers to specify a list of choices such as `\"/foo/[abc]ux/baz\"` which wi"
"ll match only:"
msgstr "foo"

#: 10.3-Pattern-Matching.md:99 10.3-Pattern-Matching.md:106
msgid "`cue \"/foo/aux/baz\"`"
msgstr "`cue \"/bla/aux/baz\"`"

#: 10.3-Pattern-Matching.md:100 10.3-Pattern-Matching.md:107
msgid "`cue \"/foo/bux/baz\"`"
msgstr "`cue \"/bla/bux/baz\"`"

#: 10.3-Pattern-Matching.md:101 10.3-Pattern-Matching.md:108
msgid "`cue \"/foo/cux/baz\"`"
msgstr "`cue \"/bla/cux/baz\"`"

#: 10.3-Pattern-Matching.md:104
#, fuzzy
msgid ""
"You can also use the `-` character to specify ranges of letters. For example `"
"\"/foo/[a-e]ux/baz\"` which will match only:"
msgstr "foo"

#: 10.3-Pattern-Matching.md:109
msgid "`cue \"/foo/dux/baz\"`"
msgstr "`cue \"/bla/dux/baz\"`"

#: 10.3-Pattern-Matching.md:110
msgid "`cue \"/foo/eux/baz\"`"
msgstr "`cue \"/bla/eux/baz\"`"

#: 10.3-Pattern-Matching.md:112
msgid "Combining Matchers"
msgstr ""

#: 10.3-Pattern-Matching.md:114
msgid ""
"When calling `sync` or `get` you are free to combine matchers in any order you"
" see fit to powerfully match any Time State event created by `cue` or `set`. L"
"et's look at a crazy example:"
msgstr ""

#: 10.3-Pattern-Matching.md:118
#, no-wrap
#, fuzzy
msgid ""
"in_thread do\n"
"  sync \"/?oo/[a-z]*/**/ba*/{quux,quaax}/\"\n"
"  sample :loop_amen\n"
"end\n"
"sleep 1\n"
"cue \"/foo/beans/a/b/c/d/e/bark/quux/\""
msgstr "sample :loop_amen"

#: 10.3-Pattern-Matching.md:129
msgid "OSC Pattern Matching"
msgstr ""

#: 10.3-Pattern-Matching.md:131
msgid ""
"For those curious, these matching rules are based on the Open Sound Control pa"
"ttern matching specification which is explained in detail here: http://opensou"
"ndcontrol.org/spec-1_0"
msgstr ""

#: 11-MIDI.md:1
msgid "11 MIDI"
msgstr "11 MIDI"

#: 11-MIDI.md:3
msgid "MIDI"
msgstr "MIDI"

#: 11-MIDI.md:5
msgid ""
"Once you've mastered converting code to music, you might wonder - what's next?"
" Sometimes the constraints of working purely within Sonic Pi's syntax and soun"
"d system can be exciting and put you into a new creative position. However, so"
"metimes it is essential to break out of the code into the real world. We want "
"two extra things:"
msgstr ""

#: 11-MIDI.md:11
msgid ""
"To be able to convert actions in the real world into Sonic Pi events to code w"
"ith"
msgstr ""

#: 11-MIDI.md:12
msgid ""
"To be able to use Sonic Pi's strong timing model and semantics to control and "
"manipulate objects in the real world"
msgstr ""

#: 11-MIDI.md:14
msgid ""
"Luckily there's a protocol that's been around since the 80s that enables exact"
"ly this kind of interaction - MIDI. There's an incredible number of external d"
"evices including keyboards, controllers, sequencers, and pro audio software th"
"at all support MIDI. We can use MIDI to receive data and also use it to send d"
"ata."
msgstr ""

#: 11-MIDI.md:20
msgid ""
"Sonic Pi provides full support for the MIDI protocol enabling you to connect y"
"our live code to the real world. Let's explore it further..."
msgstr ""

#: 11.1-MIDI-In.md:1
msgid "11.1 MIDI In"
msgstr ""

#: 11.1-MIDI-In.md:3
msgid "MIDI In"
msgstr ""

#: 11.1-MIDI-In.md:5
msgid ""
"In this section we will learn how to connect a MIDI controller to send events "
"into Sonic Pi to control our synths and sounds. Go and grab a MIDI controller "
"such as a keyboard or control surface and let's get physical!"
msgstr ""

#: 11.1-MIDI-In.md:11
msgid "Connecting a MIDI Controller"
msgstr ""

#: 11.1-MIDI-In.md:13
msgid ""
"In order to get information from an external MIDI device into Sonic Pi we firs"
"t need to connect it to our computer. Typically this will be via a USB connect"
"ion, although older equipment will have a 5-pin DIN connector for which you'll"
" need hardware support for your computer (for example, some sound cards have M"
"IDI DIN connectors). Once you've connected your device, launch Sonic Pi and ta"
"ke a look at the IO section of the Preferences panel. You should see your devi"
"ce listed there. If not, try hitting the 'Reset MIDI' button and see if it app"
"ears. If you're still not seeing anything, the next thing to try is to consult"
" your operating system's MIDI config to see if it sees your device. Failing al"
"l that, feel free to ask questions in our friendly forums: https://in-thread.s"
"onic-pi.net"
msgstr ""

#: 11.1-MIDI-In.md:26
msgid "Receiving MIDI Events"
msgstr ""

#: 11.1-MIDI-In.md:28
msgid ""
"Once your device is connected, Sonic Pi will automatically receive events. You"
" can see for yourself by manipulating your MIDI device and looking at the cue "
"logger in the bottom right of the application window below the log (if this is"
"n't visible go to Preferences->Editor->Show & Hide and enable the 'Show cue lo"
"g' tickbox). You'll see a stream of events such as:"
msgstr ""

#: 11.1-MIDI-In.md:35
#, no-wrap
msgid ""
"/midi:nanokey2_keyboard:0:1/note_off  [55, 64]\n"
"/midi:nanokey2_keyboard:0:1/note_on   [53, 102]\n"
"/midi:nanokey2_keyboard:0:1/note_off  [57, 64]\n"
"/midi:nanokey2_keyboard:0:1/note_off  [53, 64]\n"
"/midi:nanokey2_keyboard:0:1/note_on   [57, 87]\n"
"/midi:nanokey2_keyboard:0:1/note_on   [55, 81]\n"
"/midi:nanokey2_keyboard:0:1/note_on   [53, 96]\n"
"/midi:nanokey2_keyboard:0:1/note_off  [55, 64]"
msgstr ""

#: 11.1-MIDI-In.md:46
msgid ""
"Once you can see a stream of messages like this, you've successfully connected"
" your MIDI device. Congratulations, let's see what we can do with it!"
msgstr ""

#: 11.1-MIDI-In.md:50
msgid "MIDI Time State"
msgstr ""

#: 11.1-MIDI-In.md:52
msgid ""
"These events are broken into two sections. Firstly there's the name of the eve"
"nt such as `/midi:nanokey2_keyboard:0:1/note_on` and secondly there's the valu"
"es of the event such as `[18, 62]`. Interestingly, these are the two things we"
" need to store information in Time State. *Sonic Pi automatically inserts inco"
"ming MIDI events into Time State*. This means you can `get` the latest MIDI va"
"lue and also `sync` waiting for the next MIDI value using everything we learne"
"d in section 10 of this tutorial."
msgstr ""

#: 11.1-MIDI-In.md:60
msgid "Controlling Code"
msgstr "Besturingscode"

#: 11.1-MIDI-In.md:62
msgid ""
"Now we've connected a MIDI device, seen its events in the cue log and discover"
"ed that our knowledge of Time State is all we need to work with the events, we"
" can now start having fun. Let's build a simple MIDI piano:"
msgstr ""

#: 11.1-MIDI-In.md:67
#, no-wrap
msgid ""
"live_loop :midi_piano do\n"
"  note, velocity = sync \"/midi:nanokey2_keyboard:0:1/note_on\"\n"
"  synth :piano, note: note\n"
"end"
msgstr ""

#: 11.1-MIDI-In.md:74
msgid ""
"There's a few things going on in the code above including some issues. Firstly"
", we have a simple `live_loop` which will repeat forever running the code betw"
"een the `do`/`end` block. This was introduced in Section 9.2. Secondly, we're "
"calling `sync` to wait for the next matching Time State event. We use a string"
" representing the MIDI message we're looking for (which is the same as was dis"
"played in the cue logger). Notice that this long string is provided to you by "
"Sonic Pi's autocompletion system, so you don't have to type it all out by hand"
". In the log we saw that there were two values for each MIDI note on event, so"
" we assign the result to two separate variables `note` and `velocity`. Finally"
" we trigger the `:piano` synth passing our note."
msgstr ""

#: 11.1-MIDI-In.md:86
msgid ""
"Now, you try it. Type in the code above, replace the sync key with a string ma"
"tching your specific MIDI device and hit Run. Hey presto, you have a working p"
"iano! However, you'll probably notice a couple of problems: firstly all the no"
"tes are the same volume regardless of how hard you hit the keyboard. This can "
"be easily fixed by using the velocity MIDI value and converting it to an ampli"
"tude. Given that MIDI has a range of 0->127, to convert this number to a value"
" between 0->1 we just need to divide it by 127:"
msgstr ""

#: 11.1-MIDI-In.md:95
#, no-wrap
msgid ""
"live_loop :midi_piano do\n"
"  note, velocity = sync \"/midi:nanokey2_keyboard:0:1/note_on\"\n"
"  synth :piano, note: note, amp: velocity / 127.0\n"
"end"
msgstr ""

#: 11.1-MIDI-In.md:102
msgid ""
"Update the code and hit Run again. Now the velocity of the keyboard is honoure"
"d. Next, let's get rid of that pesky pause."
msgstr ""

#: 11.1-MIDI-In.md:105
msgid "Removing Latency"
msgstr ""

#: 11.1-MIDI-In.md:107
msgid ""
"Before we can remove the pause, we need to know why it's there. In order to ke"
"ep all the synths and FX well-timed across a variety of differently capable CP"
"Us, Sonic Pi schedules the audio *in advance* by 0.5s by default. (Note that t"
"his added latency can be configured via the fns `set_sched_ahead_time!` and `u"
"se_sched_ahead_time`). This 0.5s latency is being added to our `:piano` synth "
"triggers as it is added to all synths triggered by Sonic Pi. Typically we real"
"ly want this added latency as it means all synths will be well timed. However,"
" this only makes sense for synths triggered by code using `play` and `sleep`. "
"In this case, we're actually triggering the `:piano` synth with our external M"
"IDI device and therefore don't want Sonic Pi to control the timing for us. We "
"can turn off this latency with the command `use_real_time` which disables the "
"latency for the current thread. This means you can use real time mode for live"
" loops that have their timing controlled by `sync`ing with external devices, a"
"nd keep the default latency for all other live loops. Let's see:"
msgstr ""

#: 11.1-MIDI-In.md:124
#, no-wrap
msgid ""
"live_loop :midi_piano do\n"
"  use_real_time\n"
"  note, velocity = sync \"/midi:nanokey2_keyboard:0:1/note_on\"\n"
"  synth :piano, note: note, amp: velocity / 127.0\n"
"end"
msgstr ""

#: 11.1-MIDI-In.md:132
msgid ""
"Update your code to match the code above and hit Run again. Now we have a low "
"latency piano with variable velocity coded in just 5 lines. Wasn't that easy!"
msgstr ""

#: 11.1-MIDI-In.md:136
msgid "Getting Values"
msgstr "Waarden ophalen"

#: 11.1-MIDI-In.md:138
msgid ""
"Finally, as our MIDI events are going straight into the Time State, we can als"
"o use the `get` fn to retrieve the last seen value. This doesn't block the cur"
"rent thread and returns `nil` if there's no value to be found (which you can o"
"verride by passing a default value - see the docs for `get`). Remember that yo"
"u can call `get` in any thread at any time to see the latest matching Time Sta"
"te value. You can even use `time_warp` to jump back in time and call `get` to "
"see past events..."
msgstr ""

#: 11.1-MIDI-In.md:147
msgid "Now You are in Control"
msgstr ""

#: 11.1-MIDI-In.md:149
#, fuzzy
msgid ""
"The exciting thing now is that you can now use the same code structures to `sy"
"nc` and `get` MIDI information from any MIDI device and do whatever you want w"
"ith the values. You can now choose what your MIDI device will do!"
msgstr "choose"

#: 11.2-MIDI-Out.md:1
msgid "11.2 MIDI Out"
msgstr ""

#: 11.2-MIDI-Out.md:3
msgid "MIDI Out"
msgstr ""

#: 11.2-MIDI-Out.md:5
msgid ""
"In addition to receiving MIDI events we can also send out MIDI events to trigg"
"er and control external hardware synths, keyboards and other devices. Sonic Pi"
" provides a full set of fns for sending various MIDI messages such as:"
msgstr ""

#: 11.2-MIDI-Out.md:9
msgid "Note on - `midi_note_on`"
msgstr ""

#: 11.2-MIDI-Out.md:10
msgid "Note off - `midi_note_off`"
msgstr ""

#: 11.2-MIDI-Out.md:11
msgid "Control change - `midi_cc`"
msgstr ""

#: 11.2-MIDI-Out.md:12
msgid "Pitch bend - `midi_pitch_bend`"
msgstr ""

#: 11.2-MIDI-Out.md:13
msgid "Clock ticks - `midi_clock_tick`"
msgstr ""

#: 11.2-MIDI-Out.md:15
msgid ""
"There are many other supported MIDI messages too - check out the API documenta"
"tion for all the other fns that start with `midi_`."
msgstr ""

#: 11.2-MIDI-Out.md:18
msgid "Connecting to a MIDI Device"
msgstr ""

#: 11.2-MIDI-Out.md:20
msgid ""
"In order to send a MIDI message to an external device, we must first have conn"
"ected it. Check out the subsection 'Connecting a MIDI Controller' in section 1"
"1.1 for further details. Note that if you're using USB, connecting to a device"
" which you're sending to (rather than receiving from) is the same procedure. H"
"owever, if you're using the classic DIN connectors, make sure you connect to t"
"he MIDI out port of your computer. You should see your MIDI device listed in t"
"he preferences pane."
msgstr ""

#: 11.2-MIDI-Out.md:29
msgid "Sending MIDI events"
msgstr ""

#: 11.2-MIDI-Out.md:31
msgid ""
"The many `midi_*` fns work just like `play`, `sample` and `synth` in that they"
" send a message at the current (logical) time. For example, to spread out call"
"s to the `midi_*` fns you need to use `sleep` just like you did with `play`. L"
"et's take a look:"
msgstr ""

#: 11.2-MIDI-Out.md:36
#, no-wrap
msgid "midi_note_on :e3, 50"
msgstr ""

#: 11.2-MIDI-Out.md:40
msgid ""
"This will send a MIDI note on event to the connected MIDI device with velocity"
" 50. (Note that Sonic Pi will automatically convert notes in the form `:e3` to"
" their corresponding MIDI number such as 52 in this case.)"
msgstr ""

#: 11.2-MIDI-Out.md:44
msgid ""
"If your connected MIDI device is a synthesiser, you should be able to hear it "
"playing a note. To disable it use `midi_note_off`:"
msgstr ""

#: 11.2-MIDI-Out.md:47
#, no-wrap
msgid "midi_note_off :e3"
msgstr ""

#: 11.2-MIDI-Out.md:51
msgid "Selecting a MIDI device"
msgstr ""

#: 11.2-MIDI-Out.md:53
msgid ""
"By default, Sonic Pi will send each MIDI message to all connected devices on a"
"ll MIDI channels. This is to make it easy to work with a single connected devi"
"ce without having to configure anything. However, sometimes a MIDI device will"
" treat MIDI channels in a special way (perhaps each note has a separate channe"
"l) and also you may wish to connect more than one MIDI device at the same time"
". In more complicated setups, you may wish to be more selective about which MI"
"DI device receives which message(s) and on which channel."
msgstr ""

#: 11.2-MIDI-Out.md:62
msgid ""
"We can specify which device to send to using the `port:` opt, using the device"
" name as displayed in the preferences:"
msgstr ""

#: 11.2-MIDI-Out.md:65
#, no-wrap
msgid "midi_note_on :e3, port: \"moog_minitaur\""
msgstr ""

#: 11.2-MIDI-Out.md:69
msgid ""
"We can also specify which channel to send to using the `channel:` opt (using a"
" value in the range 1-16):"
msgstr ""

#: 11.2-MIDI-Out.md:72
#, no-wrap
msgid "midi_note_on :e3, channel: 3"
msgstr ""

#: 11.2-MIDI-Out.md:76
msgid ""
"Of course we can also specify both at the same time to send to a specific devi"
"ce on a specific channel:"
msgstr ""

#: 11.2-MIDI-Out.md:79
#, no-wrap
msgid "midi_note_on :e3, port: \"moog_minitaur\", channel: 5"
msgstr ""

#: 11.2-MIDI-Out.md:83
msgid "MIDI Studio"
msgstr ""

#: 11.2-MIDI-Out.md:85
msgid ""
"Finally, a really fun thing to do is to connect the audio output of your MIDI "
"synthesiser to one of the audio inputs of your soundcard. You can then control"
" your synth with code using the `midi_*` fns and also manipulate the audio usi"
"ng `live_audio` and FX:"
msgstr ""

#: 11.2-MIDI-Out.md:90
#, no-wrap
#, fuzzy
msgid ""
"with_fx :reverb, room: 1 do\n"
"  live_audio :moog\n"
"end\n"
"live_loop :moog_trigger do\n"
"  midi (octs :e1, 3).tick, sustain: 0.1\n"
"  sleep 0.125\n"
"end"
msgstr "reverb,"

#: 11.2-MIDI-Out.md:101
msgid ""
"(The fn `midi` is available as a handy shortcut to sending both note on and no"
"te off events with a single command. Check out its documentation for further i"
"nformation)."
msgstr ""

#: 12-OSC.md:1
msgid "12 OSC"
msgstr ""

#: 12-OSC.md:3
msgid "OSC"
msgstr ""

#: 12-OSC.md:5
msgid ""
"In addition to MIDI, another way to get information in and out of Sonic Pi is "
"via the network using a simple protocol called OSC - Open Sound Control. This "
"will let you send messages to and from external programs (both running on your"
" computer and on external computers) which opens up the potential for control "
"way beyond MIDI which has limitations due to its 1980s design."
msgstr ""

#: 12-OSC.md:12
msgid ""
"For example, you could write a program in another programming language which s"
"ends and receives OSC (there are OSC libraries for pretty much every common la"
"nguage) and work directly with Sonic Pi. What you can use this for is only lim"
"ited by your imagination."
msgstr ""

#: 12.1-Receiving-OSC.md:1
msgid "12.1 Receiving OSC"
msgstr ""

#: 12.1-Receiving-OSC.md:3
msgid "Receiving OSC"
msgstr ""

#: 12.1-Receiving-OSC.md:5
#, fuzzy
msgid ""
"By default when Sonic Pi is launched it listens to port 4560 for incoming OSC "
"messages from programs on the same computer. This means that without any confi"
"guration, you can send Sonic Pi an OSC message and it will be displayed in the"
" cue log just like incoming MIDI messages. This also means that any incoming O"
"SC message is also automatically added to the Time State which means you can a"
"lso use `get` and `sync` to work with the incoming data - just like with MIDI "
"and synchronising `live_loops` - see sections 5.7 and 10.2 to recap how this w"
"orks."
msgstr "Tijd toestand"

#: 12.1-Receiving-OSC.md:15
msgid "A Basic OSC Listener"
msgstr ""

#: 12.1-Receiving-OSC.md:17
msgid "Let's build a basic OSC listener:"
msgstr ""

#: 12.1-Receiving-OSC.md:19
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  use_real_time\n"
"  a, b, c = sync \"/osc*/trigger/prophet\"\n"
"  synth :prophet, note: a, cutoff: b, sustain: c\n"
"end"
msgstr ""
"live_loop :bla do\n"
"  use_real_time\n"
"  a, b, c = sync \"/osc*/trigger/prophet\"\n"
"  synth :prophet, note: a, cutoff: b, sustain: c\n"
"end"

#: 12.1-Receiving-OSC.md:27
msgid ""
"In this example we described an OSC path `\"/osc*/trigger/prophet\"` which we're"
" syncing on. This can be any valid OSC path (all letters and numbers are suppo"
"rted and the `/` is used like in a URL to break up the path to multiple words)"
". The `/osc` prefix is added by Sonic Pi to all incoming OSC messages, so we n"
"eed to send an OSC message with the path `/trigger/prophet` for our `sync` to "
"stop blocking and the prophet synth to be triggered."
msgstr ""

#: 12.1-Receiving-OSC.md:36
msgid "Sending OSC to Sonic Pi"
msgstr ""

#: 12.1-Receiving-OSC.md:38
msgid ""
"We can send OSC to Sonic Pi from any programming language that has an OSC libr"
"ary. For example, if we're sending OSC from Python we might do something like "
"this:"
msgstr ""

#: 12.1-Receiving-OSC.md:42
#, no-wrap
msgid ""
"from pythonosc import osc_message_builder\n"
"from pythonosc import udp_client\n"
"sender = udp_client.SimpleUDPClient('127.0.0.1', 4560)\n"
"sender.send_message('/trigger/prophet', [70, 100, 8])"
msgstr ""

#: 12.1-Receiving-OSC.md:50
msgid ""
"Or, if we're sending OSC from Clojure we might do something like this from the"
" REPL:"
msgstr ""

#: 12.1-Receiving-OSC.md:52
#, no-wrap
msgid ""
"(use 'overtone.core)\n"
"(def c (osc-client \"127.0.0.1\" 4560))\n"
"(osc-send c \"/trigger/prophet\" 70 100 8)"
msgstr ""

#: 12.1-Receiving-OSC.md:58
msgid "Receiving from External Machines"
msgstr ""

#: 12.1-Receiving-OSC.md:60
msgid ""
"For security reasons, by default Sonic Pi does not let remote machines send it"
" OSC messages. However, you can enable support for remote machines in Preferen"
"ces->IO->Network->Receive Remote OSC Messages. Once you've enabled this, you c"
"an receive OSC messages from any computer on your network. Typically the sendi"
"ng machine will need to know your IP address (a unique identifier for your com"
"puter on your network - kind of like a phone number or an email address). You "
"can discover the IP address of your computer by looking at the IO section of t"
"he preferences pane. (If your machine happens to have more than one IP address"
", hovering the mouse over the listed address will pop up with a list of all kn"
"own addresses)."
msgstr ""

#: 12.1-Receiving-OSC.md:72
msgid ""
"Note, some programs such as TouchOSC for iPhone and Android support sending OS"
"C as a standard feature. So, once you're listening to remote machines and know"
" your IP address you can instantly start sending messages from apps like Touch"
"OSC which enable you to build your own custom touch controls with sliders, but"
"tons, dials etc. This can provide you with an enormous range of input options."
msgstr ""

#: 12.2-Sending-OSC.md:1
msgid "12.2 Sending OSC"
msgstr ""

#: 12.2-Sending-OSC.md:3
msgid "Sending OSC"
msgstr ""

#: 12.2-Sending-OSC.md:5
msgid ""
"In addition to receiving OSC and working with it using Time State, we can also"
" send out OSC messages in time with our music (just like we can send out MIDI "
"messages in time with our music). We just need to know which IP address and po"
"rt we're sending to. Let's give it a try:"
msgstr ""

#: 12.2-Sending-OSC.md:10
#, no-wrap
msgid ""
"use_osc \"localhost\", 4560\n"
"osc \"/hello/world\""
msgstr ""

#: 12.2-Sending-OSC.md:15
msgid ""
"If you run the code above, you'll notice that Sonic Pi is sending itself an OS"
"C message! This is because we set the IP address to the current machine and th"
"e port to the default OSC in port. This is essentially the same as posting a l"
"etter to yourself - the OSC packet is created, leaves Sonic Pi, gets to the ne"
"twork stack of the operating system which then routes the packed back to Sonic"
" Pi and then it's received as a standard OSC message and is visible in the cue"
" logger as the incoming message `/osc:127.0.0.1:4560/hello/world`. (Notice how"
" Sonic Pi automatically prefixes all incoming OSC messages with `/osc` and the"
"n the hostname and port of the sender.)"
msgstr ""

#: 12.2-Sending-OSC.md:25
msgid "Sending OSC to other programs"
msgstr ""

#: 12.2-Sending-OSC.md:27
msgid ""
"Of course, sending OSC messages to ourselves may be fun but it's not that usef"
"ul. The real benefit starts when we send messages to other programs:"
msgstr ""

#: 12.2-Sending-OSC.md:32
#, no-wrap
msgid ""
"use_osc \"localhost\", 123456\n"
"osc \"/hello/world\""
msgstr ""

#: 12.2-Sending-OSC.md:37
msgid ""
"In this case we're assuming there's another program on the same machine listen"
"ing to port 123456. If there is, then it will receive a `\"/hello/world` OSC me"
"ssage with which it can do what it wants."
msgstr ""

#: 12.2-Sending-OSC.md:41
msgid ""
"If our program is running on another machine, we need to know its IP address w"
"hich we use instead of `\"localhost\"`:"
msgstr ""

#: 12.2-Sending-OSC.md:44
#, no-wrap
msgid ""
"use_osc \"192.168.10.23\", 123456\n"
"osc \"/hello/world\""
msgstr ""

#: 12.2-Sending-OSC.md:49
msgid ""
"Now we can send OSC messages to any device reachable to us via our local netwo"
"rks and even the internet!"
msgstr ""

#: 13-Multichannel-Audio.md:1
msgid "13 Multichannel Audio"
msgstr ""

#: 13-Multichannel-Audio.md:3
msgid "Multichannel Audio"
msgstr ""

#: 13-Multichannel-Audio.md:5
msgid ""
"So far, in terms of sound production, we've explored triggering synths and rec"
"orded sounds via the fns `play`, `synth` and `sample`. These have then generat"
"ed audio which has played through our stereo speaker system. However, many com"
"puters also have the ability to input sound, perhaps through a microphone, in "
"addition to the ability to send sound out to more than two speakers. Often, th"
"is capability is made possible through the use of an external sound card - the"
"se are available for all platforms. In this section of the tutorial we'll take"
" a look at how we can take advantage of these external sound cards and effortl"
"essly work with multiple channels of audio in and out of Sonic Pi."
msgstr ""

#: 13.1-Sound-In.md:1
msgid "13.1 Sound In"
msgstr ""

#: 13.1-Sound-In.md:3
msgid "Sound In"
msgstr ""

#: 13.1-Sound-In.md:5
msgid ""
"One simple (and perhaps familiar) way of accessing sound inputs is using our f"
"riend `synth` by specifying the `:sound_in` synth:"
msgstr ""

#: 13.1-Sound-In.md:7
#, no-wrap
msgid "synth :sound_in"
msgstr ""

#: 13.1-Sound-In.md:11
msgid ""
"This will operate just like any synth such as `synth :dsaw` with the exception"
" that the audio generated will be read directly from the first input of your s"
"ystem's sound card. On laptops, this is typically the built-in microphone, but"
" if you have an external sound card, you can plug any audio input to the first"
" input."
msgstr ""

#: 13.1-Sound-In.md:17
msgid "Increasing the Duration"
msgstr "Duurtijd vergroten"

#: 13.1-Sound-In.md:19
msgid ""
"One thing you might notice is that just like `synth :dsaw` the `:sound_in` syn"
"th only lasts for 1 beat as it has a standard envelope. If you'd like to keep "
"it open for a little longer, change the ADSR envelope settings. For example th"
"e following will keep the synth open for 8 beats before closing the connection"
":"
msgstr ""

#: 13.1-Sound-In.md:22
#, no-wrap
msgid "synth :sound_in, sustain: 8"
msgstr ""

#: 13.1-Sound-In.md:28
msgid ""
"Of course, just like any normal synth, you can easily layer on effects with th"
"e FX block:"
msgstr ""

#: 13.1-Sound-In.md:30
#, no-wrap
msgid ""
"with_fx :reverb do\n"
"  with_fx :distortion do\n"
"    synth :sound_in, sustain: 8\n"
"  end\n"
"end"
msgstr ""

#: 13.1-Sound-In.md:38
msgid ""
"If you have plugged in a guitar to your first input, you should be able to hea"
"r it with distortion and reverb until the synth terminates as expected."
msgstr ""

#: 13.1-Sound-In.md:40
msgid ""
"You are free to use the `:sound_in` synth as many times as you like concurrent"
"ly (just like you would do with any normal synth). For example, the following "
"will play two `:sound_in` synths at the same time - one through distortion and"
" one through reverb:"
msgstr ""

#: 13.1-Sound-In.md:42
#, no-wrap
msgid ""
"with_fx :distortion do\n"
"  synth :sound_in, sustain: 8\n"
"end\n"
"with_fx :reverb do  \n"
"  synth :sound_in, sustain: 8\n"
"end"
msgstr ""

#: 13.1-Sound-In.md:52
msgid "Multiple Inputs"
msgstr "Meerdere inputs"

#: 13.1-Sound-In.md:54
msgid ""
"You can select which audio input you want to play with the `input:` opt. You c"
"an also specify a stereo input (two consecutive inputs) using the `:sound_in_s"
"tereo` synth. For example, if you have a sound card with at least three inputs"
", you can treat the first two as a stereo stream and add distortion and the th"
"ird as a mono stream and add reverb with the following code:"
msgstr ""

#: 13.1-Sound-In.md:61
#, no-wrap
msgid ""
"with_fx :distortion do\n"
"  synth :sound_in_stereo, sustain: 8, input: 1\n"
"end\n"
"with_fx :reverb do  \n"
"  synth :sound_in, sustain: 8, input: 3\n"
"end"
msgstr ""

#: 13.1-Sound-In.md:72
msgid "Potential Issues"
msgstr ""

#: 13.1-Sound-In.md:74
msgid ""
"However, although this is a useful technique, there are a couple of limitation"
"s to this approach. Firstly, it only works for a specific duration (due to it "
"having an ADSR envelope) and secondly, there's no way to switch the FX around "
"once the synth has been triggered. Both of these things are typical requests w"
"hen working with external audio feeds such as microphones, guitars and externa"
"l synthesisers. We'll therefore take a look at Sonic Pi's solution to the prob"
"lem of manipulating a (potentially) infinite stream of live audio input: `live"
"_audio`."
msgstr ""

#: 13.2-Live-Audio.md:1
msgid "13.2 Live Audio"
msgstr ""

#: 13.2-Live-Audio.md:3
msgid "Live Audio"
msgstr "Live audio"

#: 13.2-Live-Audio.md:5
msgid ""
"The `:sound_in` synth as described in the previous section provides a very fle"
"xible and familiar method for working with input audio. However, as also discu"
"ssed it has a few issues when working with a single input of audio as a single"
" instrument (such as a voice or guitar). By far the best approach to working w"
"ith a single continuous stream of audio is to use `live_audio`."
msgstr ""

#: 13.2-Live-Audio.md:12
msgid "A Named Audio Input"
msgstr ""

#: 13.2-Live-Audio.md:14
msgid ""
"`live_audio` shares a couple of core design constraints with `live_loop` (henc"
"e the similar name). Firstly it must have a unique name and secondly only one "
"`live_audio` stream with that name may exist at any one time. Let's take a loo"
"k:"
msgstr ""

#: 13.2-Live-Audio.md:19 13.2-Live-Audio.md:92
#, no-wrap
msgid "live_audio :foo"
msgstr "live_audio :bla"

#: 13.2-Live-Audio.md:23
msgid ""
"This code will act in a similar fashion to `synth :sound_in` with some key dif"
"ferences: it runs forever (until you explicitly stop it) and you can *move* it"
" to new FX contexts dynamically."
msgstr ""

#: 13.2-Live-Audio.md:28
msgid "Working with FX"
msgstr ""

#: 13.2-Live-Audio.md:30
msgid ""
"On initial triggering `live_audio` works exactly as you might expect it to wor"
"k with FX. For example, to start a live audio stream with added reverb simply "
"use a `:reverb` FX block:"
msgstr ""

#: 13.2-Live-Audio.md:34
#, no-wrap
msgid ""
"with_fx :reverb do\n"
"  live_audio :foo\n"
"end"
msgstr ""
"with_fx :reverb do\n"
"  live_audio :bla\n"
"end"

#: 13.2-Live-Audio.md:40
msgid ""
"However, given that `live_audio` runs forever (at least until you stop it) it "
"would be pretty limiting if, like typical synths, the live audio was bound wit"
"hin the `:reverb` FX for its entire existence. Luckily this is not the case an"
"d it was designed to be easy to move between different FX. Let's try it. Run t"
"he code above to hear live audio coming directly from the first input of your "
"sound card. Note, if you're using a laptop, this will typically be out of your"
" built-in microphone, so it's recommended to use headphones to stop feedback."
msgstr ""

#: 13.2-Live-Audio.md:49
msgid ""
"Now, whilst you're still hearing the audio live from the sound card with rever"
"b, change the code to the following:"
msgstr ""
"Wijzig, terwijl je de live audio van de geluidskaart nog met reverb hoort, nu "
"de code naar het volgende:"

#: 13.2-Live-Audio.md:52
#, no-wrap
msgid ""
"with_fx :echo do\n"
"  live_audio :foo\n"
"end"
msgstr ""
"with_fx :echo do\n"
"  live_audio :bla\n"
"end"

#: 13.2-Live-Audio.md:58
msgid ""
"Now, hit Run, and you'll immediately hear the audio played through the echo FX"
" and no longer through reverb. If you wanted them both, just edit the code aga"
"in and hit Run:"
msgstr ""

#: 13.2-Live-Audio.md:62
#, no-wrap
msgid ""
"with_fx :reverb do\n"
"  with_fx :echo do\n"
"    live_audio :foo\n"
"  end\n"
"end"
msgstr ""
"with_fx :reverb do\n"
"  with_fx :echo do\n"
"    live_audio :bla\n"
"  end\n"
"end"

#: 13.2-Live-Audio.md:70
#, fuzzy
msgid ""
"It's important to point out that you can call `live_audio :foo` from any threa"
"d or live loop and it will move the live audio synth to *that* thread's curren"
"t FX context. You could therefore easily have multiple live loops calling `liv"
"e_audio :foo` at different times resulting in the FX context being automatical"
"ly swapped around for some interesting results."
msgstr "foo"

#: 13.2-Live-Audio.md:78
msgid "Stopping live audio"
msgstr ""

#: 13.2-Live-Audio.md:80
msgid ""
"Unlike standard synths, as `live_audio` has no envelope, it will continue runn"
"ing forever (even if you delete the code, just like a function is still define"
"d in memory if you delete the code in the editor). To stop it, you need to use"
" the `:stop` arg:"
msgstr ""

#: 13.2-Live-Audio.md:85
#, no-wrap
msgid "live_audio :foo, :stop"
msgstr "live_audio :bla, :stop"

#: 13.2-Live-Audio.md:89
msgid "It can easily be restarted by calling it without the `:stop` arg again:"
msgstr ""

#: 13.2-Live-Audio.md:96
msgid ""
"Additionally all running live audio synths are stopped when you hit the global"
" Stop button (as with all other running synths and FX)."
msgstr ""

#: 13.2-Live-Audio.md:99
msgid "Stereo input"
msgstr ""

#: 13.2-Live-Audio.md:101
msgid ""
"With respect to audio channels, by default `live_audio` acts similarly to the "
"`:sound_in` synth in that it takes a single mono input stream of audio and con"
"verts it to a stereo stream using the specified panning. However, just like `:"
"sound_in_stereo` it's also possible to tell `live_audio` to read two consecuti"
"ve audio inputs and treat them as the left and right channels directly. This i"
"s achieved via the `:stereo` opt. For example, to treat input 2 as the left si"
"gnal and input 3 as the right signal, you need to configure the `input:` opt t"
"o 2 and enable stereo mode as follows:"
msgstr ""

#: 13.2-Live-Audio.md:111
#, no-wrap
msgid "live_audio :foo, stereo: true, input: 2"
msgstr "live_audio :bla, stereo: true, input: 2"

#: 13.2-Live-Audio.md:115
msgid ""
"Note that once you have started a live audio stream in stereo mode, you cannot"
" change it to mono without stopping and starting. Similarly, if you start it i"
"n the default mono mode, you can't switch to stereo without starting and stopp"
"ing the stream."
msgstr ""

#: 13.3-Sound-Out.md:1
msgid "13.3 Sound Out"
msgstr ""

#: 13.3-Sound-Out.md:3
msgid "Sound Out"
msgstr ""

#: 13.3-Sound-Out.md:5
msgid ""
"So far in this section we've looked at how to get multiple streams of audio in"
"to Sonic Pi - either through the use of the `:sound_in` synth or via the power"
"ful `live_audio` system. In addition to working with multiple streams of input"
" audio, Sonic Pi can also output multiple streams of audio. This is achieved v"
"ia the `:sound_out` FX."
msgstr ""

#: 13.3-Sound-Out.md:11
msgid "Output contexts"
msgstr ""

#: 13.3-Sound-Out.md:13
msgid ""
"Let's quickly recap on how Sonic Pi's synths and FX output their audio to thei"
"r current FX context. For example, consider the following:"
msgstr ""

#: 13.3-Sound-Out.md:16
#, no-wrap
msgid ""
"with_fx :reverb do    # C\n"
"  with_fx :echo do    # B\n"
"    sample :bd_haus   # A\n"
"  end\n"
"end"
msgstr ""

#: 13.3-Sound-Out.md:24
msgid ""
"The simplest way to understand what's happening with the audio stream is to st"
"art at the innermost audio context and work our way out. In this case, the inn"
"ermost context is labelled `A` and is the `:bd_haus` sample being triggered. T"
"he audio for this goes directly into its context which is `B` - the `:echo` FX"
". This then adds echo to the incoming audio and outputs it to its context whic"
"h is `C` - the `:reverb` FX. This then adds reverb to the incoming audio and o"
"utputs to its context which is the top level - the left and right speakers (ou"
"tputs 1 and 2 in your audio card). The audio flows outwards with a stereo sign"
"al all the way through."
msgstr ""

#: 13.3-Sound-Out.md:35
msgid "Sound Out FX"
msgstr ""

#: 13.3-Sound-Out.md:37
msgid ""
"The above behaviour is true for all synths (including `live_audio`) and the ma"
"jority of FX with the exception of `:sound_out`. The `:sound_out` FX does two "
"things. Firstly it outputs its audio to its external context as described abov"
"e. Secondly it *also* outputs its audio directly to an output on your sound ca"
"rd. Let's take a look:"
msgstr ""

#: 13.3-Sound-Out.md:43
#, no-wrap
msgid ""
"with_fx :reverb do      # C\n"
"  with_fx :sound_out, output: 3 do # B\n"
"    sample :bd_haus     # A\n"
"  end\n"
"end"
msgstr ""

#: 13.3-Sound-Out.md:51
msgid ""
"In this example, our `:bd_haus` sample outputs its audio to its external conte"
"xt which is the `:sound_out` FX. This in turn outputs its audio to its externa"
"l context the `:reverb` FX (as expected). However, it *also* outputs a mono mi"
"x to the 3rd output of the system's soundcard. The audio generated within `:so"
"und_out` therefore has two destinations - the `:reverb` FX and audio card outp"
"ut 3."
msgstr ""

#: 13.3-Sound-Out.md:58
msgid "Mono and Stereo out"
msgstr ""

#: 13.3-Sound-Out.md:60
#, fuzzy
msgid ""
"As we've seen, by default, the `:sound_out` FX outputs a mono mix of the stere"
"o input to a specific channel in addition to passing the stereo feed to the ou"
"ter context (as expected). If outputting a mono mix isn't precisely what you w"
"ant to do, there are a number of alternative options. Firstly, by using the `m"
"ode:` opt you can choose to output just the left or just the right input signa"
"l to the audio card. Or you can use the `:sound_out_stereo` FX to output to tw"
"o consecutive sound card outputs. See the function documentation for more info"
"rmation and examples."
msgstr "choose"

#: 13.3-Sound-Out.md:70
msgid "Direct Out"
msgstr ""

#: 13.3-Sound-Out.md:72
msgid ""
"As we have also seen, the default behaviour for `:sound_out` and `:sound_out_s"
"tereo` is to send the audio both to their external context (as is typical of a"
"ll FX) *and* to the specified output on your soundcard. However, occasionally "
"you may wish to *only* send to the output on your soundcard and not to the ext"
"ernal context (and therefore not have any chance of the sound being mixed and "
"sent to the standard output channels 1 and 2). This is possible by using the s"
"tandard FX opt `amp:` which operates on the audio *after* the FX has been able"
" to manipulate the audio:"
msgstr ""

#: 13.3-Sound-Out.md:82
#, no-wrap
#, fuzzy
msgid ""
"with_fx :sound_out, output: 3, amp: 0 do # B\n"
"  sample :loop_amen                      # A\n"
"end"
msgstr "sample :loop_amen"

#: 13.3-Sound-Out.md:88
msgid ""
"In the above example, the `:loop_amen` sample is sent to its outer context, th"
"e `:sound_out` FX. This then sends a mono mix to audio card output 3 and then "
"multiplies the audio by 0 which essentially silences it. It is this silenced s"
"ignal which is then sent out to the `:sound_out`'s outer context which is the "
"standard output. Therefore with this code, the default output channels will no"
"t receive any audio, and channel 3 will receive a mono mix of the amen drum br"
"eak."
msgstr ""
"In het bovenstaande voorbeeld is de `:loop_amen` sample verstuurd naar zijn bu"
"itenste context, de `:sound_out` FX. Dit stuurt dan een mono mix naar audiokaa"
"rt output 3 en vermenigvuldigd de audio vervolgens met 0 wat het feitelijk ver"
"stomt. Het is dit verstomde signaal dat wordt uitgestuurd naar de buitenste co"
"ntext van `:sound_out` wat de standaard output is. Daarom ontvangen de default"
" outputkanalen geen audio met deze code en kanaal drie zal een mono mix van de"
" amen drum rust ontvangen."

#: 14-Conclusions.md:1
msgid "14 Conclusions"
msgstr "14 conclusies"

#: 14-Conclusions.md:3
msgid "Conclusions"
msgstr "Conclusies"

#: 14-Conclusions.md:5
msgid ""
"This concludes the Sonic Pi introductory tutorial. Hopefully you've learned so"
"mething along the way. Don't worry if you feel you didn't understand everythin"
"g - just play and have fun and you'll pick things up in your own time. Feel fr"
"ee to dive back in when you have a question that might be covered in one of th"
"e sections."
msgstr ""
"Dit rond Sonic Pi's handleiding af. Hopelijk heb je terloops iets bijgeleerd. "
"Maak je geen zorgen als het voelt alsof je niet alles begrepen hebt - speel er"
" gewoon mee en heb plezier in wat je doet, zo zal je op je eigen tempo nieuwe "
"leerstof tot je opnemen. Duik gerust terug in een sectie waarover je nog vrage"
"n hebt."

#: 14-Conclusions.md:11
#, fuzzy
msgid ""
"If you have any questions that haven't been covered in the tutorial, then plea"
"se jump onto the [Sonic Pi community forums](https://in-thread.sonic-pi.net/) "
"and ask your question there. You'll find someone friendly and willing to lend "
"a hand."
msgstr ""
"Hebt je vragen die nog niet behandeld zijn in de tutorial, ga even naar [Sonic"
" Pi forums] (http://groups.google.com/group/sonic-pi/) en stel je vraag daar. "
"Dan vind je wel iemand die vriendelijk en bereid is om een handje te helpen."

#: 14-Conclusions.md:16
msgid ""
"Finally, I also invite you to take a deeper look at the rest of the documentat"
"ion in this help system. There are a number of features that haven't been cove"
"red in this tutorial that are waiting for your discovery."
msgstr ""
"Ten slotte, nodigen ik je ook uit om je wat nader tot de rest van de documenta"
"tie in dit help-systeem te wenden. Er zijn een heleboel functies die nog niet "
"behandeld zijn in deze handleiding en die jij nog kan ontdekken."

#: 14-Conclusions.md:21
msgid ""
"So play, have fun, share your code, perform for your friends, show your screen"
"s and remember:"
msgstr ""
"Dus speel, heb veel plezier, deel jouw code, treed op voor vrienden, toon jouw"
" scherm en vergeet niet:"

#: 14-Conclusions.md:24
msgid "*There are no mistakes, only opportunities.*"
msgstr "*Er zijn geen fouten, alleen maar kansen*"

#: 14-Conclusions.md:26
#, fuzzy
msgid "[Sam Aaron](https://twitter.com/samaaron)"
msgstr "[Sam Aaron](http://twitter.com/samaaron)"

#: A-Articles.md:1
msgid "A Appendix A - MagPi Articles"
msgstr "A Appendix A - MagPi artikelen"

#: A-Articles.md:3
msgid "MagPi Articles"
msgstr "MagPi artikelen"

#: A-Articles.md:5
msgid "Appendix A collects all the Sonic Pi articles written for the MagPi magazine."
msgstr ""
"Bijlage A verzamelt alle de Sonic Pi artikelen geschreven voor het tijdschrift"
" MagPi."

#: A-Articles.md:8
msgid "Dive into Topics"
msgstr "Duik in Onderwerpen"

#: A-Articles.md:10
msgid ""
"These articles aren't meant to be read in any strict order and contain a lot o"
"f cross-over material from the tutorial itself. Rather than try and teach you "
"all of Sonic Pi, they instead each focus on a specific aspect of Sonic Pi and "
"cover it in a fun and accessible way."
msgstr ""
"Deze artikelen zijn niet bedoeld om in een strikte volgorde  te worden gelezen"
" en bevatten veel cross-over materiaal uit de tutorial zelf. In plaats van te "
"proberen je alles van Sonic Pi te leren, zijn ze elk gericht op een specifiek "
"aspect van Sonic Pi en dit op een leuke en toegankelijke manier."

#: A-Articles.md:15
msgid "Read the MagPi"
msgstr "Lees de MagPi"

#: A-Articles.md:17
msgid ""
"You can see them in their glorious professionally typeset form in the free PDF"
" downloads of The MagPi here: https://www.raspberrypi.org/magpi/"
msgstr ""
"Je kan ze in hun glorieuze professioneel ✓ vorm zien in de gratis PDF-download"
"s van de MagPi : https://www.raspberrypi.org/magpi/"

#: A-Articles.md:20
msgid "Suggest a Topic"
msgstr "Een onderwerp suggereren"

#: A-Articles.md:22
msgid ""
"If you don't see a topic that interests you covered in these articles - why no"
"t suggest one? The easiest way to do that is to tweet your suggestion to [@Son"
"ic_Pi](http://twitter.com/sonic_pi). You never know - your suggestion might be"
" the subject of the next article!"
msgstr ""
"Mocht het zijn dart er een onderwerp ontbreekt dat jou interesseert - waarom z"
"ou je daar dan geen suggestie over kunnen maken? De makkelijkste manier om dit"
" te doen is jouw suggestie tweeten naar [@Sonic_Pi](http://twitter.com/sonic_p"
"i). Jouw suggestie kan wel eens het onderwerp van het volgende artikel zijn!"

#: A.01-tips.md:1
msgid "A.1 Tips for Sonic Pi"
msgstr "A.1 Tips voor Sonic Pi"

#: A.01-tips.md:3
msgid "Five Top Tips"
msgstr "Vijf Top Tips"

#: A.01-tips.md:5
msgid "1. There are no mistakes"
msgstr "1. Er bestaan geen fouten"

#: A.01-tips.md:7
msgid ""
"The most important lesson to learn with Sonic Pi is that there really are no m"
"istakes. The best way to learn is to just try and try and try. Try lots of dif"
"ferent things out, stop worrying whether your code sounds good or not and star"
"t experimenting with as many different synths, notes, FX and opts as possible."
" You'll discover a lot of things that make you laugh because they sound just a"
"wful and some real gems that sound truly amazing. Simply drop the things you d"
"on't like and keep the things you do. The more 'mistakes' you allow yourself t"
"o make the quicker you'll learn and discover your personal coding sound."
msgstr ""
"De belangrijkste les om leren in Sonic Pi is dat er geen echte fouten bestaan."
" De beste manier van leren is om gewoon te  proberen en te proberen en te prob"
"eren. Probeer verschillende dingen uit, stop ermee je zorgen te maken of je co"
"de nu goed klinkt of niet en begin te experimenteren met zoveel mogelijk versc"
"hillende synths, noten, FX als mogelijk is. Je zal ontdekken dat je een helebo"
"el dingen maakt die je aan het lachen brengen omdat het gewoon verschrikkelijk"
" klinkt en soms zullen er echte juweeltjes tussen zitten, die echt geweldig kl"
"inken. Laat gewoon de dingen vallen die u niet graag doet en hou van wat je do"
"et. Hoe meer `fouten` je jezelf toelaat te maken hoe sneller je zaken zal lere"
"n en jouw persoonlijke geluids codering zal ontdekken."

#: A.01-tips.md:18
msgid "2. Use the FX"
msgstr "2. FX gebruiken"

#: A.01-tips.md:20
msgid ""
"Say you've already mastered the Sonic Pi basics of making sounds with `sample`"
", `play`? What's next? Did you know that Sonic Pi supports over 27 studio FX t"
"o change the sound of your code? FX are like fancy image filters in drawing pr"
"ograms except that instead of blurring or making something black and white, yo"
"u can add things like reverb, distortion and echo to your sound. Think of it l"
"ike sticking the cable from your guitar to an effects pedal of your choice and"
" then into the amplifier. Luckily, Sonic Pi makes using FX really easy and req"
"uires no cables! All you need to do is to choose which section of your code yo"
"u'd like the FX added to and wrap it with the FX code. Let's look at an exampl"
"e. Say you had the following code:"
msgstr ""
"Laat ons aan nemen dat je de basis om klanken te maken in Sonic Pi met `sample"
"`, `play`. Wat nu? Wist je dat Sonic Pi over de 27 studio ondersteunt om de so"
"und van je code te veranderen. Effecten zijn zoals beeldfilters in tekenprogra"
"mma's maar in plaats van zaken te vervagen of zwart-wit te maken, kan je zaken"
" aan jouw geluid toevoegen zoals reverb, distortion, en echo. Het concept isq "
"zoals je een geluidskabel vanuit je gitaar in de effectenpedaal van jou keuze "
"te steken en vervolgens de versterker in. Gelukkig maakt Sonic Pi je het heel "
"makkelijk om FX te gebruiken en dit zonder kabels! Het enige wat je moet doen "
"is het fragment in jouw code selecteren waar je FX wil op gebruiken en deze me"
"t de FX code omhullen. Laten we naar een voorbeeld kijken. Stel dat je deze co"
"de hebt:"

#: A.01-tips.md:32
#, no-wrap
msgid ""
"sample :loop_garzul\n"
"16.times do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"
msgstr ""
"sample :loop_garzul\n"
"16.times do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"

#: A.01-tips.md:41
msgid ""
"If you wanted to add FX to the `:loop_garzul` sample, you'd just tuck it insid"
"e a `with_fx` block like this:"
msgstr ""
"Als je een FX aan de  `:loop_garzul` sample wil toevoegen, moet je deze gewoon"
" in een `with_fx` blok steken zoals hier:"

#: A.01-tips.md:44
#, no-wrap
msgid ""
"with_fx :flanger do\n"
"  sample :loop_garzul\n"
"end\n"
"16.times do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"
msgstr ""
"with_fx :flanger do\n"
"  sample :loop_garzul\n"
"end\n"
"16.times do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"

#: A.01-tips.md:55
msgid ""
"Now, if you wanted to add FX to the bass drum, go and wrap that with `with_fx`"
" too:"
msgstr ""
"Als je nu ook een FX aan de bass drum wil voegen, omhul deze dan ook met een  "
"`with_fx`:"

#: A.01-tips.md:58
#, no-wrap
msgid ""
"with_fx :flanger do\n"
"  sample :loop_garzul\n"
"end\n"
"with_fx :echo do\n"
"  16.times do\n"
"    sample :bd_haus\n"
"    sleep 0.5\n"
"  end\n"
"end"
msgstr ""
"with_fx :flanger do\n"
"  sample :loop_garzul\n"
"end\n"
"with_fx :echo do\n"
"  16.times do\n"
"    sample :bd_haus\n"
"    sleep 0.5\n"
"  end\n"
"end"

#: A.01-tips.md:71
msgid ""
"Remember, you can wrap *any* code within `with_fx` and any sounds created will"
" pass through that FX."
msgstr ""
"Denk eraan , je kan *elke* code omhullen met  `with_fx` en elke klank hierin g"
"ecreëerd zal door deze FX passeren."

#: A.01-tips.md:75
msgid "3. Parameterise your synths"
msgstr "3. Het parametreren van jouw synths"

#: A.01-tips.md:77
msgid ""
"In order to really discover your coding sound you'll soon want to know how to "
"modify and control synths and FX. For example, you might want to change the du"
"ration of a note, add more reverb, or change the time between echoes. Luckily,"
" Sonic Pi gives you an amazing level of control to do exactly this with specia"
"l things called optional parameters or opts for short. Let's take a quick look"
". Copy this code into a workspace and hit run:"
msgstr ""
"Om je eigen geluid te gaan ontwikkelen, zal je snel willen leren, hoe je synth"
"s en Fx kan veranderen en controllen. Zo wil je bijvoorbeeld de lengte van een"
" noot veranderen, of wil je wat meer reverb toevoegen, of de tijdsinstellingen"
" van een echo aanpassen. Gelukkig geeft Sonic Pi de mogelijkheid om dit op een"
" hoog niveau te gaan doen met behulp van optionele parameters of in het kort: "
"opts. Laten we dit even bekijken. Kopieer de volgende code in een werkveld en "
"klik afspelen:"

#: A.01-tips.md:85
#, no-wrap
msgid "sample :guit_em9"
msgstr "sample :guit_em9"

#: A.01-tips.md:89
msgid ""
"Ooh, a lovely guitar sound! Now, let's start playing with it. How about changi"
"ng its rate?"
msgstr ""
"Ooh, een mooie gitaarklank! Nu gaan we hiermee spelen. Wat dacht je van zijn k"
"oers te veranderen?"

#: A.01-tips.md:92 A.17-sample-stretching.md:25
#, no-wrap
msgid "sample :guit_em9, rate: 0.5"
msgstr "sample :guit_em9, rate: 0.5"

#: A.01-tips.md:96
msgid ""
"Hey, what's that `rate: 0.5` bit I just added at the end? That's called an opt"
". All of Sonic Pi's synths and FX support them and there's loads to play aroun"
"d with. They're also available for FX too. Try this:"
msgstr ""
"Hé, wat is dat stukje `rate: 0.5`, dat daar op het einde staat? Dat is een opt"
"! Alle synths en FX van Sonic Pi ondersteunen deze en er zijn er tal van besch"
"ikbaar om mee te spelen. Probeer deze eens:"

#: A.01-tips.md:100
#, no-wrap
msgid ""
"with_fx :flanger, feedback: 0.6 do\n"
"  sample :guit_em9\n"
"end"
msgstr ""
"with_fx :flanger, feedback: 0.6 do\n"
"  sample :guit_em9\n"
"end"

#: A.01-tips.md:106
msgid ""
"Now, try increasing that feedback to 1 to hear some crazy sounds! Read the doc"
"s for full details on all the many opts available to you."
msgstr ""
"Probeer nu de feedback te verhogen naar 1 om maffe klanken te horen. Lees de d"
"ocumentatie voor details over de beschikbare opts."

#: A.01-tips.md:110
#, fuzzy
msgid "4. Live Code"
msgstr "5. Live Code"

#: A.01-tips.md:112
msgid ""
"The best way to quickly experiment and explore Sonic Pi is to live code. This "
"allows you to start off some code and continually change and tweak it whilst i"
"t's still playing. For example, if you don't know what the cutoff parameter do"
"es to a sample, just play around. Let's have a try! Copy this code into one of"
" your Sonic Pi workspaces:"
msgstr ""
"De beste manier om zaken snel te ontdekken in Sonic Pi is experimenteren en li"
"ve te coderen. Dit laat jou toe om stukjes code op te starten en deze voortdur"
"en te veranderen en te controllen terwijl je speelt. Bijvoorbeeld, als je niet"
" weet wat de cutoff parameter doet met een sample, speel er gewoon mee, probee"
"r het. Kopieer deze code in één van je werkvelden:"

#: A.01-tips.md:118
#, no-wrap
msgid ""
"live_loop :experiment do\n"
"  sample :loop_amen, cutoff: 70\n"
"  sleep 1.75\n"
"end"
msgstr ""
"live_loop :experiment do\n"
"  sample :loop_amen, cutoff: 70\n"
"  sleep 1.75\n"
"end"

#: A.01-tips.md:125
msgid ""
"Now, hit run and you'll hear a slightly muffled drum break. Now, change the `c"
"utoff:` value to `80` and hit run again. Can you hear the difference? Try `90`"
", `100`, `110`..."
msgstr ""
"Klik nu op afspelen en hoor hierbij een licht gedempte drum break. Verander de"
" cutoff waarde nu naar `80` en klik opnieuw op afspelen. Hoor je het verschil?"
" Probeer  `90`, `100`, `110`..."

#: A.01-tips.md:129
msgid ""
"Once you get the hang of using `live_loop`s you'll not turn back. Whenever I d"
"o a live coding gig I rely on `live_loop` as much as a drummer relies on their"
" sticks. For more information about live coding check out Section 9 of the bui"
"lt-in tutorial."
msgstr ""
"Eens je het gewoon bent  `live_loop`s te gebruiken zal je nooit meer zonder de"
"ze kunnen. Wanneer ik een live coding doe reken ik hier zwaar op, zoals een dr"
"ummer zijn drumsticks nodig heeft. Voor meer informatie over live coding, kijk"
" naar Sectie 9 van de ingebouwde handleiding."

#: A.01-tips.md:134
msgid "5. Surf the random streams"
msgstr "5. Surfen op random golven"

#: A.01-tips.md:136
msgid ""
"Finally, one thing I love doing is cheating by getting Sonic Pi to compose thi"
"ngs for me. A really great way to do this is using randomisation. It might sou"
"nd complicated but it really isn't. Let's take a look. Copy this into a spare "
"workspace:"
msgstr ""
"Tot slot nog deze, ik hou ervan om een beetje vals te spelen door Sonic Pi in "
"mijn plaats te laten componeren. Een goede manier om dit te verwezenlijken is "
"gebruik te maken van het randomiseren. Misschien lijkt dit een beetje ingewikk"
"eld maar dat is het helemaal niet. Laat ons hiernaar naar kijken. Kopieer deze"
" in een lege buffer:"

#: A.01-tips.md:141
#, no-wrap
msgid ""
"live_loop :rand_surfer do\n"
"  use_synth :dsaw\n"
"  notes = (scale :e2, :minor_pentatonic, num_octaves: 2)\n"
"  16.times do\n"
"    play notes.choose, release: 0.1, cutoff: rrand(70, 120)\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"live_loop :rand_surfer do\n"
"  use_synth :dsaw\n"
"  notes = (scale :e2, :minor_pentatonic, num_octaves: 2)\n"
"  16.times do\n"
"    play notes.choose, release: 0.1, cutoff: rrand(70, 120)\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: A.01-tips.md:152
msgid ""
"Now, when you play this, you'll hear a constant stream of random notes from th"
"e scale `:e2 :minor_pentatonic` played with the `:dsaw` synth. \"Wait, wait! Th"
"at's not a melody\", I hear you shout! Well, here's the first part of the magic"
" trick. Every time we go round the `live_loop` we can tell Sonic Pi to reset t"
"he random stream to a known point. This is a bit like going back in time in th"
"e TARDIS with the Doctor to a particular point in time and space. Let's try it"
" - add the line `use_random_seed 1` to the `live_loop`:"
msgstr ""
"Wanneer je deze afspeelt zal je een constante stroom van random noten horen sp"
"elen in de toonladder `:e2 :minor_pentatonisch` gespeeld met de synth `:dsaw`."
"\" Maar wacht! Dat is geen melodie\" hoor ik jou roepen! Wel, dit is ook het eer"
"ste deel van onze tovertruc. Elke keer we rond  gaan in de `live_loop`, kunnen"
" we Sonic Pi vertellen om de random toeloop naar een gegeven punt te resetten."
" Dit is een beetje zoals in de tijd teruggaan met de dokter in de TARDIS naar "
"een bepaald punt in tijd en ruimte. We proberen de lijn `use_random_seed 1` to"
"e te voegen aan de  `live_loop`:"

#: A.01-tips.md:161
#, no-wrap
msgid ""
"live_loop :rand_surfer do\n"
"  use_random_seed 1\n"
"  use_synth :dsaw\n"
"  notes = (scale :e2, :minor_pentatonic, num_octaves: 2)\n"
"  16.times do\n"
"    play notes.choose, release: 0.1, cutoff: rrand(70, 120)\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"live_loop :rand_surfer do\n"
"  use_random_seed 1\n"
"  use_synth :dsaw\n"
"  notes = (scale :e2, :minor_pentatonic, num_octaves: 2)\n"
"  16.times do\n"
"    play notes.choose, release: 0.1, cutoff: rrand(70, 120)\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: A.01-tips.md:173
msgid ""
"Now, every time the `live_loop` loops around, the random stream is reset. This"
" means it chooses the same 16 notes every time. Hey presto! An instant melody."
" Now, here's the really exciting bit. Change the seed value from `1` to anothe"
"r number. Say `4923`. Wow! Another melody! So, just by changing one number (th"
"e random seed), you can explore as many melodic combinations as you can imagin"
"e! Now, that's the magic of code."
msgstr ""
"Nu, elke keer de `live_loop` rond gaat , wordt de random stream gereset. Dit b"
"etekend dat iedere keer dezelfde 16 noten gekozen worden. En presto! Instant m"
"elodie. Nu komt het spannende deel. Verander de seed waarde van `1` naar een a"
"nder getal. Neem `4923`. Wauw! Een andere melodie! Dus door gewoon één cijfer "
"te veranderen (de random seed), je kan je zoveel melodische combinaties gaan v"
"erkennen als je je kan voorstellen ! Nu, dat is de magie van code."

#: A.02-live-coding.md:1
msgid "A.2 Live Coding"
msgstr "A.2 Live codering"

#: A.02-live-coding.md:5
msgid ""
"The laser beams sliced through the wafts of smoke as the subwoofer pumped bass"
" deep into the bodies of the crowd. The atmosphere was ripe with a heady mix o"
"f synths and dancing. However something wasn't quite right in this nightclub. "
"Projected in bright colours above the DJ booth was futuristic text, moving, da"
"ncing, flashing. This wasn't fancy visuals, it was merely a projection of Soni"
"c Pi running on a Raspberry Pi. The occupant of the DJ booth wasn't spinning d"
"isks, he was writing, editing and evaluating code. Live. This is Live Coding."
msgstr ""
"De laserstralen sneden door de slierten rook, terwijl de subwoofer de bassen d"
"iep in de lichamen van de menigte pompten. De sfeer  was rijp met een onstuimi"
"ge mix van synths en dansbewegingen. Maar tegelijkertijd klopte er iets niet i"
"n deze discotheek.  In felle kleuren boven de DJ booth was een futuristische t"
"ekst geprojecteerd die knipperde en heen en weer bewoog. Het waren geen hype v"
"isuals, maar een projectie van Sonic Pi op een Raspberry Pi. De aanwezige in d"
"e DJ booth draaide geen plaatjes, hij was code aan het schrijven, aanpassen en"
" redigeren. Live. Dit is Live Coding."

#: A.02-live-coding.md:14
msgid ""
"![Sam Aaron Live Coding](../../../etc/doc/images/tutorial/articles/A.02-live-c"
"oding/sam-aaron-live-coding.png)"
msgstr ""
"![Sam Aaron Live Coding](../../../etc/doc/images/tutorial/articles/A.02-live-c"
"oding/sam-aaron-live-coding.png)"

#: A.02-live-coding.md:16
msgid ""
"This may sound like a far fetched story from a futuristic night club but codin"
"g music like this is a growing trend and is often described as Live Coding (ht"
"tp://toplap.org). One of the recent directions this approach to music making h"
"as taken is the Algorave (http://algorave.com) - events where artists like mys"
"elf code music for people to dance to. However, you don't need to be in a nigh"
"tclub to Live Code - with Sonic Pi v2.6+ you can do it anywhere you can take y"
"our Raspberry Pi and a pair of headphones or some speakers. Once you reach the"
" end of this article, you'll be programming your own beats and modifying them "
"live. Where you go afterwards will only be constrained by your imagination."
msgstr ""
"Dit klinkt misschien als een vergezocht verhaal van een futuristische nachtclu"
"b maar codering van muziek zoals deze is een groeiende trend en wordt vaak oms"
"chreven als Live codering (http://toplap.org). Een van de recente benadering v"
"an muziek spelen  is de Algorave (http://algorave.com) - evenementen waar arti"
"esten zoals ik code schrijven voor mensen om op muziek te dansen . Echter, je "
"hoeft niet naar een nachtclub te trekken voor een Live Code - met Sonic Pi v2."
"6 + kan je het overal waar je je Raspberry Pi  kunt meenemen met een paar hoof"
"dtelefoons of luidsprekers. Voor je het einde van dit artikel kan lezen, zal j"
"e je eigen beats programmeren en  hen live wijzigen. Waar je enkel beperkt wor"
"dt door uw verbeelding."

#: A.02-live-coding.md:27
msgid "Live Loop"
msgstr "Live Loop"

#: A.02-live-coding.md:29
msgid ""
"The key to live coding with Sonic Pi is mastering the `live_loop`. Let's look "
"at one:"
msgstr ""
"De hoofdzaak bij het live coderen ligt bij het beheersen van de  `live_loop`. "
"Hier kijken we naar zo ééntje:"

#: A.02-live-coding.md:32
#, no-wrap
msgid ""
"live_loop :beats do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :beats do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"

#: A.02-live-coding.md:39
msgid ""
"There are 4 core ingredients to a `live_loop`. The first is its name. Our `liv"
"e_loop` above is called `:beats`. You're free to call your `live_loop` anythin"
"g you want. Go crazy. Be creative. I often use names that communicate somethin"
"g about the music they're making to the audience. The second ingredient is the"
" `do` word which marks where the `live_loop` starts. The third is the `end` wo"
"rd which marks where the `live_loop` finishes, and finally there is the body o"
"f the `live_loop` which describes what the loop is going to repeat - that's th"
"e bit between the `do` and `end`. In this case we're repeatedly playing a bass"
" drum sample and waiting for half a beat. This produces a nice regular bass be"
"at. Go ahead, copy it into an empty Sonic Pi buffer and hit run. Boom, Boom, B"
"oom!."
msgstr ""
"Er zitten 4 basisingrediënten in een  `live_loop`. De eerst is de naam. Onze `"
"live_loop`heet `:beats`. Je kan jouw `live_loop`benoemen zoals jij dat wil. Do"
"e dwaas. Wees creatief. Ikzelf gebruik benamingen die een uitleg geven over we"
"lke klank zij naar het publiek brengen. Het volgende ingrediënt is het `do` wo"
"ord die markeert waar de `live_loop` start. het derde is het `end`woord dat he"
"t einde van onze`live_loop markeert, en tenslotte heb je de inhoud van de `liv"
"e_loop` waarin beschreven wordt wat de loop gat herhalen- dat is het stukje tu"
"ssen `do` en `end`. In dit geval gaan we de bass drum sample met een halve tel"
" rusttijd spelen . Dit produceert een aangenaam regelmatige bass beat. Ga je g"
"ang, kopieer deze in een lege buffer en klik op afspelen. Boem, boem, boem!."

#: A.02-live-coding.md:52
msgid "Redefining On-the-fly"
msgstr "Ter plekke herdefiniëren"

#: A.02-live-coding.md:54
msgid ""
"Ok, so what's so special about the `live_loop`? So far it just seems like a gl"
"orified `loop`! Well, the beauty of `live_loop`s is that you can redefine them"
" on-the-fly. This means that whilst they're still running, you can change what"
" they do. This is the secret to live coding with Sonic Pi. Let's have a play:"
msgstr ""
"OK, dus wat is er nu zo speciaal aan de 'live_loop'? Tot nu toe lijkt het gewo"
"on een veredelde 'loop'! Nou, de schoonheid van ' de live_loop is dat u hen te"
"r plekke kan herdefiniëren. Dit betekent dat terwijl deze nog steeds speelt, k"
"an je veranderen wat ze doen. Dit is het geheim van het live coderen met Sonic"
" Pi. Laten we eens spelen:"

#: A.02-live-coding.md:60
#, no-wrap
msgid ""
"live_loop :choral_drone do\n"
"  sample :ambi_choir, rate: 0.4\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :choral_drone do\n"
"  sample :ambi_choir, rate: 0.4\n"
"  sleep 1\n"
"end"

#: A.02-live-coding.md:67
#, fuzzy
msgid ""
"Now press the Run button or hit `Meta-r`. You're now listening to some gorgeou"
"s choir sounds. Now, whilst it's still playing, change the rate from `0.4` to "
"`0.38`. Hit run again. Woah! Did you hear the choir change note? Change it bac"
"k up to `0.4` to return back to how it was. Now, drop it to `0.2`, down to `0."
"19` and then back up to `0.4`. See how changing just one parameter on the fly "
"can give you real control of the music? Now play around with the rate yourself"
" - choose your own values. Try negative numbers, really small numbers and larg"
"e numbers. Have fun!"
msgstr ""
"Klik nu op de afspeelknop of gebruik `alt-r`. Je luistert nu naar de prachtige"
" klank van een koor. Verander de koers, terwijl de code speelt van `0.4` naar "
"`0.38`. Klik terug op afspelen. Woeha! Hoorde je het koor van toon veranderen?"
" Verander deze terug naar  `0.4` om terug te keren hoe het was. Verlaag deze n"
"u naar `0.2`, verlaag naar `0.19` en terug naar omhoog naar `0.4`. Hierbij zie"
" je dat het improviseren op één parameter, jou de controle over jouw muziek ge"
"eft? Speel zelf met de waarden die je kiest. Probeer negatieve getallen, hele "
"kleine en hele grote getallen. Veel plezier!"

#: A.02-live-coding.md:77
msgid "Sleeping is important"
msgstr "Slapen is belangrijk"

#: A.02-live-coding.md:79
msgid ""
"One of the most important lessons about `live_loop`s is that they need rest. C"
"onsider the following `live_loop`:"
msgstr ""
"Een van de belangrijkste lessen over `live_loop`s is dat ze rust nodig hebben."
" Beschouw deze volgende 'live_loop':"

#: A.02-live-coding.md:82
#, no-wrap
msgid ""
"live_loop :infinite_impossibilities do\n"
"  sample :ambi_choir\n"
"end"
msgstr ""
"live_loop :infinite_impossibilities do\n"
"  sample :ambi_choir\n"
"end"

#: A.02-live-coding.md:88
msgid ""
"If you try running this code, you'll immediately see Sonic Pi complaining that"
" the `live_loop` did not sleep. This is a safety system kicking in! Take a mom"
"ent to think about what this code is asking the computer to do. That's right, "
"it's asking the computer to play an infinite amount of choir samples in zero t"
"ime. Without the safety system the poor computer will try and do this and cras"
"h and burn in the process. So remember, your `live_loop`s must contain a `slee"
"p`."
msgstr ""
"Wanneer je deze code probeert te laten lopen, zie je onmiddellijk dat Sonic Pi"
" klaagt dat de `live_loop` geen `sleep` toebedeeld heeft gekregen. Dit is het "
"veiligheidssysteem dat in werking treedt! Nemen even de tijd om erover na te d"
"enken wat je aan de computer vraagt met deze code. Juist, het vraagt de comput"
"er een oneindig aantal koorsamples te af te spelen op nul tijd. Zonder het vei"
"ligheidssysteem zou de arme computer crashen tijdens dit proces. Dus onthou da"
"t jouw `live_loop` een `sleep` moet bevatten."

#: A.02-live-coding.md:97
msgid "Combining Sounds"
msgstr "Geluiden combineren"

#: A.02-live-coding.md:99
msgid ""
"Music is full of things happening at the same time. Drums at the same time as "
"bass at the same time as vocals at the same time as guitars... In computing we"
" call this concurrency and Sonic Pi provides us with an amazingly simple way o"
"f playing things at the same time. Simply use more than one `live_loop`!"
msgstr ""
"In muziek gebeuren veel dingen tezelfdertijd. Drums spelen op het zelfde momen"
"t als de bass en op het zelfde moment als zang en gitaar... In Computing noeme"
"n we dit samenwerking en Sonic Pi biedt ons een ongelofelijk eenvoudige manier"
" om zaken samen te laten spelen. Gewoon gebruik maken van verschillende `live_"
"loop`s!"

#: A.02-live-coding.md:105
#, no-wrap
msgid ""
"live_loop :beats do\n"
"  sample :bd_tek\n"
"  with_fx :echo, phase: 0.125, mix: 0.4 do\n"
"    sample  :drum_cymbal_soft, sustain: 0, release: 0.1\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"live_loop :bass do\n"
"  use_synth :tb303\n"
"  synth :tb303, note: :e1, release: 4, cutoff: 120, cutoff_attack: 1\n"
"  sleep 4\n"
"end"
msgstr ""
"live_loop :beats do\n"
"  sample :bd_tek\n"
"  with_fx :echo, phase: 0.125, mix: 0.4 do\n"
"    sample  :drum_cymbal_soft, sustain: 0, release: 0.1\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"live_loop :bass do\n"
"  use_synth :tb303\n"
"  synth :tb303, note: :e1, release: 4, cutoff: 120, cutoff_attack: 1\n"
"  sleep 4\n"
"end"

#: A.02-live-coding.md:121
msgid ""
"Here, we have two `live_loop`s, one looping quickly making beats and another l"
"ooping slowly making a crazy bass sound."
msgstr ""
"Hier hebben we twee `live_loops` de ene speelt snel en maakt beats, de andere "
"speelt snel en maakt maffe bas geluiden."

#: A.02-live-coding.md:124
msgid ""
"One of the interesting things about using multiple `live_loop`s is that they e"
"ach manage their own time. This means it's really easy to create interesting p"
"olyrhythmical structures and even play with phasing Steve Reich style. Check t"
"his out:"
msgstr ""
"Eén van de interessante zaken aan het gebruik van meerdere `live_loop`s is dat"
" deze hun eigen onafhankelijke tijd kunnen hebben. Dit betekend dat je makkeli"
"jk interessante poly-ritmische structuren kan maken en zelfs kan spelen met fa"
"se-verschuivingen in de stijl van Steve Reich. Check deze:"

#: A.02-live-coding.md:129
#, no-wrap
msgid ""
"# Steve Reich's Piano Phase\n"
"notes = (ring :E4, :Fs4, :B4, :Cs5, :D5, :Fs4, :E4, :Cs5, :B4, :Fs4, :D5, :Cs5"
")\n"
"live_loop :slow do\n"
"  play notes.tick, release: 0.1\n"
"  sleep 0.3\n"
"end\n"
"live_loop :faster do\n"
"  play notes.tick, release: 0.1\n"
"  sleep 0.295\n"
"end"
msgstr ""
"# Steve Reich's Piano Phase\n"
"notes = (ring :E4, :Fs4, :B4, :Cs5, :D5, :Fs4, :E4, :Cs5, :B4, :Fs4, :D5, :Cs5"
")\n"
"live_loop :slow do\n"
"  play notes.tick, release: 0.1\n"
"  sleep 0.3\n"
"end\n"
"live_loop :faster do\n"
"  play notes.tick, release: 0.1\n"
"  sleep 0.295\n"
"end"

#: A.02-live-coding.md:145 A.03-coded-beats.md:155 A.04-synth-riffs.md:166
#: A.05-acid-bass.md:147 A.06-minecraft.md:156 A.07-bizet.md:138
#: A.09-randomisation.md:145 A.10-controlling-your-sound.md:149
#: A.11-beat-tracking.md:176 A.12-sample-slicing.md:137
#: A.13-probabilistic-sequencer.md:137 A.14-amplitude-modulation.md:192
#: A.15-performance.md:152 A.16-practice.md:166 A.17-sample-stretching.md:153
#: A.18-additive-synthesis.md:115 A.19-subtractive-synthesis.md:138
msgid "Bringing it all together"
msgstr "Waardoor het allemaal samen valt"

#: A.02-live-coding.md:147
msgid ""
"In each of these tutorials, we'll end with a final example in the form of a ne"
"w piece of music which draws from all of the ideas introduced. Read this code "
"and see if you can imagine what it's doing. Then, copy it into a fresh Sonic P"
"i buffer and hit Run and actually hear what it sounds like. Finally, change on"
"e of the numbers or comment and uncomment things out. See if you can use this "
"as a starting point for a new performance, and most of all have fun! See you n"
"ext time..."
msgstr ""
"In elk van deze tutorials eindigen we met een muzikaal voorbeeld waarin alle i"
"deeën die werden voorgesteld samen worden gebracht. Bekijk de code en probeer "
"je voor te stellen wat deze zou gaan doen. Plak deze dan in een lege buffer in"
" Sonic Pi en druk op afspelen, en luister nu hoe dit klinkt. Verander tenslott"
"e één van de getallen en schakel commentaarlijnen in om lijnen in en uit te sc"
"hakelen. Bekijk of je dit ook niet kan gaan gebruiken in een live optreden, en"
" boven alles,beleef hier plezier aan! Tot volgende keer..."

#: A.02-live-coding.md:156
#, no-wrap
msgid ""
"with_fx :reverb, room: 1 do\n"
"  live_loop :time do\n"
"    synth :prophet, release: 8, note: :e1, cutoff: 90, amp: 3\n"
"    sleep 8\n"
"  end\n"
"end\n"
"live_loop :machine do\n"
"  sample :loop_garzul, rate: 0.5, finish: 0.25\n"
"  sample :loop_industrial, beat_stretch: 4, amp: 1\n"
"  sleep 4\n"
"end\n"
"live_loop :kik do\n"
"  sample :bd_haus, amp: 2\n"
"  sleep 0.5\n"
"end\n"
"with_fx :echo do\n"
"  live_loop :vortex do\n"
"    # use_random_seed 800\n"
"    notes = (scale :e3, :minor_pentatonic, num_octaves: 3)\n"
"    16.times do\n"
"      play notes.choose, release: 0.1, amp: 1.5\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"
msgstr ""
"with_fx :reverb, room: 1 do\n"
"  live_loop :time do\n"
"    synth :prophet, release: 8, note: :e1, cutoff: 90, amp: 3\n"
"    sleep 8\n"
"  end\n"
"end\n"
"live_loop :machine do\n"
"  sample :loop_garzul, rate: 0.5, finish: 0.25\n"
"  sample :loop_industrial, beat_stretch: 4, amp: 1\n"
"  sleep 4\n"
"end\n"
"live_loop :kik do\n"
"  sample :bd_haus, amp: 2\n"
"  sleep 0.5\n"
"end\n"
"with_fx :echo do\n"
"  live_loop :vortex do\n"
"    # use_random_seed 800\n"
"    notes = (scale :e3, :minor_pentatonic, num_octaves: 3)\n"
"    16.times do\n"
"      play notes.choose, release: 0.1, amp: 1.5\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"

#: A.03-coded-beats.md:1
msgid "A.3 Coded Beats"
msgstr "A.3 Gecodeerd Beats"

#: A.03-coded-beats.md:3
msgid "Coded Beats"
msgstr "Gecodeerd Beats"

#: A.03-coded-beats.md:5
msgid ""
"One of the most exciting and disrupting technical developments in modern music"
" was the invention of samplers. These were boxes that allowed you to record an"
"y sound into them and then manipulate and play back those sounds in many inter"
"esting ways. For example, you could take an old record, find a drum solo (or b"
"reak), record it into your sampler and then play it back on repeat at half-spe"
"ed to provide the foundation for your latest beats. This is how early hip-hop "
"music was born and today it's almost impossible to find electronic music that "
"doesn't incorporate samples of some kind. Using samples is a really great way "
"of easily introducing new and interesting elements into your live coded perfor"
"mances."
msgstr ""
"Een van de meest revolutionaire en vernieuwende ontwikkeling op technisch gebi"
"ed was de uitvinding van de sampler.Dit waren kisten die jou toelieten eender "
"welke klank op te nemen, te manipuleren en terug af te spelen, op vele interes"
"sante manieren. Bijvoorbeeld kon je van een oude plaat een drumsolo (of een br"
"eak) nemen, deze opnemen op jouw sampler en deze dan op repeat aan halve snelh"
"eid afspelen om de basis te leggen van je nieuwe beats. Dit is hoe old school "
"hip-hop werd geboren en vandaag is het haast onmogelijk om Elektronische muzie"
"k te vinden die geen gebruik maken van één of andere sample. Het gebruik van s"
"amples is een geweldige manier om makkelijk nieuwe en interessante elementen a"
"an jouw live code toe te voegen."

#: A.03-coded-beats.md:17
msgid ""
"So where can you get a sampler? Well you already have one - it's your Raspberr"
"y Pi! The built-in live coding app Sonic Pi has an extremely powerful sampler "
"built into its core. Let's play with it!"
msgstr ""
"Dus waar kan je zo'n sampler krijgen? Wel je hebt er al één- het is jouw Raspb"
"erry Pi! The ingebouwde codeer app Sonic Pi  heeft een uiterst krachtige sampl"
"er ingebouwd in zijn core. Laten we ermee gaan spelen!"

#: A.03-coded-beats.md:21
msgid "The Amen Break"
msgstr "De Amen Break"

#: A.03-coded-beats.md:23
msgid ""
"One of the most classic and recognisable drum break samples is called the Amen"
" Break. It was first performed in 1969 in the song \"Amen Brother\" by the Winst"
"ons as part of a drum break. However, it was when it was discovered by early h"
"ip-hop musicians in the 80s and used in samplers that it started being heavily"
" used in a wide variety of other styles such as drum and bass, breakbeat, hard"
"core techno and breakcore."
msgstr ""
"Een van de meest klassiek en herkenbare drum break samples is de Amen Break. H"
"et werd voor het eerst uitgevoerd in 1969 in het nummer \"Amen Brother\" door de"
" Winstons als een gedeelte in een drumbreak. Het was echter wanneer het werd o"
"ntdekt door de vroege hip-hop muzikanten in de jaren 80 en werd gebruikt in sa"
"mplers dat de start werd gegeven deze sample  in vele stijlen te gaan gebruike"
"n zoals drum& bass, breakbeat, hardcore techno en breakcore."

#: A.03-coded-beats.md:30
msgid ""
"I'm sure you're excited to hear that it's also built right into Sonic Pi. Clea"
"r up a buffer and throw in the following code:"
msgstr ""
"Ik ben er zeker van dat je blij bent dat deze standaard ingebouwd zit in Sonic"
" Pi. Ruim even een buffer leeg en gooi er de volgende code in:"

#: A.03-coded-beats.md:37
msgid ""
"Hit *Run* and boom! You're listening to one of the most influential drum break"
"s in the history of dance music. However, this sample wasn't famous for being "
"played as a one-shot, it was built for being looped."
msgstr ""
"Klik op *Afspelen* en Boem. Je luistert nu naar één van de meest invloedrijke "
"drumbreaks in de geschiedenis van dance music. Als one-shot was deze niet popu"
"lair natuurlijk wel als loop."

#: A.03-coded-beats.md:42
msgid "Beat Stretching"
msgstr "Beat Stretching"

#: A.03-coded-beats.md:44
msgid ""
"Let's loop the Amen Break by using our old friend the `live_loop` introduced i"
"n this tutorial last month:"
msgstr ""
"Laat ons de Amen Break loopen in onze goede vriend `live_loop`, geïntroduceerd"
" in deze tutorial van vorige maand:"

#: A.03-coded-beats.md:47
#, no-wrap
msgid ""
"live_loop :amen_break do\n"
"  sample :loop_amen\n"
"  sleep 2\n"
"end"
msgstr ""
"live_loop :amen_break do\n"
"  sample :loop_amen\n"
"  sleep 2\n"
"end"

#: A.03-coded-beats.md:54
msgid ""
"OK, so it is looping, but there's an annoying pause every time round. That is "
"because we asked it to sleep for `2` beats and with the default BPM of 60 the "
"`:loop_amen` sample only lasts for `1.753` beats. We therefore have a silence "
"of `2 - 1.753 = 0.247` beats. Even though it's short, it's still noticeable."
msgstr ""
"OK, deze loopt nu, maar er is wel een vervelende pauze elke keer dat hij zijn "
"cyclus heeft volbracht. Dat komt omdat we het een `sleep`-tijd van`2`tellen he"
"bben gegeven en met de standaard 60 BPM duurt de `:loop_amen` sample  `1.753` "
"tellen. Hierdoor hebben we een stilte van `2 - 1.753 = 0.247` tellen. Ook al i"
"s deze kort, het is wel merkbaar."

#: A.03-coded-beats.md:60
msgid ""
"To fix this issue we can use the `beat_stretch:` opt to ask Sonic Pi to stretc"
"h (or shrink) the sample to match the specified number of beats."
msgstr ""
"Om dit probleem op te lossen kunnen we de `beat_stretch`opt gebruiken om Sonic"
" Pi op te dragen deze sample uit te rekken (of te doen inkrimpen) om met het o"
"pgegeven aantal tellen overeen te laten komen."

#: A.03-coded-beats.md:63
msgid ""
"Sonic Pi's `sample` and `synth` fns give you a lot of control via optional par"
"ameters such as `amp:`, `cutoff:` and `release:`. However, the term optional p"
"arameter is a real mouthful so we just call them *opts* to keep things nice an"
"d simple."
msgstr ""
"De `sample`en `synth` fns van Sonic Pi geven jou veel controle over de optione"
"le parameters zoals `amp:`, `cutoff:`en `release:` . Maar de term optionele pa"
"rameter is wel een mond vol, dus noemen we deze *opts* om de zaken eenvoudig t"
"e houden."

#: A.03-coded-beats.md:68
#, no-wrap
msgid ""
"live_loop :amen_break do\n"
"  sample :loop_amen, beat_stretch: 2\n"
"  sleep 2\n"
"end  "
msgstr ""
"live_loop :amen_break do\n"
"  sample :loop_amen, beat_stretch: 2\n"
"  sleep 2\n"
"end  "

#: A.03-coded-beats.md:75
msgid ""
"Now we're dancing! Although, perhaps we want to speed it up or slow it down to"
" suit the mood."
msgstr ""
"Nu zijn we aan het dansen! Maar misschien willen we het wat sneller of wat tra"
"ger om de juiste stemming te pakken te krijgen."

#: A.03-coded-beats.md:78
msgid "Playing with Time"
msgstr "Spelen met Tijd"

#: A.03-coded-beats.md:80
msgid ""
"OK, so what if we want to change styles to old school hip hop or breakcore? On"
"e simple way of doing this is to play with time - or in other words mess with "
"the tempo. This is super easy in Sonic Pi - just throw in a `use_bpm` into you"
"r live loop:"
msgstr ""
"Ok, en als we de stijl willen aanpassen naar old school hip hop of breakcore? "
"Een eenvoudige manier om dit te gaan doen is te spelen met tijd -of in andere "
"woorden: aan het tempo klooien. Dit is makkelijk te doen in Sonic Pi, gooi gew"
"oon `use_bpm` in je live loop:"

#: A.03-coded-beats.md:85
#, no-wrap
msgid ""
"live_loop :amen_break do\n"
"  use_bpm 30\n"
"  sample :loop_amen, beat_stretch: 2\n"
"  sleep 2\n"
"end "
msgstr ""
"live_loop :amen_break do\n"
"  use_bpm 30\n"
"  sample :loop_amen, beat_stretch: 2\n"
"  sleep 2\n"
"end "

#: A.03-coded-beats.md:93
msgid ""
"Whilst you're rapping over those slow beats, notice that we're still sleeping "
"for 2 and our BPM is 30, yet everything is in time. The `beat_stretch` opt wor"
"ks with the current BPM to make sure everything just works."
msgstr ""
"Terwijl je over deze trage beats heen rapt merk je dat we nog steeds voor 2 `s"
"leep`hebben en dat onze BPM 30 is, maar alles is wel in maat. De `beat_stretch"
"`opt werkt met de huidige BPM om ervoor te zorgen dat alles werkt."

#: A.03-coded-beats.md:97
msgid ""
"Now, here's the fun part. Whilst the loop is still live, change the `30` in th"
"e `use_bpm 30` line to `50`. Woah, everything just got faster yet *kept in tim"
"e*! Try going faster - up to 80, to 120, now go crazy and punch in 200!"
msgstr ""
"Nu komt het leuke! Terwijl de loop nog altijd speelt, verander de`30`in de `us"
"e_bpm 30`regel naar `50`. Woeha, Alles gaat nu sneller, en *in maat* gehouden!"
" Probeer sneller te gaan - omhoog naar 80, naar 120, doe nu eens goed zot en g"
"ebruik 200!"

#: A.03-coded-beats.md:103
msgid "Filtering"
msgstr "Filteren"

#: A.03-coded-beats.md:105
msgid ""
"Now we can live loop samples, let's look at some of the most fun opts provided"
" by the `sample` synth. First up is `cutoff:` which controls the cutoff filter"
" of the sampler. By default this is disabled but you can easily turn it on:"
msgstr ""
"Nu we samples kunnen live lopen, laat ons eens kijken naar de leukste opts die"
" bij de `sample`synth geleverd zijn. Eerst komt `cutoff`aan beurt, welke de cu"
"toff op de filter van de sampler regelt. Standaard is deze uitgeschakeld, maar"
" je kan deze makkelijk aanzetten:"

#: A.03-coded-beats.md:110
#, no-wrap
msgid ""
"live_loop :amen_break do\n"
"  use_bpm 50\n"
"  sample :loop_amen, beat_stretch: 2, cutoff: 70\n"
"  sleep 2\n"
"end  "
msgstr ""
"live_loop :amen_break do\n"
"  use_bpm 50\n"
"  sample :loop_amen, beat_stretch: 2, cutoff: 70\n"
"  sleep 2\n"
"end  "

#: A.03-coded-beats.md:118
msgid ""
"Go ahead and change the `cutoff:` opt. For example, increase it to 100, hit *R"
"un* and wait for the loop to cycle round to hear the change in the sound. Noti"
"ce that low values like 50 sound mellow and bassy and high values like 100 and"
" 120 are more full-sounding and raspy. This is because the `cutoff:` opt will "
"chop out the high frequency parts of the sound just like a lawn-mower chops of"
"f the top of the grass. The `cutoff:` opt is like the length setting - determi"
"ning how much grass is left over."
msgstr ""
"Ga je gang en verander de `cutoff:` opt. Verhoog deze bijvoorbeeld naar 100, k"
"lik op *Afspelen* en wacht een cyclus van de loop af om de verandering van het"
" geluid waar te nemen. Merk op dat lage waarden zoals 50 zacht klinken en laag"
" en hoger waarden zoals 100 en 120 voller klinken en rasperig. Dit is omdat de"
" `cutoff:`opt de hoge geluidsfrequentie afsnijdt zoals een grasmaaier de grasu"
"iteinden afknipt. De `cutoff:` opt is zoals de lengte instelling, en bepaald h"
"oeveel gras overblijft."

#: A.03-coded-beats.md:128
msgid "Slicing"
msgstr "Slicing (Snijden)"

#: A.03-coded-beats.md:130
msgid ""
"Another great tool to play with is the slicer FX. This will chop (slice) the s"
"ound up. Wrap the `sample` line with the FX code like this:"
msgstr ""
"Nog een fantastisch hulpmiddel om mee aan de slag te gaan is de slicer FX. Dez"
"e zal het geluid uiteen hakken (snijden). Omhul de `sample`regel met de FX cod"
"e als volgt:"

#: A.03-coded-beats.md:133
#, no-wrap
msgid ""
"live_loop :amen_break do\n"
"  use_bpm 50\n"
"  with_fx :slicer, phase: 0.25, wave: 0, mix: 1 do\n"
"    sample :loop_amen, beat_stretch: 2, cutoff: 100\n"
"  end\n"
"  sleep 2\n"
"end"
msgstr ""
"live_loop :amen_break do\n"
"  use_bpm 50\n"
"  with_fx :slicer, phase: 0.25, wave: 0, mix: 1 do\n"
"    sample :loop_amen, beat_stretch: 2, cutoff: 100\n"
"  end\n"
"  sleep 2\n"
"end"

#: A.03-coded-beats.md:143
msgid ""
"Notice how the sound bounces up and down a little more. (You can hear the orig"
"inal sound without the FX by changing the `mix:` opt to `0`.) Now, try playing"
" around with the `phase:` opt. This is the rate (in beats) of the slicing effe"
"ct. A smaller value like `0.125` will slice faster and larger values like `0.5"
"` will slice more slowly. Notice that successively halving or doubling the `ph"
"ase:` opts val tends to always sound good. Finally, change the `wave:` opt to "
"one of 0, 1, or 2 and hear how it changes the sound. These are the various wav"
"e shapes. 0 is a saw wave, (hard in, fade out) 1 is a square wave (hard in, ha"
"rd out) and 2 is a triangle wave (fade in, fade out)."
msgstr ""
"Merk op hoe de klank op en neer stuitert, elke keer meer. (Je kan de originele"
" klank, zonder FX, beluisteren door de `mix` opt naar `0`te veranderen) Speel "
"nu met de `phase:` opt. Dit is de snelheid (in slagen) van het slicing effect."
" Een kleinere waarde zoals `0.125` zal sneller hakken en grotere waarden zoals"
" `0.5` zullen trager snijden. Merk hierbij op dat het opeenvolgend halveren of"
" verdubbelen van de `phase:`opt waarde altijd goed schijnt te klinken. Verande"
"r tenslotte de `wave:` opt naar 0,1 of 2 en hoor hoe dit de klank veranderd. D"
"it zijn de verschillende golfvormen. 0 is een zaagtand-golf, (harde aanslag, f"
"ade-out) 1 is een blokgolf (harde aanslag, geen fade-out) en 2 is een driehoek"
"sgolf (fade-in, fade out)."

#: A.03-coded-beats.md:157
msgid ""
"Finally, let's go back in time and revisit the early Bristol drum and bass sce"
"ne with this month's example. Don't worry too much about what all this means, "
"just type it in, hit Run, then start live coding it by changing opt numbers an"
"d see where you can take it. Please do share what you create! See you next tim"
"e..."
msgstr ""
"Laten we tenslotte terug in de tijd gaan en de vroege drum&bass scene van Bris"
"tol bezoeken, met het voorbeeld van de maand. Maak je geen zorgen als je echt "
"niet weet over wat dit gaat, type deze even, klik op Afspelen, begin te live c"
"ode-en, door de getallen van de opt te veranderen en kijk wat je dit oplevert."
" Deel alsjeblieft wat je hebt gemaakt! Tot Volgende keer..."

#: A.03-coded-beats.md:163
#, no-wrap
msgid ""
"use_bpm 100\n"
"live_loop :amen_break do\n"
"  p = [0.125, 0.25, 0.5].choose\n"
"  with_fx :slicer, phase: p, wave: 0, mix: rrand(0.7, 1) do\n"
"    r = [1, 1, 1, -1].choose\n"
"    sample :loop_amen, beat_stretch: 2, rate: r, amp: 2\n"
"  end\n"
"  sleep 2\n"
"end\n"
"live_loop :bass_drum do\n"
"  sample :bd_haus, cutoff: 70, amp: 1.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :landing do\n"
"  bass_line = (knit :e1, 3, [:c1, :c2].choose, 1)\n"
"  with_fx :slicer, phase: [0.25, 0.5].choose, invert_wave: 1, wave: 0 do\n"
"    s = synth :square, note: bass_line.tick, sustain: 4, cutoff: 60\n"
"    control s, cutoff_slide: 4, cutoff: 120\n"
"  end\n"
"  sleep 4\n"
"end"
msgstr ""
"use_bpm 100\n"
"live_loop :amen_break do\n"
"  p = [0.125, 0.25, 0.5].choose\n"
"  with_fx :slicer, phase: p, wave: 0, mix: rrand(0.7, 1) do\n"
"    r = [1, 1, 1, -1].choose\n"
"    sample :loop_amen, beat_stretch: 2, rate: r, amp: 2\n"
"  end\n"
"  sleep 2\n"
"end\n"
"live_loop :bass_drum do\n"
"  sample :bd_haus, cutoff: 70, amp: 1.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :landing do\n"
"  bass_line = (knit :e1, 3, [:c1, :c2].choose, 1)\n"
"  with_fx :slicer, phase: [0.25, 0.5].choose, invert_wave: 1, wave: 0 do\n"
"    s = synth :square, note: bass_line.tick, sustain: 4, cutoff: 60\n"
"    control s, cutoff_slide: 4, cutoff: 120\n"
"  end\n"
"  sleep 4\n"
"end"

#: A.04-synth-riffs.md:1
msgid "A.4 Synth Riffs"
msgstr "A.4 Synth Riffs"

#: A.04-synth-riffs.md:3
msgid "Synth Riffs"
msgstr "Synth Riffs"

#: A.04-synth-riffs.md:5
msgid ""
"Whether it's the haunting drift of rumbling oscillators or the detuned punch o"
"f saw waves piercing through the mix, the lead synth plays an essential role o"
"n any electronic track. In last month's edition of this tutorial series we cov"
"ered how to code our beats. In this tutorial we'll cover how to code up the th"
"ree core components of a synth riff - the timbre, melody and rhythm."
msgstr ""
"Of het nu spokende onstuimige, grommende oscillatoren zijn of de ontstemde aan"
"slag van zaagtand-golven die door de mix klieven, de lead synth zal altijd een"
" essentiële rol spelen in een elektronisch nummer. In de editie van vorige maa"
"nd in deze serie zelf-studies   zagen we hoe je je beats code maakt. In deze t"
"utorial gaan we zien hoe we de code doen van drie hoofd componenten van een sy"
"nth riff: het timbre, de melodie en het ritme."

#: A.04-synth-riffs.md:12
msgid ""
"OK, so power up your Raspberry Pi, crack open Sonic Pi v2.6+ and let's make so"
"me noise!"
msgstr "Ok, zet je Raspberry Pi op, maak Sonic Pi v2.6+ open en maak wat lawaai!"

#: A.04-synth-riffs.md:16
msgid "Timbral Possibilities"
msgstr "Timbrale mogelijkheden"

#: A.04-synth-riffs.md:18
msgid ""
"An essential part of any synth riff is changing and playing with the timbre of"
" the sounds. We can control the timbre in Sonic Pi in two ways - choosing diff"
"erent synths for a dramatic change and setting the various synth opts for more"
" subtle modifications. We can also use FX, but that's for another tutorial..."
msgstr ""
"Een essentieel onderdeel van zowat elke synth riff ligt in het veranderen en b"
"espelen van het timbre. We kunnen het timbre in Sonic Pi op twee verschillende"
" manieren controllen: veranderen van synth voor een drastische verandering en "
"de verschillende synth opts gebruiken voor een meer subtiele aanpak. We kunnen"
" ook FX gebruiken, maar dat is voor een andere tutorial..."

#: A.04-synth-riffs.md:24
msgid "Let's create a simple live loop where we continually change the current synth:"
msgstr ""
"We creëren een eenvoudige loop waar we de huidige synth voortdurend gaan veran"
"deren:"

#: A.04-synth-riffs.md:27
#, no-wrap
msgid ""
"live_loop :timbre do\n"
"  use_synth (ring :tb303, :blade, :prophet, :saw, :beep, :tri).tick\n"
"  play :e2, attack: 0, release: 0.5, cutoff: 100\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :timbre do\n"
"  use_synth (ring :tb303, :blade, :prophet, :saw, :beep, :tri).tick\n"
"  play :e2, attack: 0, release: 0.5, cutoff: 100\n"
"  sleep 0.5\n"
"end"

#: A.04-synth-riffs.md:35
msgid ""
"Take a look at the code. We're simply ticking through a ring of synth names (t"
"his will cycle through each of these in turn repeating the list over and over)"
". We pass this synth name to the `use_synth` fn (function) which will change t"
"he `live_loop`'s current synth. We also play note `:e2` (E at the second octav"
"e), with a release time of 0.5 beats (half a second at the default BPM of 60) "
"and with the `cutoff:` opt set to 100."
msgstr ""
"Kijk even naar de code. We tikken gewoon door een ring van synth namen (deze z"
"al de lijst helemaal doorlopen en aan het einde opnieuw beginnen). We geven de"
"ze synth naam door aan de `use_synth` fn (functie) die de `live_loop`'s huidig"
"e synth verandert. We spelen ook de noot `:e2` (E van het tweede octaaf), met "
"een release tijd van 0.5 tel (een halve seconde aan de standaard BPM van 60) e"
"n met een `cutoff:`opt naar 100 gezet."

#: A.04-synth-riffs.md:42
msgid ""
"Hear how the different synths have very different sounds even though they're a"
"ll playing the same note. Now experiment and have a play. Change the release t"
"ime to bigger and smaller values. For example, change the `attack:` and `relea"
"se:` opts to see how different fade in/out times have a huge impact on the sou"
"nd. Finally change the `cutoff:` opt to see how different cutoff values also m"
"assively influence the timbre (values between 60 and 130 are good). See how ma"
"ny different sounds you can create by just changing a few values. Once you've "
"mastered that, just head to the Synths tab in the Help system for a full list "
"of all the synths and all the available opts each individual synth supports to"
" see just how much power you have under your coding fingertips."
msgstr ""
"Hoor hoe de verschillende synths zeer grote verschillen vertonen hoewel ze dez"
"elfde noot spelen. Experimenteer nu en speel hiermee. Verander de release tijd"
"en naar grotere en kleinere waarden. Verander bijvoorbeeld de `attack:` en `re"
"lease:` opts om te zien hoe verschillende cutoff waarden een invloed hebben op"
" het timbre (waarden tussen 60 en 130 zijn goed) Kijk hoeveel verschillende kl"
"anken je kan creëren door simpelweg enkele waarden aan te passen. Eens je dit "
"onder de knie hebt, ga dan naar de  synths tab in het hulpsysteem voor de lijs"
"t van alle synths en de voor iedere individuele synth beschikbare opts, om te "
"zien hoeveel kracht je hiermee onder je codende vingers hebt."

#: A.04-synth-riffs.md:55
msgid "Timbre"
msgstr "Timbre"

#: A.04-synth-riffs.md:57
msgid ""
"Timbre is just a fancy word describing the sound of a sound. If you play the s"
"ame note with different instruments such as a violin, guitar, or piano, the pi"
"tch (how high or low it sounds) would be the same, but the sound quality would"
" be different. That sound quality - the thing which allows you to tell the dif"
"ference between a piano and a guitar is the timbre."
msgstr ""
"Timbre of klankkleur is enkel een moeilijk woord om de klank van een geluid te"
" beschrijven. Als je dezelfde noot speelt met verschillende instrumenten zoals"
" viool, gitaar of piano zal de toonhoogte altijd dezelfde zijn, maar de klanke"
"igenschap zal anders zijn. Deze eigenschap die het mogelijk maakt om het versc"
"hil tussen een piano en een gitaar waar te nemen is het timbre."

#: A.04-synth-riffs.md:65
msgid "Melodic Composition"
msgstr "Melodische Compositie"

#: A.04-synth-riffs.md:67
msgid ""
"Another important aspect to our lead synth is the choice of notes we want to p"
"lay. If you already have a good idea, then you can simply create a ring with y"
"our notes in and tick through them:"
msgstr ""
"Een ander belangrijk aspect dat onze lead synth is de keuze van de noten die w"
"ij willen spelen. Als je al een goed idee hebt, dan kan je gewoon een ring met"
" jouw noten :"

#: A.04-synth-riffs.md:71
#, no-wrap
msgid ""
"live_loop :riff do\n"
"  use_synth :prophet\n"
"  riff = (ring :e3, :e3, :r, :g3, :r, :r, :r, :a3)\n"
"  play riff.tick, release: 0.5, cutoff: 80\n"
"  sleep 0.25\n"
"end"
msgstr ""
"live_loop :riff do\n"
"  use_synth :prophet\n"
"  riff = (ring :e3, :e3, :r, :g3, :r, :r, :r, :a3)\n"
"  play riff.tick, release: 0.5, cutoff: 80\n"
"  sleep 0.25\n"
"end"

#: A.04-synth-riffs.md:80
msgid ""
"Here, we've defined our melody with a ring which includes both notes such as `"
":e3` and rests represented by `:r`. We're then using `.tick` to cycle through "
"each note to give us a repeating riff."
msgstr ""
"Hier hebben de melodie gedefinieerd met een ring die beide noten `:e3` en de r"
"ust ´:r bevat. We gebruiken dan `.tick` om door elke noot te lopen, om zo een "
"herhalende riff te krijgen."

#: A.04-synth-riffs.md:84
msgid "Auto Melody"
msgstr "Auto Melodie"

#: A.04-synth-riffs.md:86
msgid ""
"It's not always easy to come up with a nice riff from scratch. Instead it's of"
"ten easier to ask Sonic Pi for a selection of random riffs and to choose the o"
"ne you like the best. To do that we need to combine three things: rings, rando"
"misation and random seeds. Let's look at an example:"
msgstr ""
"Het is niet altijd gemakkelijk om met een mooie riff voor de dag te komen. In "
"plaats daarvan is het vaak makkelijker Sonic Pi  te vragen naar een selectie v"
"an willekeurig riff's en waaruit je dan kan kiezen ,welke jou het beste bevalt"
". Om dit te kunnen gaan doen, moeten we drie zaken combineren: ringen, randomi"
"seren en random seeds. Laten we eens kijken naar een voorbeeld:"

#: A.04-synth-riffs.md:91
#, no-wrap
msgid ""
"live_loop :random_riff do\n"
"  use_synth :dsaw\n"
"  use_random_seed 3\n"
"  notes = (scale :e3, :minor_pentatonic).shuffle\n"
"  play notes.tick, release: 0.25, cutoff: 80\n"
"  sleep 0.25\n"
"end"
msgstr ""
"live_loop :random_riff do\n"
"  use_synth :dsaw\n"
"  use_random_seed 3\n"
"  notes = (scale :e3, :minor_pentatonic).shuffle\n"
"  play notes.tick, release: 0.25, cutoff: 80\n"
"  sleep 0.25\n"
"end"

#: A.04-synth-riffs.md:101
msgid ""
"There's a few things going on - let's look at them in turn. First, we specify "
"that we're using random seed 3. What does this mean? Well, the useful thing is"
" that when we set the seed, we can predict what the next random value is going"
" to be - it's the same as it was last time we set the seed to 3! Another usefu"
"l thing to know is that shuffling a ring of notes works in the same way. In th"
"e example above we're essentially asking for the 'third shuffle' in the standa"
"rd list of shuffles - which is also the same every time as we're always settin"
"g the random seed to the same value right before the shuffle. Finally we're ju"
"st ticking through our shuffled notes to play the riff."
msgstr ""
"Een aantal zaken gebeuren hier, laat ons deze even afzonderlijk bekijken. Eers"
"t specifiëren we dat we random seed 3 gebruiken. Wat betekent dit? Wel het nut"
"tige hieraan is dat wanneer we de seed instellen, we ook kunnen voorspellen wa"
"t de volgende willekeurige waarde zal zijn, namelijk dezelfde als de laatste k"
"eer dat we de seed op 3 hadden ingesteld! Goed om weten is ook, dat een shuffl"
"e van kring van noten, op dezelfde manier werkt. In het bovenstaande voorbeeld"
" vragen we eigenlijk de 'derde shuffle' in de standaard lijst van shuffles op,"
" die steeds ook dezelfde is, gezien we de random seed  instellen op de zelfde "
"waarde vlak voor de shuffle. Ten slotte tikken we met `.tick` door de ge-shuff"
"le-de noten, om onze riff af te spelen."

#: A.04-synth-riffs.md:112
msgid ""
"Now, here's where the fun starts. If we change the random seed value to anothe"
"r number, say 3000, we get an entirely different shuffling of the notes. So no"
"w it's extremely easy to explore new melodies. Simply choose the list of notes"
" we want to shuffle (scales are a great starting point) and then choose the se"
"ed we want to shuffle with. If we don't like the melody, just change one of th"
"ose two things and try again. Repeat until you like what you hear!"
msgstr ""
"En nu wordt het leuk. Als we de waarde van de random seed veranderen  naar bvb"
". 3000, krijgen we een geheel nieuwe shuffle van noten. Het is nu wel extreem "
"makkelijk om nieuwe melodieën te gaan ontdekken. Kies simpelweg de lijst van d"
"e noten die je wil verschuiven met shuffle ( toonladders zijn hierbij een mooi"
" uitgangspunt) en kies dan de seed waarmee je de shuffle wil doen. Als de melo"
"die jou niet bevalt, verander dan één van deze twee dingen en probeer opnieuw."
" Herhaal dit tot je iets tegenkomt dat je wel graag hoort!"

#: A.04-synth-riffs.md:121
msgid "Pseudo Randomisation"
msgstr "Pseudo randomiseren"

#: A.04-synth-riffs.md:123
msgid ""
"Sonic Pi's randomisation is not actually random it's what's called pseudo rand"
"om. Imagine if you were to roll a dice 100 times and write down the result of "
"each roll onto a piece of paper. Sonic Pi has the equivalent of this list of r"
"esults which it uses when you ask for a random value. Instead of rolling an ac"
"tual dice, it just picks the next value from the list. Setting the random seed"
" is just jumping to a specific point in that list."
msgstr ""
"Sonic Pi's randomiseren is niet echt willekeurig (random) en is daarom pseudo "
"random. Stel je voor je een dobbelsteen 100 keer zou opgooien en het resultaat"
" van elke opgooi op een stuk papier zou moeten noteren. Sonic Pi heeft het equ"
"ivalent van deze resultatenlijst, die zij dan gebruikt, wanneer je om een will"
"ekeurige waarde vraagt. In plaats van werkelijke dobbelstenen, pakt het gewoon"
" de volgende waarde uit de lijst. Het instellen van random seed, is gewoon het"
" springen naar een bepaald punt in die lijst."

#: A.04-synth-riffs.md:131
msgid "Finding your Rhythm"
msgstr "Jouw Ritme Vinden"

#: A.04-synth-riffs.md:133
msgid ""
"Another important aspect to our riff is the rhythm - when to play a note and w"
"hen not to. As we saw above we can use `:r` in our rings to insert rests. Anot"
"her very powerful way is to use spreads which we'll cover in a future tutorial"
". Today we'll use randomisation to help us find our rhythm. Instead of playing"
" every note we can use a conditional to play a note with a given probability. "
"Let's take a look:"
msgstr ""
"Nog een belangrijk element van onze riff is het ritme, wanneer een noot spelen"
" en wanneer niet. Zoals we hierboven al zagen, kunnen we `:r` in onze ringen g"
"ebruiken, om een rusttijd in te zetten. Nog een andere, krachtige, manier is h"
"et gebruik maken van spreads, wat we in een toekomstige leeroefening gaan beki"
"jken. Vandaag zullen we gebruik maken van randomiseren, om ons te helpen, ons "
"ritme te vinden. In plaats van elke noot te spelen kunnen we een voorwaardelij"
"ke gebruiken, om een noot te spelen met een gegeven waarschijnlijkheid. Laat o"
"ns eens een kijkje nemen:"

#: A.04-synth-riffs.md:140
#, no-wrap
msgid ""
"live_loop :random_riff do\n"
"  use_synth :dsaw\n"
"  use_random_seed 30\n"
"  notes = (scale :e3, :minor_pentatonic).shuffle\n"
"  16.times do\n"
"    play notes.tick, release: 0.2, cutoff: 90 if one_in(2)\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"live_loop :random_riff do\n"
"  use_synth :dsaw\n"
"  use_random_seed 30\n"
"  notes = (scale :e3, :minor_pentatonic).shuffle\n"
"  16.times do\n"
"    play notes.tick, release: 0.2, cutoff: 90 if one_in(2)\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: A.04-synth-riffs.md:152
msgid ""
"A really useful fn to know is `one_in` which will give us a `true` or `false` "
"value with the specified probability. Here, we're using a value of 2 so on ave"
"rage one time every two calls to `one_in` it will return `true`. In other word"
"s, 50% of the time it will return `true`. Using higher values will make it ret"
"urn `false` more often introducing more space into the riff."
msgstr ""
"Een heel nuttige functie om te onthouden is `one_in`, welke ons een `true` of "
"`false` waarde geeft met een bepaalde waarschijnlijkheid. Hier gebruiken we ee"
"n waarde van 2, die gemiddeld één keer per twee oproepen naar `one_in`, `true "
"zal weergeven. Door hogere waarden te gebruiken kunnen we `false` meer weergeg"
"even laten worden, waardoor we meer ruimte in de riff kunnen creëren."

#: A.04-synth-riffs.md:159
msgid ""
"Notice that we've added some iteration in here with `16.times`. This is becaus"
"e we only want to reset our random seed value every 16 notes so our rhythm rep"
"eats every 16 times. This doesn't affect the shuffling as that is still done i"
"mmediately after the seed is set. We can use the iteration size to alter the l"
"ength of the riff. Try changing the 16 to 8 or even 4 or 3 and see how it affe"
"cts the rhythm of the riff."
msgstr ""
"Merk op dat we hier een iteratie  met `16.times` hebben toegevoegd. Dit doen w"
"e alleen omdat we onze random seed waarde om de 16 noten willen resetten, zoda"
"t ons ritme elke 16 keer herhaalt. Dit beïnvloed de shuffle niet, vermits deze"
" direct achter de seed staat. We kunnen de grootte van de iteratie wijzigen om"
", om de lengte van de riff te veranderen. Probeer 16 naar 8 te veranderen of z"
"elfs aar 4 of 3 en zie hoe dit de lengte van de riff beïnvloed."

#: A.04-synth-riffs.md:168
msgid ""
"OK, so let's combine everything we've learned together into one final example."
" See you next time!"
msgstr ""
"Ok, laat ons nu alles wat we geleerd hebben in een laatste voorbeeld combinere"
"n. Tot volgende keer!"

#: A.04-synth-riffs.md:171
#, no-wrap
msgid ""
"live_loop :random_riff do\n"
"  #  uncomment to bring in:\n"
"  #  synth :blade, note: :e4, release: 4, cutoff: 100, amp: 1.5\n"
"  use_synth :dsaw\n"
"  use_random_seed 43\n"
"  notes = (scale :e3, :minor_pentatonic, num_octaves: 2).shuffle.take(8)\n"
"  8.times do\n"
"    play notes.tick, release: rand(0.5), cutoff: rrand(60, 130) if one_in(2)\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
" \n"
"live_loop :drums do\n"
"  use_random_seed 500\n"
"  16.times do\n"
"    sample :bd_haus, rate: 2, cutoff: 110 if rand < 0.35\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
" \n"
"live_loop :bd do\n"
"  sample :bd_haus, cutoff: 100, amp: 3\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :random_riff do\n"
"  #  uncomment to bring in:\n"
"  #  synth :blade, note: :e4, release: 4, cutoff: 100, amp: 1.5\n"
"  use_synth :dsaw\n"
"  use_random_seed 43\n"
"  notes = (scale :e3, :minor_pentatonic, num_octaves: 2).shuffle.take(8)\n"
"  8.times do\n"
"    play notes.tick, release: rand(0.5), cutoff: rrand(60, 130) if one_in(2)\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
" \n"
"live_loop :drums do\n"
"  use_random_seed 500\n"
"  16.times do\n"
"    sample :bd_haus, rate: 2, cutoff: 110 if rand < 0.35\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
" \n"
"live_loop :bd do\n"
"  sample :bd_haus, cutoff: 100, amp: 3\n"
"  sleep 0.5\n"
"end"

#: A.05-acid-bass.md:1
msgid "A.5 Acid Bass"
msgstr "A.5 Acid Bass"

#: A.05-acid-bass.md:3
msgid "Acid Bass"
msgstr "Acid Bass"

#: A.05-acid-bass.md:5
msgid ""
"It's impossible to look through the history of electronic dance music without "
"seeing the enormous impact of the tiny Roland TB-303 synthesiser. It's the sec"
"ret sauce behind the original acid bass sound. Those classic squealing and squ"
"elching TB-303 bass riffs can be heard from the early Chicago House scene thro"
"ugh to more recent electronic artists such as Plastikman, Squarepusher and Aph"
"ex Twin."
msgstr ""
"Als we naar de geschiedenis van  elektronische dansmuziek kijken, kunnen we ni"
"et naast de enorme impact van de kleine Roland TB-303 synthesizer kijken Het i"
"s het geheime recept van het originele acid bass geluid."

#: A.05-acid-bass.md:12
msgid ""
"Interestingly, Roland never intended for the TB-303 to be used in dance music."
" It was originally created as a practice aid for guitarists. They imagined tha"
"t people would program them to play bass lines to jam along to. Unfortunately "
"there were a number of problems: they were a little fiddly to program, didn't "
"sound particularly good as a bass-guitar replacement and were pretty expensive"
" to buy. Deciding to cut their losses, Roland stopped making them after 10,000"
" units were sold and after a number of years sitting on guitarist's shelves, t"
"hey soon could be found in the windows of second hand shops. These lonely disc"
"arded TB-303s were waiting to be discovered by a new generation of experimente"
"rs who started using them in ways that Roland didn't imagine to create new cra"
"zy sounds. Acid House was born."
msgstr ""
"Interessant om weten is ook dat Roland de TB-303 niet voor dancemuziek heeft o"
"ntwikkeld. Het werd oorspronkelijk gemaakt als ondersteuning voor gitaristen b"
"ij het oefenen. Ze stelden zich voor dat men bas-lijnen ging programmeren om d"
"an samen met de gitaar te gaan jammen.  Helaas waren er een aantal problemen: "
"ze waren een beetje onhandig om te programmeren, niet bijzonder goed als verva"
"nging van een bas-gitaar geluid en vrij duur om te kopen. Het sloeg niet aan e"
"n om verlies te vermijden werd er beslist met de productie te stoppen na 10.00"
"0 exemplaren. Al snel vonden ze hun weg naar de etalage van de tweedehands win"
"kels. De afgedankte TB-303's lagen nu te wachten om ontdekt  te worden door ee"
"n nieuwe generatie die hen op een manier zou gaan gebruiken die Roland niet vo"
"or ogen had. Acid house was geboren."

#: A.05-acid-bass.md:25
msgid ""
"Although getting your hands on an original TB-303 is not so easy you will be p"
"leased to know that you can turn your Raspberry Pi into one using the power of"
" Sonic Pi. Behold, fire up Sonic Pi and throw this code into an empty buffer a"
"nd hit Run:"
msgstr ""
"Vermits het in handen krijgen van een originele TB-303 niet eenvoudig is, zal "
"u blij zijn te horen dat je jouw Raspberry Pi makkelijk kan omtoveren tot een "
"TB-303 met de kracht van Sonic Pi. Ziehier, start Sonic Pi,  gooi de code in e"
"en lege buffer, en druk op afspelen:"

#: A.05-acid-bass.md:30
#, no-wrap
msgid ""
"use_synth :tb303\n"
"play :e1"
msgstr ""
"use_synth :tb303\n"
"play :e1"

#: A.05-acid-bass.md:35
msgid "Instant acid bass! Let's play around..."
msgstr "Acid Bass in een oogwenk! We gaan hier mee spelen..."

#: A.05-acid-bass.md:37
msgid "Squelch that Bass"
msgstr "Smak die Bas"

#: A.05-acid-bass.md:39
msgid ""
"First, let's build a live arpeggiator to make things fun. In the last tutorial"
" we looked at how riffs can just be a ring of notes that we tick through one a"
"fter another, repeating when we get to the end. Let's create a live loop that "
"does exactly that:"
msgstr ""
"Laten we eerst een arpeggiator maken om de zaken leuk te houden. In de laatste"
" tutorial hebben gezien hoe riffs gewoonweg een ring van noten kunnen zijn waa"
"r we, de ene na de andere doorheen \"tikken\", en zich gaan herhalen eens ze aan"
" het einde van de cyclus zijn gekomen. Laten we een live loop maken die dat do"
"et:"

#: A.05-acid-bass.md:44
#, no-wrap
msgid ""
"use_synth :tb303\n"
"live_loop :squelch do\n"
"  n = (ring :e1, :e2, :e3).tick\n"
"  play n, release: 0.125, cutoff: 100, res: 0.8, wave: 0\n"
"  sleep 0.125\n"
"end"
msgstr ""
"use_synth :tb303\n"
"live_loop :squelch do\n"
"  n = (ring :e1, :e2, :e3).tick\n"
"  play n, release: 0.125, cutoff: 100, res: 0.8, wave: 0\n"
"  sleep 0.125\n"
"end"

#: A.05-acid-bass.md:53
msgid "Take a look at each line."
msgstr "Laten we naar elke regel een kijkje nemen."

#: A.05-acid-bass.md:55
msgid ""
"On the first line we set the default synth to be `tb303` with the `use_synth` "
"fn."
msgstr ""
"Op de eerste regel zetten we de standaard synth als 'tb303' met de 'use_synth'"
" fn."

#: A.05-acid-bass.md:58
msgid ""
"On line two we create a live loop called `:squelch` which will just loop round"
" and round."
msgstr ""
"Op regel twee creëren we een live loop genaamd ': squelch' die in een lus loop"
"t."

#: A.05-acid-bass.md:61
msgid ""
"Line three is where we create our riff - a ring of notes (E in octaves 1, 2, a"
"nd 3) which we simply tick through with `.tick`. We define `n` to represent th"
"e current note in the riff. The equals sign just means to assign the value on "
"the right to the name on the left. This will be different every time round the"
" loop. The first time round, `n` will be set to `:e1`. The second time round i"
"t will be `:e2`, followed by `:e3`, and then back to `:e1`, cycling round fore"
"ver."
msgstr ""
"In regel drie creëren we onze riff, een ring van noten (E in de octaven 1, 2 e"
"n 3) die we simpelweg met `.tick` gaan \"tikken\". We definiëren `n` om de huidi"
"ge noot in de riff te vertegenwoordigen. Het gelijkheidsteken betekent dat de "
"waarde rechts, aan de naam links wordt verwezen. Deze zal in elke loop cyclus "
"anders zijn. In de eerste loop zal `n` naar `:e1` gezet worden. In de tweede l"
"oop cyclus zal dit `:e3`zijn gevolgd door `:e3`, en dan terug naar `:e1`, om z"
"o voor altijd zijn cyclus te herhalen."

#: A.05-acid-bass.md:70
msgid ""
"Line four is where we actually trigger our `:tb303` synth. We're passing a few"
" interesting opts here: `release:`, `cutoff:`, `res:` and `wave:` which we'll "
"discuss below."
msgstr ""
"Regel vier is waar we onze `:tb303` synth activeren. En we passeren aan deze e"
"en aantal interessante opts:  `release:`, `cutoff:`, `res:` and `wave:` dewelk"
"e we hieronder gaan bespreken."

#: A.05-acid-bass.md:74
msgid ""
"Line five is our `sleep` - we're asking the live loop to loop round every `0.1"
"25`s or 8 times a second at the default BPM of 60."
msgstr ""
"Regel vijf is onze ´sleep´' - we vragen de live loop elke ' 0,125` of 8 keer p"
"er seconde op de standaard BPM van 60 te gaan loop-en."

#: A.05-acid-bass.md:77
msgid ""
"Line six is the `end` to the live loop. This just tells Sonic Pi where the end"
" of the live loop is."
msgstr ""
"Regel 6 is het einde van de live loop. Deze vertelt aan Sonic Pi waar het eind"
"e van de live loop is."

#: A.05-acid-bass.md:80
msgid ""
"Whilst you're still figuring out what's going on, type in the code above and h"
"it the Run button. You should hear the `:tb303` kick into action. Now, this is"
" where the action is: let's start live coding."
msgstr ""
"Terwijl je nog steeds uitzoekt wat er gaande is, typt u de bovenstaande code i"
"n en druk op de knop afspelen. Je zou nu de `:tb303` in actie moeten horen sch"
"ieten. Nu, hier begint de pret: laten we beginnen live-coderen."

#: A.05-acid-bass.md:84
msgid ""
"Whilst the loop is still live, change the `cutoff:` opt to `110`. Now hit the "
"Run button again. You should hear the sound become a little harsher and more s"
"quelchy. Dial in `120` and hit run. Now `130`. Listen how higher cutoff values"
" make it sound more piercing and intense. Finally, drop it down to `80` when y"
"ou feel like a rest. Then repeat as many times as you want. Don't worry, I'll "
"still be here..."
msgstr ""
"Terwijl de loop afspeelt, verander je de `cutoff:` opt naar `110`. Klik nu opn"
"ieuw op de Afspeel knop. Je zou het geluid nu harder en rauwer moeten horen af"
"spelen. Verander deze nu op `120` en klik op Afspelen. Nu `130`en hoor het gel"
"uid intenser en meer snijdend worden. Ga tenslotte terug naar `80` wanneer het"
" jou  ter druk wordt. Herhaal dit zoveel je wil. Geen nood, ik zal hier nog we"
"l zijn :) ..."

#: A.05-acid-bass.md:91
msgid ""
"Another opt worth playing with is `res:`. This controls the level of resonance"
" of the filter. A high resonance is characteristic of acid bass sounds. We cur"
"rently have our `res:` set to `0.8`. Try cranking it up to `0.85`, then `0.9`,"
" and finally `0.95`. You might find that a cutoff such as `110` or higher will"
" make the differences easier to hear. Finally go crazy and dial in `0.999` for"
" some insane sounds. At a `res` this high, you're hearing the cutoff filter re"
"sonate so much it starts to make sounds of its own!"
msgstr ""
"Een andere opt die de moeite waard is, is `res`. Deze bedient het niveau van d"
"e resonantie van de filter. Een hoge resonantie is een typisch kenmerk van de "
"Acid Bass geluiden. Ons huidig niveau is `0.8`. Draai deze omhoog naar `0.85`,"
" dan `0.9` en tenslotte naar `0.95`. Je zult hierdoor merken dat met een cutof"
"f van `110`, de verschillen makkelijker hoorbaar zullen zijn. Doe tenslotte ma"
"ar eens goed gek, door ´0999´ te gebruiken, voor een krankzinnig geluid. Aan z"
"o een hoge `res` zal de cutoff filter zo hard resoneren dat deze zelf gaat osc"
"illeren, en zo zelf een geluidsbron wordt!"

#: A.05-acid-bass.md:100
msgid ""
"Finally, for a big impact on the timbre try changing the `wave:` opt to `1`. T"
"his is the choice of source oscillator. The default is `0` which is a sawtooth"
" wave. `1` is a pulse wave and `2` is a triangle wave."
msgstr ""
"Tenslotte veranderen we de golfvorm met de ´wave:´ opt naar `1`. Dit is de keu"
"zeschakelaar van de oscillator. Standaard is deze `0`, deze is de zaagtand gel"
"uidsgolf (sawtooth wave).`1`is de pulsgolf (pulse wave) en `2`is de triangelgo"
"lf (triangle wave)."

#: A.05-acid-bass.md:104
msgid ""
"Of course, try different riffs by changing the notes in the ring or even picki"
"ng notes from scales or chords. Have fun with your first acid bass synth."
msgstr ""
"Je kan natuurlijk ook andere riffs gebruiken door de noten te veranderen in de"
" ringen of zelfs noten te plukken uit toonladders en akkoorden. Veel plezier m"
"et je eerste Acid Bass synth."

#: A.05-acid-bass.md:108
msgid "Deconstructing the TB-303"
msgstr "De TB-303 deconstrueren"

#: A.05-acid-bass.md:110
msgid ""
"The design of the original TB-303 is actually pretty simple. As you can see fr"
"om the following diagram there's only 4 core parts."
msgstr ""
"Het ontwerp van de oorspronkelijke TB-303 is eigenlijk vrij eenvoudig. Zoals j"
"e in het volgende diagram ziet, zijn er maar 4 belangrijke kerndelen."

#: A.05-acid-bass.md:113
msgid ""
"![TB-303 Design](../../../etc/doc/images/tutorial/articles/A.05-acid-bass/tb30"
"3-design.png)"
msgstr ""
"![TB-303 Design](../../../etc/doc/images/tutorial/articles/A.05-acid-bass/tb30"
"3-design.png)"

#: A.05-acid-bass.md:115
msgid ""
"First is the oscillator wave - the raw ingredients of the sound. In this case "
"we have a square wave. Next there's the oscillator's amplitude envelope which "
"controls the amp of the square wave through time. These are accessed in Sonic "
"Pi by the `attack:`, `decay:`, `sustain:` and `release:` opts along with their"
" level counterparts. For more information read Section 2.4 'Duration with Enve"
"lopes' in the built-in tutorial. We then pass our enveloped square wave throug"
"h a resonant low pass filter. This chops off the higher frequencies as well as"
" having that nice resonance effect. Now this is where the fun starts. The cuto"
"ff value of this filter is also controlled by its own envelope! This means we "
"have amazing control over the timbre of the sound by playing with both of thes"
"e envelopes. Let's take a look:"
msgstr ""
"Ten eerste is de wave oscillator - de grondstoffen van het geluid. In dit geva"
"l hebben we een blokgolf. Vervolgens is er de amplitude envelop van de oscilla"
"tor, die de amplitude van de blokgolf door de tijd bedient. Deze zijn toeganke"
"lijk in Sonic Pi door de `attack:`, `decay:`, `sustain:` and `release:` opts  "
"vergezeld door het niveau hiervan. Lees voor meer informatie de sectie 2.4 'Du"
"urtijd met enveloppen' in de ingebouwde handleiding. Vervolgens sturen we deze"
" blokgolf met zijn envelop door een resonant low-pass filter. Dit dit snijdt i"
"n de hogere frequenties en heeft dat mooi resonantie-effect. Hier begint de pr"
"et. De grenswaarde van deze filter wordt ook gecontroleerd door eigen envelop!"
" Dit betekent dat we een geweldige controle hebben over de klankkleur van het "
"geluid door te spelen met beide van deze enveloppen. Laten we dit eens bekijke"
"n:"

#: A.05-acid-bass.md:128
#, no-wrap
msgid ""
"use_synth :tb303\n"
"with_fx :reverb, room: 1 do\n"
"  live_loop :space_scanner do\n"
"    play :e1, cutoff: 100, release: 7, attack: 1, cutoff_attack: 4, cutoff_rel"
"ease: 4\n"
"    sleep 8\n"
"  end\n"
"end"
msgstr ""
"use_synth :tb303\n"
"with_fx :reverb, room: 1 do\n"
"  live_loop :space_scanner do\n"
"    play :e1, cutoff: 100, release: 7, attack: 1, cutoff_attack: 4, cutoff_rel"
"ease: 4\n"
"    sleep 8\n"
"  end\n"
"end"

#: A.05-acid-bass.md:138
msgid ""
"For each standard envelope opt, there's a `cutoff_` equivalent opt in the `:tb"
"303` synth. So, to change the cutoff attack time we can use the `cutoff_attack"
":` opt. Copy the code above into an empty buffer and hit Run. You'll hear a cr"
"azy sound warble in and out. Now start to play. Try changing the `cutoff_attac"
"k:` time to `1` and then `0.5`. Now try `8`."
msgstr ""
"Voor elke standaard envelop opt, is er een 'cutoff_' gelijkwaardige opt-in de "
"': tb303' synth. Dus, om het tijdsverloop van de attack van de cutoff kunnen w"
"e de ' cutoff_attack:' opt gebruiken . Kopieer de code hierboven in een lege b"
"uffer en druk op Afspelen. Je hoort een gek geluidje  in en uit kwelen. Begin "
"hiermee te spelen te spelen. Probeer de ' cutoff_attack:' tijd naar te `1` te "
"brengen en vervolgens naar `0.5`.  Probeer daarna `8`."

#: A.05-acid-bass.md:144
msgid ""
"Notice that I've passed everything through a `:reverb` FX for extra atmosphere"
" - try other FX to see what works!"
msgstr ""
"Merk ook op dat ik alles door een   `:reverb` FX heb gestuurd voor een extra s"
"feer, probeer zeker een ander FX uit en zie of dit werkt!"

#: A.05-acid-bass.md:149
msgid ""
"Finally, here's a piece I composed using the ideas in this tutorial. Copy it i"
"nto an empty buffer, listen for a while and then start live coding your own ch"
"anges. See what crazy sounds you can make with it! See you next time..."
msgstr ""
"Tenslotte nog een stuk dat ik gecomponeerd heb met de ideeën van deze tutorial"
". kopieer deze in een lege buffer, luister er even naar en   verander de param"
"eters in een live coding. Kijk welke krankzinnige geluiden je ermee kan maken!"
" Tot volgende keer..."

#: A.05-acid-bass.md:154
#, no-wrap
msgid ""
"use_synth :tb303\n"
"use_debug false\n"
" \n"
"with_fx :reverb, room: 0.8 do\n"
"  live_loop :space_scanner do\n"
"    with_fx :slicer, phase: 0.25, amp: 1.5 do\n"
"      co = (line 70, 130, steps: 8).tick\n"
"      play :e1, cutoff: co, release: 7, attack: 1, cutoff_attack: 4, cutoff_re"
"lease: 4\n"
"      sleep 8\n"
"    end\n"
"  end\n"
" \n"
"  live_loop :squelch do\n"
"    use_random_seed 3000\n"
"    16.times do\n"
"      n = (ring :e1, :e2, :e3).tick\n"
"      play n, release: 0.125, cutoff: rrand(70, 130), res: 0.9, wave: 1, amp: "
"0.8\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"
msgstr ""
"use_synth :tb303\n"
"use_debug false\n"
" \n"
"with_fx :reverb, room: 0.8 do\n"
"  live_loop :space_scanner do\n"
"    with_fx :slicer, phase: 0.25, amp: 1.5 do\n"
"      co = (line 70, 130, steps: 8).tick\n"
"      play :e1, cutoff: co, release: 7, attack: 1, cutoff_attack: 4, cutoff_re"
"lease: 4\n"
"      sleep 8\n"
"    end\n"
"  end\n"
" \n"
"  live_loop :squelch do\n"
"    use_random_seed 3000\n"
"    16.times do\n"
"      n = (ring :e1, :e2, :e3).tick\n"
"      play n, release: 0.125, cutoff: rrand(70, 130), res: 0.9, wave: 1, amp: "
"0.8\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"

#: A.06-minecraft.md:1
msgid "A.6 Musical Minecraft"
msgstr "A.6 Muzikale Minecraft"

#: A.06-minecraft.md:3
msgid "Musical Minecraft"
msgstr "Muzikale Minecraft"

#: A.06-minecraft.md:7
msgid ""
"Hello and welcome back! In the previous tutorials we've focussed purely on the"
" music possibilities of Sonic Pi - (turning your Raspberry Pi into a performan"
"ce ready musical instrument). So far we've learned how to:"
msgstr ""
"Hallo en welkom terug! In de vorige tutorials heb we gericht puur op de mogeli"
"jkheden rond muziek in Sonic Pi - ( Je  Raspberry Pi in een  muziekinstrument "
"veranderen). Tot nu toe hebben we geleerd geleerd hoe te:"

#: A.06-minecraft.md:11
msgid "Live Code - changing the sounds on-the-fly,"
msgstr "Live Code - ter plekke wijzigen van het geluid,"

#: A.06-minecraft.md:12
msgid "Code some huge beats,"
msgstr "Geweldige Beats coderen,"

#: A.06-minecraft.md:13
msgid "Generate powerful synth leads,"
msgstr "Krachtige synth leads, genereren"

#: A.06-minecraft.md:14
msgid "Re-create the famous TB-303 acid-bass sound."
msgstr "De bekende TB-303 recreëren."

#: A.06-minecraft.md:16
msgid ""
"There's so much more to show you (which we will explore in future editions). H"
"owever, this month, let's look at something Sonic Pi can do that you probably "
"didn't realise: control Minecraft."
msgstr ""
"Er is zoveel meer om te laten zien (die we in toekomstige versies zullen onder"
"zoeken). Echter, deze maand, gaan we eens kijken wat je met Sonic Pi kunt doen"
" en je waarschijnlijk niet weet: controle hebben  over Minecraft."

#: A.06-minecraft.md:20
msgid "Hello Minecraft World"
msgstr "Hello Minecraft World"

#: A.06-minecraft.md:22
msgid ""
"OK, let's get started. Boot up your Raspberry Pi, fire up Minecraft Pi and cre"
"ate a new world. Now start up Sonic Pi and re-size and move your windows so yo"
"u can see both Sonic Pi and Minecraft Pi at the same time."
msgstr ""
"We gaan aan de slag. Start je  Raspberry Pi, alsook Minecraft Pi en creëer een"
" nieuwe wereld. Start Sonic Pi nu op en schik de vensters van deze programma's"
", zodat je zowel Sonic Pi als Minecraft Pi gelijkertijd kan zien."

#: A.06-minecraft.md:26
msgid "In a fresh buffer type the following:"
msgstr "In een nieuwe buffer typ je dan het volgende:"

#: A.06-minecraft.md:28
#, no-wrap
msgid "mc_message \"Hello Minecraft from Sonic Pi!\""
msgstr "mc_message \"Hello Minecraft from Sonic Pi!\""

#: A.06-minecraft.md:32
msgid ""
"Now, hit Run. Boom! Your message appeared in Minecraft! How easy was that? Now"
", stop reading this for a moment and play about with your own messages. Have f"
"un!"
msgstr ""
"Klik nu op afspelen. En Bam! Jouw bericht verschijnt nu in Minecraft! Was dat "
"niet makkelijk? Speel hier nu mee met je eigen berichten. Veel plezier ermee!"

#: A.06-minecraft.md:36
msgid ""
"![Screen 0](../../../etc/doc/images/tutorial/articles/A.06-minecraft/Musical-M"
"inecraft-0-small.png)"
msgstr ""
"![Screen 0](../../../etc/doc/images/tutorial/articles/A.06-minecraft/Musical-M"
"inecraft-0-small.png)"

#: A.06-minecraft.md:38
msgid "Sonic Teleporter"
msgstr "Sonic Teleporter"

#: A.06-minecraft.md:40
msgid ""
"Now let's do some exploring. The standard option is to reach for the mouse and"
" keyboard and start walking around. That works, but it's pretty slow and borin"
"g. It would be far better if we had some sort of teleport machine. Well, thank"
"s to Sonic Pi, we have one. Try this:"
msgstr ""
"Nu gaan we op verkenning. De standaard optie is werken met de muis en het klav"
"ier en beginnen rondlopen. Dat werkt wel, maar het is behoorlijk traag en saai"
". Het zou veel beter zijn moesten we een soort teleportatie machine hebben. We"
"l, dankzij Sonic Pi, hebben we  dat ook. Probeer deze:"

#: A.06-minecraft.md:45
#, no-wrap
msgid "mc_teleport 80, 40, 100"
msgstr "mc_teleport 80, 40, 100"

#: A.06-minecraft.md:49
msgid ""
"Crikey! That was a long way up. If you weren't in flying-mode then you would h"
"ave fallen back down all the way to the ground. If you double-tap space to ent"
"er flying-mode and teleport again, you'll stay hovering at the location you za"
"p to."
msgstr ""
"Jeetje! Dat duurde even.  Als je niet in de vliegende-modus zou zijn, was je d"
"ie afstand helemaal naar beneden gevallen. Als je space twee keer aanslaat om "
"in vliegmodus te gaan en opnieuw te teleporteren, blijf je zweven op de plaats"
" waar je naartoe zapte."

#: A.06-minecraft.md:54
msgid ""
"Now, what do those numbers mean? We have three numbers which describe the coor"
"dinates of where in the world we want to go. We give each number a name - x, y"
" and z:"
msgstr ""
"Nu, wat betekenen deze cijfers ? We hebben drie getallen die de coördinaten be"
"schrijven, waar in de wereld we willen naartoe gaan . We geven elk nummer een "
"naam - x-, y- en z:"

#: A.06-minecraft.md:58
msgid "x - how far left and right (80 in our example)"
msgstr "x - hoe ver links en rechts (80 in ons voorbeeld)"

#: A.06-minecraft.md:59
msgid "y - how high we want to be (40 in our example)"
msgstr "y - hoe hoog we willen zijn (40 in ons voorbeeld)"

#: A.06-minecraft.md:60
msgid "z - how far forward and back (100 in our example)"
msgstr "z - hoe ver voorwaarts of achterwaarts (100 in ons voorbeeld)"

#: A.06-minecraft.md:62
msgid ""
"By choosing different values for x, y and z we can teleport *anywhere* in our "
"world. Try it! Choose different numbers and see where you can end up. If the s"
"creen goes black it's because you've teleported yourself under the ground or i"
"nto a mountain. Just choose a higher y value to get back out above land. Keep "
"on exploring until you find somewhere you like..."
msgstr ""
"Door verschillende waarden te kiezen voor x, y en z kunnen we \"overal\" in de o"
"nze wereld teleporteren. Probeer maar! Kies hierbij verschillende getallen en "
"kijk waar je terechtkomt. Wanneer je scherm zwart wordt betekent dit dat je je"
"zelf onder de grond of in een berg hebt geteleporteerd. Kies dan gewoon een ee"
"n hoger getal voor y om terug op land te komen. Ga door tot je op een leuke pl"
"ek terecht gekomen bent..."

#: A.06-minecraft.md:69
msgid ""
"Using the ideas so far, let's build a Sonic Teleporter which makes a fun telep"
"ort sound whilst it whizzes us across the Minecraft world:"
msgstr ""
"Met behulp van de tot nu toe aangereikte ideeën, gaan we nu een Sonic Teleport"
"er die een leuk teleportatie geluid maakt als door de Minecraft wereld zoeven:"

#: A.06-minecraft.md:72
#, no-wrap
msgid ""
"mc_message \"Preparing to teleport....\"\n"
"sample :ambi_lunar_land, rate: -1\n"
"sleep 1\n"
"mc_message \"3\"\n"
"sleep 1\n"
"mc_message \"2\"\n"
"sleep 1\n"
"mc_message \"1\"\n"
"sleep 1\n"
"mc_teleport 90, 20, 10\n"
"mc_message \"Whoooosh!\""
msgstr ""
"mc_message \"Preparing to teleport....\"\n"
"sample :ambi_lunar_land, rate: -1\n"
"sleep 1\n"
"mc_message \"3\"\n"
"sleep 1\n"
"mc_message \"2\"\n"
"sleep 1\n"
"mc_message \"1\"\n"
"sleep 1\n"
"mc_teleport 90, 20, 10\n"
"mc_message \"Whoooosh!\""

#: A.06-minecraft.md:86
msgid ""
"![Screen 1](../../../etc/doc/images/tutorial/articles/A.06-minecraft/Musical-M"
"inecraft-1-small.png)"
msgstr ""
"![Screen 1](../../../etc/doc/images/tutorial/articles/A.06-minecraft/Musical-M"
"inecraft-1-small.png)"

#: A.06-minecraft.md:88
msgid "Magic Blocks"
msgstr "Magische blokken"

#: A.06-minecraft.md:90
msgid ""
"Now you've found a nice spot, let's start building. You could do what you're u"
"sed to and start clicking the mouse furiously to place blocks under the cursor"
". Or you could use the magic of Sonic Pi. Try this:"
msgstr ""
"Nu je een leuke plek gevonden hebt, gaan we beginnen bouwen. Je kan nu zoals j"
"e gewoonlijk doet verwoed gaan klikken om blokken onder de cursor te plaatsen."
" Of je kan de magie van Sonic Pi gebruiken. Probeer dit:"

#: A.06-minecraft.md:94
#, no-wrap
msgid ""
"x, y, z = mc_location\n"
"mc_set_block :melon, x, y + 5, z"
msgstr ""
"x, y, z = mc_location\n"
"mc_set_block :melon, x, y + 5, z"

#: A.06-minecraft.md:99
msgid ""
"Now look up! There's a melon in the sky! Take a moment to look at the code. Wh"
"at did we do? On line one we grabbed the current location of Steve as the vari"
"ables x, y and z. These correspond to our coordinates described above. We use "
"these coordinates in the fn `mc_set_block` which will place the block of your "
"choosing at the specified coordinates. In order to make something higher up in"
" the sky we just need to increase the y value which is why we add 5 to it. Let"
"'s make a long trail of them:"
msgstr ""
"Kijk omhoog! Er hangt een meloen in de lucht! Neem even de tijd om naar de cod"
"e te kijken. Wat hebben we hier gedaan? Op lijn één namen we de huidige locati"
"e van Steve als de variabelen x, y en z. Deze komen overeen met onze coördinat"
"en hierboven beschreven. Wij gebruik deze coördinaten in de fn 'mc_set_block',"
" die de blok van uw keuze zal plaatsen op de opgegeven coördinaten.Als we deze"
" nu omhoog willen plaatsen, moeten we de waarde van y verhogen,dat is ook de r"
"eden waarom we er 5 aan hebben toegevoegd. Laten we hiervan een lang spoor mak"
"en:"

#: A.06-minecraft.md:107
#, no-wrap
msgid ""
"live_loop :melon_trail do\n"
"  x, y, z = mc_location\n"
"  mc_set_block :melon, x, y-1, z\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :melon_trail do\n"
"  x, y, z = mc_location\n"
"  mc_set_block :melon, x, y-1, z\n"
"  sleep 0.125\n"
"end"

#: A.06-minecraft.md:115
msgid ""
"Now, jump over to Minecraft, make sure you're in flying-mode (double tap space"
" if not) and fly all around the world. Look behind you to see a pretty trail o"
"f melon blocks! See what kind of twisty patterns you can make in the sky."
msgstr ""
"Nu, spring nu naar Minecraft, zorg ervoor dat je in de vliegende-modus bent (2"
" keer spatie indien niet) en vlieg over de hele wereld. Kijk achter je om  een"
" mooi parcours van meloen blokken te zien! Kijk wat voor gedraaide patronen je"
" in de lucht kan maken."

#: A.06-minecraft.md:120
msgid "Live Coding Minecraft"
msgstr "Minecraft Live Coderen"

#: A.06-minecraft.md:122
msgid ""
"Those of you that have been following this tutorial over the last few months w"
"ill probably have your minds blown at this point. The trail of melons is prett"
"y cool, but the most exciting part of the previous example is that you can use"
" `live_loop` with Minecraft! For those that don't know, `live_loop` is Sonic P"
"i's special magic ability that no other programming language has. It lets you "
"run multiple loops at the same time and allows you to change them whilst they "
"run. They are incredibly powerful and amazing fun. I use `live_loop`s to perfo"
"rm music in nightclubs with Sonic Pi - DJs use discs and I use `live_loop`s :-"
") However, today we're going to live code both music and Minecraft."
msgstr ""
"Wie in de laatste maanden de zelfstudie (tutorials) heeft gevolgd zal nu wel b"
"ehoorlijk onder de indruk zijn. Het spoor van meloenen is dan ook cool, maar h"
"et strafste deel van het voorgaande voorbeeld is dat je `live_loop` kan gebrui"
"ken met Minecraft! Als je `live_loop` niet kent, het is Sonic Pi's magische ei"
"genschap die geen enkele andere programmeertaal heeft. Het staat je toe versch"
"illende \"loops\" tezelfdertijd af te spelen, en deze tezelfdertijd ook aan te p"
"assen terwijl zij afspelen. Ze zijn heel krachtig en leuk. Ik gebruik `live_lo"
"op` om live muziek te spelen in nachtclubs met Sonic Pi. Dj's gebruiken disc's"
" en ik gebruik  `live_loop`s :-) Maar vandaag gaan we zowel muziek als Minecra"
"ft live coderen."

#: A.06-minecraft.md:133
msgid ""
"Let's get started. Run the code above and start making your melon trail again."
" Now, without stopping the code, just simply change `:melon` to `:brick` and h"
"it run. Hey presto, you're now making a brick trail. How simple was that! Fanc"
"y some music to go with it? Easy. Try this:"
msgstr ""
"Laten we beginnen. Voer de bovenstaande code in en begin weer met het maken va"
"n uw meloen parcours . Nu, zonderde code  te stoppen , wijzigen `:melon` naar "
"`:brick en klik afspelen. En hupsaké, je maakt nu een parcours van baksteen. H"
"oe eenvoudig was dat! Zetten we er wat muziek bij? Ook gemakkelijk. Probeer di"
"t:"

#: A.06-minecraft.md:138
#, no-wrap
msgid ""
"live_loop :bass_trail do\n"
"  tick\n"
"  x, y, z = mc_location\n"
"  b = (ring :melon, :brick, :glass).look\n"
"  mc_set_block b, x, y -1, z\n"
"  note = (ring :e1, :e2, :e3).look\n"
"  use_synth :tb303\n"
"  play note, release: 0.1, cutoff: 70\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :bass_trail do\n"
"  tick\n"
"  x, y, z = mc_location\n"
"  b = (ring :melon, :brick, :glass).look\n"
"  mc_set_block b, x, y -1, z\n"
"  note = (ring :e1, :e2, :e3).look\n"
"  use_synth :tb303\n"
"  play note, release: 0.1, cutoff: 70\n"
"  sleep 0.125\n"
"end"

#: A.06-minecraft.md:151
msgid ""
"Now, whilst that's playing start changing the code. Change the block types - t"
"ry `:water`, `:grass` or your favourite block type. Also, try changing the cut"
"off value from `70` to `80` and then up to `100`. Isn't this fun?"
msgstr ""
"Nu, verander de code terwijl dit afspeelt. Verander de blok type's - probeer `"
":water`, `:grass` of jouw favoriete blok type uit. Probeer ook de waarde van d"
"e cutoff te wijzigen van `70`naar `80`en nog hoger tot `100`. Leuk niet?"

#: A.06-minecraft.md:158
msgid ""
"![Screen 2](../../../etc/doc/images/tutorial/articles/A.06-minecraft/Musical-M"
"inecraft-2-small.png)"
msgstr ""
"![Screen 2](../../../etc/doc/images/tutorial/articles/A.06-minecraft/Musical-M"
"inecraft-2-small.png)"

#: A.06-minecraft.md:160
msgid ""
"Let's combine everything we've seen so far with a little extra magic. Let's co"
"mbine our teleportation ability with block placing and music to make a Minecra"
"ft Music Video. Don't worry if you don't understand it all, just type it in an"
"d have a play by changing some of the values whilst it's running live. Have fu"
"n and see you next time..."
msgstr ""
"Laten ons nu alles wat we tot hiertoe hebben gezien combineren, met nog een ex"
"tra vleugje magie. En we combineren onze teleportatie met het blok plaatsen en"
" met de muziek om tot een Minecraft Muziek Videoclip te komen. Wees niet bezor"
"gd dat je niet alles begrijpt, typ het in en speel ermee door sommige waarden "
"te veranderen terwijl het live afspeelt. Veel plezier en tot een volgende keer"
"..."

#: A.06-minecraft.md:166
#, no-wrap
msgid ""
"live_loop :note_blocks do\n"
"  mc_message \"This is Sonic Minecraft\"\n"
"  with_fx :reverb do\n"
"    with_fx :echo, phase: 0.125, reps: 32 do\n"
"      tick\n"
"      x = (range 30, 90, step: 0.1).look\n"
"      y = 20\n"
"      z = -10\n"
"      mc_teleport x, y, z\n"
"      ns = (scale :e3, :minor_pentatonic)\n"
"      n = ns.shuffle.choose\n"
"      bs = (knit :glass, 3, :sand, 1)\n"
"      b = bs.look\n"
"      synth :beep, note: n, release: 0.1\n"
"      mc_set_block b, x+20, n-60+y, z+10\n"
"      mc_set_block b, x+20, n-60+y, z-10\n"
"      sleep 0.25\n"
"    end\n"
"  end\n"
"end\n"
"live_loop :beats do\n"
"  sample :bd_haus, cutoff: 100\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :note_blocks do\n"
"  mc_message \"This is Sonic Minecraft\"\n"
"  with_fx :reverb do\n"
"    with_fx :echo, phase: 0.125, reps: 32 do\n"
"      tick\n"
"      x = (range 30, 90, step: 0.1).look\n"
"      y = 20\n"
"      z = -10\n"
"      mc_teleport x, y, z\n"
"      ns = (scale :e3, :minor_pentatonic)\n"
"      n = ns.shuffle.choose\n"
"      bs = (knit :glass, 3, :sand, 1)\n"
"      b = bs.look\n"
"      synth :beep, note: n, release: 0.1\n"
"      mc_set_block b, x+20, n-60+y, z+10\n"
"      mc_set_block b, x+20, n-60+y, z-10\n"
"      sleep 0.25\n"
"    end\n"
"  end\n"
"end\n"
"live_loop :beats do\n"
"  sample :bd_haus, cutoff: 100\n"
"  sleep 0.5\n"
"end"

#: A.07-bizet.md:1
msgid "A.7 Bizet Beats"
msgstr "A.7 Bizet Beats"

#: A.07-bizet.md:3
msgid "Bizet Beats"
msgstr "Bizet Beats"

#: A.07-bizet.md:5
msgid ""
"After our brief excursion to the fantastic world of coding Minecraft with Soni"
"c Pi last month, let's get musical again. Today we're going to bring a classic"
"al operatic dance piece straight into the 21st century using the awesome power"
" of code."
msgstr ""
"Na onze korte excursie vorige maand, naar de fantastische wereld van het coder"
"en van Minecraft met Sonic Pi , gaan we opnieuw de muzikale toer op. Vandaag g"
"aan we een klassieke opera dansstuk rechtstreeks naar de 21ste eeuw katapulter"
"en met behulp van de ongelofelijke krachtt van code."

#: A.07-bizet.md:10
msgid "Outrageous and Disruptive"
msgstr "Schandalig en Disruptief"

#: A.07-bizet.md:12
msgid ""
"Let's jump into a time machine back to the year 1875. A composer called Bizet "
"had just finished his latest opera Carmen. Unfortunately like many exciting an"
"d disruptive new pieces of music people initially didn't like it at all becaus"
"e it was too outrageous and different. Sadly Bizet died ten years before the o"
"pera gained huge international success and became one of the most famous and f"
"requently performed operas of all time. In sympathy with this tragedy let's ta"
"ke one of the main themes from Carmen and convert it to a modern format of mus"
"ic that is also too outrageous and different for most people in our time - liv"
"e coded music!"
msgstr ""
"Laten we door de teletijdmachine terugkeren naar het jaar 1875. Een componist "
"Bizet genaamd heeft net zijn laatste opera Carmen afgewerkt. Zoals het helaas "
"dikwijls gaat met vernieuwende muziek ,sloeg het bij het publiek niet aan wege"
"ns te verschillend en te uitbundig. Helaas stierf Bizet 10 jaar voordat deze o"
"pera een internationaal succes werd en één van de meest beroemde en gespeelde "
"opera's aller tijden werd. Uit sympathie voor deze tragedie gaan we één van de"
" hoofdthema's van Carmen in een moderne muziekstijl gieten die voor de meeste "
"mensen in deze tijd ook te \"anders\" is: live gecodeerde muziek!"

#: A.07-bizet.md:23
msgid "Decoding the Habanera"
msgstr "De Habanera decoderen"

#: A.07-bizet.md:25
msgid ""
"Trying to live code the whole opera would be a bit of a challenge for this tut"
"orial, so let's focus on one of the most famous parts - the bass line to the H"
"abanera:"
msgstr ""
"Om deze volledige opera zou in deze oefening een te grote uitdaging zijn, late"
"n we daarom ons op één van de meest beroemde delen focussen- de baslijn van de"
" Habanera:"

#: A.07-bizet.md:29
msgid ""
"![Habanera Riff](../../../etc/doc/images/tutorial/articles/A.07-bizet/habanera"
".png)"
msgstr ""
"![Habanera Riff](../../../etc/doc/images/tutorial/articles/A.07-bizet/habanera"
".png)"

#: A.07-bizet.md:31
msgid ""
"This may look extremely unreadable to you if you haven't yet studied music not"
"ation. However, as programmers we see music notation as just another form of c"
"ode - only it represents instructions to a musician instead of a computer. We "
"therefore need to figure out a way of decoding it."
msgstr ""
"Dit kan uiterst onleesbaar lijken als je geen muziek hebt gestudeerd .Als prog"
"rammeurs kunnen wij muzieknotatie zien als gewoon een andere vorm van code.Hie"
"rmee geeft u instructies aan een musicus in plaats van een computer. Daarom mo"
"eten wij een manier bedenken om het te decoderen."

#: A.07-bizet.md:36
msgid "Notes"
msgstr "Noten"

#: A.07-bizet.md:38
msgid ""
"The notes are arranged from left to right like the words in this magazine but "
"also have different heights. *The height on the score represents the pitch of "
"the note.* The higher the note on the score, the higher the pitch of the note."
msgstr ""
"De noten zijn van links naar rechts gerangschikt zoals de woorden op uw scherm"
",maar hebben ook verschillende plaatsing  in hoogte.* De hoogte in de partituu"
"r geeft de toonhoogte weer.* Hoe hoger de noot in de partituur staat, hoe hoge"
"r de noot klinkt."

#: A.07-bizet.md:43
msgid ""
"In Sonic Pi we already know how to change the pitch of a note - we either use "
"high or low numbers such as `play 75` and `play 80` or we use the note names: "
"`play :E` and `play :F`. Luckily each of the vertical positions of the musical"
" score represents a specific note name. Take a look at this handy look up tabl"
"e:"
msgstr ""
"Hoe we in Sonic Pi de toonhoogte van noten moeten veranderen, weten we al - of"
"wel gebruiken we getallen zoals `play 75` en `play 80` of we gebruiken de naam"
" van de noot: `play :E` en`play :F`. Gelukkig vertegenwoordigt elk van de vert"
"icale posities van de partituur de naam van een specifieke noot. Neem een kijk"
"je naar deze handige opzoek tabel:"

#: A.07-bizet.md:49
msgid "![Notes](../../../etc/doc/images/tutorial/articles/A.07-bizet/notes.png)"
msgstr "![Notes](../../../etc/doc/images/tutorial/articles/A.07-bizet/notes.png)"

#: A.07-bizet.md:51
msgid "Rests"
msgstr "Rusttijden"

#: A.07-bizet.md:53
msgid ""
"Music scores are an extremely rich and expressive kind of code capable of comm"
"unicating many things. It therefore shouldn't come as much of a surprise that "
"musical scores can not only tell you what notes to play but also when *not* to"
" play notes. In programming this is pretty much equivalent to the idea of `nil"
"` or `null` - the absence of a value. In other words not playing a note is lik"
"e the absence of a note."
msgstr ""
"Partituren zijn een zeer rijke en expressieve soort code waarmee je verschille"
"nde uiteenlopende zaken kan communiceren.Het zal dan ook niet verbazen dat par"
"tituren jou niet alleen vertellen welke noten je moet spelen, maar ook waar je"
" *geen* noten mag spelen. In het programmeren is dat te vertalen naar het idee"
" van `nil` of `null` - de afwezigheid van een waarde. Met andere woorden, een "
"noot niet spelen is zoals een noot die afwezig is."

#: A.07-bizet.md:60
msgid ""
"If you look closely at the score you'll see that it's actually a combination o"
"f black dots with lines which represent notes to play and squiggly things whic"
"h represent the rests. Luckily Sonic Pi has a very handy representation for a "
"rest: `:r`, so if we run: `play :r` it actually plays silence! We could also w"
"rite `play :rest`, `play nil` or `play false` which are all equivalent ways of"
" representing rests."
msgstr ""
"Als je de partituur aandachtig bekijkt zal je zien dat  deze een combinatie va"
"n zwarte punten met lijnen bevat de de te spelen noten vertegenwoordigen, en k"
"ronkelende dingen die de rusttijden vertegenwoordigen. Gelukkig heeft Sonic Pi"
" een handige manier om een rusttijd aan te geven: `:r`, dus als we `play :r` a"
"fspelen, speelt deze eigenlijk stilte af! We kunnen ook `play :rest` schrijven"
", `play nil` of `play false` die allemaal evengoed een rusttijd vertegenwoordi"
"gen."

#: A.07-bizet.md:67
msgid "Rhythm"
msgstr "Ritme"

#: A.07-bizet.md:69
msgid ""
"Finally, there's one last thing to learn how to decode in the notation - the t"
"imings of the notes. In the original notation you'll see that the notes are co"
"nnected with thick lines called beams. The second note has two of these beams "
"which means it lasts for a 16th of a beat. The other notes have a single beam "
"which means they last for an 8th of a beat. The rest has two squiggly beams wh"
"ich means it also represents a 16th of the beat."
msgstr ""
"Tenslotte nog een laatste manier om de noten te ontcijferen: de timing van de "
"noten. In de originele partituur zal je zien dat de noten verbonden zijn met d"
"ikke lijnen die men waardestrepen noemt. De tweede noot heeft twee lijnen in d"
"eze waardestreep wat betekent dat deze noot een zestiende van een tel aanhoudt"
".De andere noten hebben een enkel waardestreepje, wat wil zeggen dat deze een "
"8-ste van een tel aanhouden. De rest heeft twee krullige lijnen, vlagjes, die "
"willen zeggen dat deze ook een 16-de van een tel zijn."

#: A.07-bizet.md:77
msgid ""
"When we attempt to decode and explore new things a very handy trick is to make"
" everything as similar as possible to try and see any relationships or pattern"
"s. For example, when we re-write our notation purely in 16ths you can see that"
" our notation just turns into a nice sequence of notes and rests."
msgstr ""
"Als we trachten nieuwe zaken te ontcijferen, is het handig om alles eenvormig "
"te maken om zo patronen en verbanden te kunnen zien. Bijvoorbeeld, als we onze"
" notenschrift in louter zestiende noten zouden herschrijven, kan je zien dat o"
"ns notenschrift verandert in een opeenvolging van noten en rusttijden."

#: A.07-bizet.md:83
msgid ""
"![Habanera Riff 2](../../../etc/doc/images/tutorial/articles/A.07-bizet/habane"
"ra2.png)"
msgstr ""
"![Habanera Riff 2](../../../etc/doc/images/tutorial/articles/A.07-bizet/habane"
"ra2.png)"

#: A.07-bizet.md:85
msgid "Re-coding the Habanera"
msgstr "De Habanera Hercoderen"

#: A.07-bizet.md:87
msgid ""
"We're now in a position to start translating this bass line to Sonic Pi. Let's"
" encode these notes and rests in a ring:"
msgstr ""
"We staan nu op het punt om te beginnen met het vertalen van deze baslijn naar "
"Sonic Pi. Laten we deze noten en rusttijden in een ring coderen:"

#: A.07-bizet.md:90
#, no-wrap
msgid "(ring :d, :r, :r, :a, :f5, :r, :a, :r)"
msgstr "(ring :d, :r, :r, :a, :f5, :r, :a, :r)"

#: A.07-bizet.md:94
msgid "Let's see what this sounds like. Throw it in a live loop and tick through it:"
msgstr ""
"Laten we eens kijken hoe dit klinkt. Gooi het in een live loop en \"tick\" erdoo"
"r heen:"

#: A.07-bizet.md:97
#, no-wrap
msgid ""
"live_loop :habanera do\n"
"  play (ring :d, :r, :r, :a, :f5, :r, :a, :r).tick\n"
"  sleep 0.25\n"
"end"
msgstr ""
"live_loop :habanera do\n"
"  play (ring :d, :r, :r, :a, :f5, :r, :a, :r).tick\n"
"  sleep 0.25\n"
"end"

#: A.07-bizet.md:104
msgid ""
"Fabulous, that instantly recognisable riff springs to life through your speake"
"rs. It took a lot of effort to get here, but it was worth it - high five!"
msgstr ""
"Fantastisch, die herkenbare riff komt door jouw luidsprekers meteen  tot leven"
". Het kostte veel moeite om hier te komen, maar het was het waard - high five!"

#: A.07-bizet.md:108
msgid "Moody Synths"
msgstr "Moody Synths"

#: A.07-bizet.md:110
msgid ""
"Now we have the bass line, let's re-create some of the ambience of the operati"
"c scene. One synth to try out is `:blade` which is a moody 80s style synth lea"
"d. Let's try it with the starting note `:d` passed through a slicer and reverb"
":"
msgstr ""
"Nu we de baslijn hebben, gaan we de sfeer van de opera recreëren. Een synth om"
" uit te proberen is `:blade` welke een stemmige, jaren 80 stijl, synth lead is"
". We proberen deze met de beginnoot `:d`en laten deze door een slicer en een r"
"everb passeren:"

#: A.07-bizet.md:115
#, no-wrap
msgid ""
"live_loop :habanera do\n"
"  use_synth :fm\n"
"  use_transpose -12\n"
"  play (ring :d, :r, :r, :a, :f5, :r, :a, :r).tick\n"
"  sleep 0.25\n"
"end\n"
"with_fx :reverb do\n"
"  live_loop :space_light do\n"
"    with_fx :slicer, phase: 0.25 do\n"
"      synth :blade, note: :d, release: 8, cutoff: 100, amp: 2\n"
"    end\n"
"    sleep 8\n"
"  end\n"
"end"
msgstr ""
"live_loop :habanera do\n"
"  use_synth :fm\n"
"  use_transpose -12\n"
"  play (ring :d, :r, :r, :a, :f5, :r, :a, :r).tick\n"
"  sleep 0.25\n"
"end\n"
"with_fx :reverb do\n"
"  live_loop :space_light do\n"
"    with_fx :slicer, phase: 0.25 do\n"
"      synth :blade, note: :d, release: 8, cutoff: 100, amp: 2\n"
"    end\n"
"    sleep 8\n"
"  end\n"
"end"

#: A.07-bizet.md:133
msgid ""
"Now, try the other notes in the bass line: `:a` and `:f5`. Remember, you don't"
" need to hit stop, just modify the code whilst the music is playing and hit ru"
"n again. Also, try different values for the slicer's `phase:` opt such as `0.5"
"`, `0.75` and `1`."
msgstr ""
"Probeer nu de andere noten in de baslijn: `:a`en `:f5`. Denk eraan, je hoeft n"
"iet op stop te drukken, je hoeft enkel de code te veranderen terwijl de muziek"
" afspeelt en op afspelen de drukken. Probeer ook verschillende waarden uit voo"
"r de  `phase:` opt van de slicer uit zoals `0.5`, `0.75`en  `1`."

#: A.07-bizet.md:140
msgid ""
"Finally, let's combine all the ideas so far into a new remix of the Habanera. "
"You might notice that I've included another part of the bass line as a comment"
". Once you've typed it all into a fresh buffer hit Run to hear the composition"
". Now, without hitting stop, *uncomment* the second line by removing the `#` a"
"nd hit run again - how marvellous is that! Now, start mashing it around yourse"
"lf and have fun."
msgstr ""
"Ten slotte combineren we alle ideeën die we tot dusver hebben gezien in een ni"
"euwe remix van De Habanera. Je zal opmerken dat ik een ander deel van de basli"
"jn in een commentaarlijn heb gestoken. Eens je alles in een nieuwe buffer hebt"
" getypt, druk je op afspelen om de compositie te horen. Nu, zonder op stop te "
"drukken ga je de tweede regel *uitcommentariëren*  door de # te verwijderen en"
" opnieuw op afspelen te drukken, - hoe prachtig is dat!. Probeer zelf nog het "
"een en ander en veel plezier ermee."

#: A.07-bizet.md:147
#, no-wrap
msgid ""
"use_debug false\n"
"bizet_bass = (ring :d, :r, :r, :a, :f5, :r, :a, :r)\n"
"#bizet_bass = (ring :d, :r, :r, :Bb, :g5, :r, :Bb, :r)\n"
" \n"
"with_fx :reverb, room: 1, mix: 0.3 do\n"
"  live_loop :bizet do\n"
"    with_fx :slicer, phase: 0.125 do\n"
"      synth :blade, note: :d4, release: 8,\n"
"        cutoff: 100, amp: 1.5\n"
"    end\n"
"    16.times do\n"
"      tick\n"
"      play bizet_bass.look, release: 0.1\n"
"      play bizet_bass.look - 12, release: 0.3\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end\n"
" \n"
"live_loop :ind do\n"
"  sample :loop_industrial, beat_stretch: 1,\n"
"    cutoff: 100, rate: 1\n"
"  sleep 1\n"
"end\n"
" \n"
"live_loop :drums do\n"
"  sample :bd_haus, cutoff: 110\n"
"  synth :beep, note: 49, attack: 0,\n"
"    release: 0.1\n"
"  sleep 0.5\n"
"end"
msgstr ""
"use_debug false\n"
"bizet_bass = (ring :d, :r, :r, :a, :f5, :r, :a, :r)\n"
"#bizet_bass = (ring :d, :r, :r, :Bb, :g5, :r, :Bb, :r)\n"
" \n"
"with_fx :reverb, room: 1, mix: 0.3 do\n"
"  live_loop :bizet do\n"
"    with_fx :slicer, phase: 0.125 do\n"
"      synth :blade, note: :d4, release: 8,\n"
"        cutoff: 100, amp: 1.5\n"
"    end\n"
"    16.times do\n"
"      tick\n"
"      play bizet_bass.look, release: 0.1\n"
"      play bizet_bass.look - 12, release: 0.3\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end\n"
" \n"
"live_loop :ind do\n"
"  sample :loop_industrial, beat_stretch: 1,\n"
"    cutoff: 100, rate: 1\n"
"  sleep 1\n"
"end\n"
" \n"
"live_loop :drums do\n"
"  sample :bd_haus, cutoff: 110\n"
"  synth :beep, note: 49, attack: 0,\n"
"    release: 0.1\n"
"  sleep 0.5\n"
"end"

#: A.08-minecraft-vj.md:1
msgid "A.8 Become a Minecraft VJ"
msgstr "A.8 Word een Minecraft VJ"

#: A.08-minecraft-vj.md:3
msgid "Become a Minecraft VJ"
msgstr "Word een Minecraft VJ"

#: A.08-minecraft-vj.md:5
msgid ""
"![Screen 0](../../../etc/doc/images/tutorial/articles/A.08-minecraft-vj/minecr"
"aft-vj-0-small.png)"
msgstr ""
"![Screen 0](../../../etc/doc/images/tutorial/articles/A.08-minecraft-vj/minecr"
"aft-vj-0-small.png)"

#: A.08-minecraft-vj.md:7
msgid ""
"Everyone has played Minecraft. You will all have built amazing structures, des"
"igned cunning traps and even created elaborate cart lines controlled by redsto"
"ne switches. How many of you have performed with Minecraft? We bet you didn't "
"know that you could use Minecraft to create amazing visuals just like a profes"
"sional VJ."
msgstr ""
"Iedereen heeft ooit Minecraft gespeeld. Je zal allemaal verbazingwekkende stru"
"cturen gebouwd hebben, sluwe vallen ontworpen hebben en zelfs cart lines hebbe"
"n uitgewerkt met hun bijbehorende redstone schakelaars. Hoeveel van jullie heb"
"ben al een optreden gedaan met Minecraft? Wedden dat je niet wist dat je Minec"
"raft kunt gebruiken om ongelofelijke beelden af te spelen net zoals een profes"
"sionele VJ dat doet."

#: A.08-minecraft-vj.md:13
msgid ""
"If your only way of modifying Minecraft was with the mouse, you'd have a tough"
" time changing things fast enough. Luckily for you your Raspberry Pi comes wit"
"h a version of Minecraft that can be controlled with code. It also comes with "
"an app called Sonic Pi which makes coding Minecraft not only easy but also inc"
"redibly fun."
msgstr ""
"Als de muis de enige manier was om Minecraft te modificeren, had je het waarsc"
"hijnlijk moeilijk om de dingen vlug genoeg veranderd te krijgen. Gelukkig komt"
" jouw Raspberry Pi met een versie van Minecraft dat met behulp van code kan ge"
"controlt worden. Er is ook een app bij die Sonic Pi heet, die Het coderen van "
"Minecraft niet alleen makkelijk, maar ook plezierig maakt."

#: A.08-minecraft-vj.md:19
msgid ""
"In today's article we'll be showing you some of the tips and tricks that we've"
" used to create performances in night clubs and music venues around the world."
msgstr ""
"In het artikel van vandaag gaan we jou enkele van de tips en trucjes tonen, di"
"e we hebben gebruikt bij optredens in nachtclubs en podia over de hele wereld."

#: A.08-minecraft-vj.md:23
msgid "Let's get started..."
msgstr "Laten we starten..."

#: A.08-minecraft-vj.md:25
msgid "Getting Started"
msgstr "Starten"

#: A.08-minecraft-vj.md:27
msgid ""
"Let's start with a simple warm up exercise to refresh ourselves with the basic"
"s. First up, crack open your Raspberry Pi and then fire up both Minecraft and "
"Sonic Pi. In Minecraft, create a new world, and in Sonic Pi choose a fresh buf"
"fer and write in this code:"
msgstr ""
"Laten we eerst een opwarmertje doen, en even terug keren naar de basis. Vooral"
"eerst, doe je Raspberry Pi open en start zowel Minecraft als Sonic Pi op, creë"
"er een nieuwe wereld, en kies in Sonic Pi een verse buffer en schrijf deze cod"
"e:"

#: A.08-minecraft-vj.md:32
#, no-wrap
msgid "mc_message \"Let's get started...\""
msgstr "mc_message \"Let's get started...\""

#: A.08-minecraft-vj.md:36
msgid ""
"Hit the Run button and you'll see the message over in the Minecraft window. OK"
", we're ready to start, let's have some fun......"
msgstr ""
"Sla de afspelen toets aan om het bericht te zien in het Minecraft-venster.  Ok"
", we zijn klaar om te starten. We gaan wat pret maken..."

#: A.08-minecraft-vj.md:39
msgid "Sand Storms"
msgstr "Zandstormen"

#: A.08-minecraft-vj.md:41
msgid ""
"When we're using Minecraft to create visuals we try and think about what will "
"both look interesting and also be easy to generate from code. One nice trick i"
"s to create a sand storm by dropping sand blocks from the sky. For that all we"
" need are a few basic fns:"
msgstr ""
"Wanneer we Minecraft gebruiken om visuals mee te maken, houden we in gedachte "
"dat we iets leuk om naar te kijken maken als zowel makkelijk uit code kunnen g"
"enereren. Een leuke truc is een zandstorm creëren door zandblokken uit de luch"
"t te laten vallen. Daarvoor hebben we een aantal basis fns nodig:"

#: A.08-minecraft-vj.md:46
msgid "`sleep` - for inserting a delay between actions"
msgstr "`sleep` - voor het invoegen van een vertraging tussen acties"

#: A.08-minecraft-vj.md:47
msgid "`mc_location` - to find our current location"
msgstr "`mc_location` - om onze huidige lokatie te vinden"

#: A.08-minecraft-vj.md:48
msgid "`mc_set_block`- to place sand blocks at a specific location"
msgstr "`mc_set_block`- om de zandblokken op een bepaalde plaats te zetten"

#: A.08-minecraft-vj.md:49
msgid "`rrand` - to allow us to generate random values within a range"
msgstr ""
"`rrand` - om ons toe te laten random waarden binnen een bepaald bereik te gene"
"reren"

#: A.08-minecraft-vj.md:50
msgid "`live_loop` - to allow us to continually make it rain sand"
msgstr "`live_loop` - om ons toe te laten een constante stroom aan regen te maken"

#: A.08-minecraft-vj.md:52
msgid ""
"If you're unfamiliar with any of the built-in fns such as `rrand`, just type t"
"he word into your buffer, click on it and then hit the keyboard combo `Control"
"-i` to bring up the built-in documentation. Alternatively you can navigate to "
"the *lang* tab in the Help system and then look up the fns directly along with"
" all the other exciting things you can do."
msgstr ""
"Als je niet vertrouwd bent met een van de ingebouwde fns zoals `rrand`, typ he"
"t woord in je buffer, klik erin en gebruik de combinatie `control-i` op je toe"
"tsenbord om de ingebouwde documentatie op te roepen. Alternatief kan je ook na"
"vigeren naar de *lang* tab in het hulpsysteem en zoek fns op, tussen al de and"
"ere leuke dingen die je kan doen."

#: A.08-minecraft-vj.md:58
msgid ""
"Let's make it rain a little first before unleashing the full power of the stor"
"m. Grab your current location and use it to create a few sand blocks up in the"
" sky nearby:"
msgstr ""
"Laat het een beetje regenen vooraleer je de zandstorm op volle kracht zet. Plu"
"k je huidige locatie en gebruik deze om in de buurt een paar zandblokken in de"
" lucht te plaatsen:"

#: A.08-minecraft-vj.md:62
#, no-wrap
msgid ""
"x, y, z = mc_location\n"
"mc_set_block :sand, x, y + 20, z + 5\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 6\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 7\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 8"
msgstr ""
"x, y, z = mc_location\n"
"mc_set_block :sand, x, y + 20, z + 5\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 6\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 7\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 8"

#: A.08-minecraft-vj.md:73
msgid ""
"When you hit Run, you might have to look around a little as the blocks may sta"
"rt falling down behind you depending on which direction you're currently facin"
"g. Don't worry, if you missed them just hit Run again for another batch of san"
"d rain - just make sure you're looking the right way!"
msgstr ""
"Wanneer je Afspelen aanslaat, moet je misschien een beetje rondkijken om zicht"
" te hebben op de vallende blokken vermits hun zichtbaarheid afhangt van jouw k"
"ijkrichting. Geen nood als je hun val net gemist hebt, klik gewoon terug op Af"
"spelen voor een nieuwe partij zandregen- zorg er gewoon voor dat je in de juis"
"te richting kijkt!"

#: A.08-minecraft-vj.md:79
msgid ""
"Let's quickly review what's going on here. On the first line we grabbed Steve'"
"s location as coordinates with the fn `mc_location` and placed them into the v"
"ars `x`, `y`, and `z`. Then on the next lines we used the `mc_set_block` fn to"
" place some sand at the same coordinates as Steve but with some modifications."
" We chose the same x coordinate, a y coordinate 20 blocks higher and then succ"
"essively larger z coordinates so the sand dropped in a line away from Steve."
msgstr ""
"Laten we even kijken wat hier gaan de is. In de eerste regel bemachtigde we de"
" coördinaten van de huidige locatie van Steve via de  `mc_location` en plaatst"
"en we deze in de variabelen `x`, `y`, en `z`. Op de volgende regels gebruikten"
" we  `mc_set_block` fn om wat zand te plaatsen op de zelfde coördinaten als di"
"e van Steve, met wat aanpassingen. We kozen dezelfde x coördinaat , een y coör"
"dinaat 20 blokken hoger en achtereenvolgens een groter z coördinaat zodat het "
"zand niet ver van Steve naar beneden valt."

#: A.08-minecraft-vj.md:87
msgid ""
"Why don't you take that code and start playing around with it yourself? Try ad"
"ding more lines, changing the sleep times, try mixing `:sand` with `:gravel` a"
"nd choose different coordinates. Just experiment and have fun!"
msgstr ""
"Waarom nemen we deze code niet over om hier wat mee te gaan spelen? Probeer me"
"er lijnregels, verander de rusttijden (sleep), probeer `:sand` met `:gravel` t"
"e mengen en gebruik verschillende coördinaten? Experimenteer maar en veel plez"
"ier ermee!"

#: A.08-minecraft-vj.md:91
msgid "Live Loops Unleashed"
msgstr "Live Loops ontketend"

#: A.08-minecraft-vj.md:93
msgid ""
"OK, it's time to get the storm raging by unleashing the full power of the `liv"
"e_loop` - Sonic Pi's magical ability which unleashes the full power of live co"
"ding - changing code on-the-fly whilst it's running!"
msgstr ""
"Ok, tijd om een storm te laten woeden door de kracht van de `live_loop` te lat"
"en ontketenen - Sonic Pi's wonderlijke eigenschap die de kracht van het live c"
"ode-en laat zien- namelijk de code wijzigen terwijl deze loopt!"

#: A.08-minecraft-vj.md:97
#, no-wrap
msgid ""
"live_loop :sand_storm do\n"
"  x, y, z = mc_location\n"
"  xd = rrand(-10, 10)\n"
"  zd = rrand(-10, 10)\n"
"  co = rrand(70, 130)\n"
"  synth :cnoise, attack: 0, release: 0.125, cutoff: co\n"
"  mc_set_block :sand, x + xd, y+20, z+zd\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :sand_storm do\n"
"  x, y, z = mc_location\n"
"  xd = rrand(-10, 10)\n"
"  zd = rrand(-10, 10)\n"
"  co = rrand(70, 130)\n"
"  synth :cnoise, attack: 0, release: 0.125, cutoff: co\n"
"  mc_set_block :sand, x + xd, y+20, z+zd\n"
"  sleep 0.125\n"
"end"

#: A.08-minecraft-vj.md:109
msgid ""
"What fun! We're looping round pretty quickly (8 times a second) and during eac"
"h loop we're finding Steve's location like before but then generating 3 random"
" values:"
msgstr ""
"Hoe leuk! We gaan behoorlijk snel door deze Loop (8 keer per seconde) en bij e"
"lke doorloop vinden we opnieuw de locatie van Steve om er dan 3 random waarden"
" bij te genereren:"

#: A.08-minecraft-vj.md:113
msgid "`xd` - the difference for x which will be between -10 and 10"
msgstr "`xd` - het verschil bij x welke tussen -10 en 10 liggen"

#: A.08-minecraft-vj.md:114
msgid "`zd` - the difference for z also between -10 and 10"
msgstr "`zd` - het verschil bij z ook tussen -10 en 10"

#: A.08-minecraft-vj.md:115
msgid "`co` - a cutoff value for the low pass filter between 70 and 130"
msgstr "`co` - een cutoff waarde voor de low pass filter tussen 70 en 130"

#: A.08-minecraft-vj.md:117
msgid ""
"We then use those random values in the fns `synth` and `mc_set_block` giving u"
"s sand falling in random locations around Steve along with a percussive rain-l"
"ike sound from the `:cnoise` synth."
msgstr ""
"We gebruiken dan deze random waarden in de fns `synth` en `mc_set_block` die o"
"ns vallend zand geven op willekeurige plaatsen rond Steve samen met een regen-"
"achtig geluid van de `:cnoise` synth."

#: A.08-minecraft-vj.md:121
msgid ""
"For those of you new to live loops - this is where the fun really starts with "
"Sonic Pi. Whilst the code is running and the sand is pouring down, try changin"
"g one of the values, perhaps the sleep time to `0.25` or the `:sand` block typ"
"e to `:gravel`. Now hit run *again*. Hey Presto! Things changed without the co"
"de stopping. This is your gateway to performing like a real VJ. Keep practisin"
"g and changing things around. How different can you make the visuals without s"
"topping the code?"
msgstr ""
"Voor diegene voor wie  live loops nieuw zijn - hier begint de pret pas met Son"
"ic Pi. Terwijl de code loopt en het zand naar beneden wordt uitgestrooid, trac"
"ht je één van de waarden te veranderen, misschien de rusttijd (sleep) naar `0."
"25` of de `:sand` block type naar `:gravel. Druk nu *opnieuw* Afspelen in. En "
"presto veranderde de zaken die je had aangepast zonder de code te hoeven stopp"
"en. Dit is jouw toegangspoort om als een echte VJ aan de slag te gaan. Blijf o"
"efenen en verander hier en daar wat. Hoe verschillend kan jij de visuals maken"
" zonder de code te stoppen?"

#: A.08-minecraft-vj.md:129
msgid "Epic Block Patterns"
msgstr "Epische blok patronen"

#: A.08-minecraft-vj.md:131
msgid ""
"![Screensman 1](../../../etc/doc/images/tutorial/articles/A.08-minecraft-vj/mi"
"necraft-vj-1-small.png)"
msgstr ""
"![Screen 1](../../../etc/doc/images/tutorial/articles/A.08-minecraft-vj/minecr"
"aft-vj-1-small.png)"

#: A.08-minecraft-vj.md:133
msgid ""
"Finally, another great way of generating interesting visuals is to generate hu"
"ge patterned walls to fly towards and close by. For this effect we'll need to "
"move from placing the blocks randomly to placing them in an ordered manner. We"
" can do this by nesting two sets of iteration (hit the Help button and navigat"
"e to section 5.2 of the tutorial \"Iteration and Loops\" for more background on "
"iteration). The funny `|xd|` after the do means that `xd` will be set for each"
" value of the iteration. So the first time it will be 0, then 1, then 2... etc"
". By nesting two lots of iteration together like this we can generate all the "
"coordinates for a square. We can then randomly choose block types from a ring "
"of blocks for an interesting effect:"
msgstr ""
"Wat tenslotte ook een fantastische manier is om interessante visuals te maken "
"is van een grote muur van een patroon te genereren om naartoe en langsheen te "
"vliegen. Om dit effect te bereiken moeten moeten we ons van het idee van het w"
"illekeurig plaatsen van blokken verplaatsen naar deze geordend te plaatsen. We"
" kunnen dit doen door twee sets van iteratie (druk op de hulp-knop om naar sec"
"tie 5.2 van de zelfstudie \"Iteratie en loops\" te navigeren voor meer achtergro"
"ndinformatie over iteraties). De gekke `|xd|` achter do betekend dat `xd` acht"
"er elke waarde van de iteratie zal worden gezet. De eerste keer zal deze 0 zij"
"n, dan1, dan 2.....enz. Door twee delen iteratie te gaan nesten, kunnen we op "
"deze manier de coördinaten voor een vierkant genereren. We kunnen dan willekeu"
"rig blok-types kiezen van een ring van blokken om een interessant effect te be"
"komen:"

#: A.08-minecraft-vj.md:145
#, no-wrap
msgid ""
"x, y, z = mc_location\n"
"bs = (ring :gold, :diamond, :glass)\n"
"10.times do |xd|\n"
"  10.times do |yd|\n"
"    mc_set_block bs.choose, x + xd, y + yd, z\n"
"  end\n"
"end"
msgstr ""
"x, y, z = mc_location\n"
"bs = (ring :gold, :diamond, :glass)\n"
"10.times do |xd|\n"
"  10.times do |yd|\n"
"    mc_set_block bs.choose, x + xd, y + yd, z\n"
"  end\n"
"end"

#: A.08-minecraft-vj.md:155
msgid ""
"Pretty neat. Whilst we're having fun here, try changing `bs.choose` to `bs.tic"
"k` to move from a random pattern to a more regular one. Try changing the block"
" types and the more adventurous of you might want to try sticking this within "
"a `live_loop` so that the patterns keep changing automatically."
msgstr ""
"Behoorlijk gaaf. Terwijl we hiermee plezier beleven, probeer je `bs.choose` te"
" veranderen naar `bs.tick om van een willekeurig patroon een meer regelmatig p"
"atroon te bekomen. Probeer ook de blok-type's te veranderen en de waaghalzen o"
"nder ons willen deze misschien ook in een `live_loop` plakken om de patronen a"
"utomatisch te laten veranderen."

#: A.08-minecraft-vj.md:161
msgid ""
"Now, for the VJ finale - change the two `10.times` to `100.times` and hit Run."
" Kaboom! A Huge gigantic wall of randomly placed bricks. Imagine how long it w"
"ould take you to build that manually with your mouse! Double-tap space to ente"
"r fly-mode and start swooping by for some great visual effects. Don't stop her"
"e though - use your imagination to conjure up some cool ideas and then use the"
" coding power of Sonic Pi to make it real. When you've practised enough dim th"
"e lights and put on a VJ show for your friends!"
msgstr ""
"Nu, voor de VJ finale: verander de twee `10.times` naar `100.times` en klik op"
" Afspelen. Kaboom! Een reusachtig en gigantische muur van willekeurig geplaats"
"te bakstenen. Beeld je in hoe lang je daarmee bezig zou zijn geweest indien je"
" dit met de muis zou gedaan hebben! Sla twee keer de spacebar om naar vlieg-mo"
"dus over te gaan en begin aan een duikvlucht voor geweldige visuele effecten. "
"Maar stop op dit punt nog niet, gebruik je verbeeldingsvermogen voor coole ide"
"eën en gebruik in Sonic Pi de kracht van het coderen om deze werkelijk te make"
"n. Wanneer je voldoende geoefend hebt, dim je de lichten en zet een VJ show vo"
"or je vrienden op!"

#: A.09-randomisation.md:1
msgid "A.9 Randomisation"
msgstr "A.9 Randomiseren"

#: A.09-randomisation.md:3
msgid "Surfing Random Streams"
msgstr "Surfen op  Random Streams"

#: A.09-randomisation.md:5
msgid ""
"Back in episode 4 of this tutorial series we took a brief look at randomisatio"
"n whilst coding up some sizzling synth riffs. Given that randomisation is such"
" an important part of my live coding DJ sets I thought it would be useful to c"
"over the fundamentals in much greater detail. So, get your lucky hat on and le"
"t's surf some random streams!"
msgstr ""
"In deel 4 van deze zelfstudie serie keken we even naar randomiseren terwijl we"
" een aantal broeierige synth-riffs codeerden. Daar randomiseren zo'n belangrij"
"k onderdeel van mijn live-coding DJ-sets is, dacht ik dat het zinvol was om de"
" grondbeginselen ervan in detail te gaan bekijken. Laat ons beginnen surfen op"
" Random Streams!"

#: A.09-randomisation.md:11
msgid "There is no random"
msgstr "Er is geen random"

#: A.09-randomisation.md:13
msgid ""
"The first thing to learn which might really surprise you when playing with Son"
"ic Pi's randomisation functions is that they're not actually really random. Wh"
"at does this actually mean? Well, let's try a couple of tests. First, imagine "
"a number in your head between 0 and 1. Keep it there and don't tell me. Now le"
"t me guess... was it `0.321567`? No? Bah, I'm clearly no good at this. Let me "
"have another go, but let's ask Sonic Pi to choose a number this time. Fire up "
"Sonic Pi v2.7+ and ask it for a random number but again don't tell me:"
msgstr ""
"Het eerste wat je moet weten, en wat jou misschien ook verrast, wanneer je met"
" de randomisering functies van Sonic Pi speelt, is dat deze niet écht random z"
"ijn. Wat betekent dit? Wel laat ons een paar tests doen. Verbeeld je eerst een"
" getal tussen 0 en1. Onthou deze en verklap deze niet aan mij. Nu laat me rade"
"n... was het `0.321567`? Nee? Goh ik ben er blijkbaar toch niet zo goed in. Ge"
"ef me nog een kans maar vraag deze keer Sonic Pi een nummer te kiezen. Start S"
"onic Pi v2.7+ en vraag deze een random nummer te genereren, maar ook nu verkla"
"p je deze niet aan mij:"

#: A.09-randomisation.md:22
#, no-wrap
msgid "print rand"
msgstr "print rand"

#: A.09-randomisation.md:26
msgid ""
"Now for the reveal... was it `0.75006103515625`? Yes! Ha, I can see you're a l"
"ittle sceptical. Perhaps it was just a lucky guess. Let's try again. Press the"
" Run button again and see what we get... What? `0.75006103515625` again? This "
"clearly can't be random! You're right, it's not."
msgstr ""
"En dan nu de onthulling... was het `0.75006103515625`? Yes! Ha maar ik merk da"
"t je hier een beetje sceptisch tegenover staat. Misschien was het wel een gelu"
"kstreffer. We proberen nog een keer. Druk opnieuw op Afspelen en we zien wel w"
"at we krijgen... Wat? Opnieuw  `0.75006103515625`? Dit kan duidelijk geen rand"
"om zijn! Je hebt gelijk, het is ook geen random."

#: A.09-randomisation.md:32
msgid ""
"What's going on here? The fancy computer science word here is determinism. Thi"
"s just means that nothing is by chance and everything is destined to be. Your "
"version of Sonic Pi is destined to always return `0.75006103515625` in the pro"
"gram above. This might sound pretty useless, but let me assure you that it's o"
"ne of the most powerful parts of Sonic Pi. If you stick at it you'll learn how"
" to rely on the deterministic nature of Sonic Pi's randomisation as a fundamen"
"tal building block for your compositions and live coded DJ sets."
msgstr ""
"Wat gebeurt hier? Determinisme is de dure computerwetenschappelijke term die h"
"ier kan  opgaan.Het betekent gewoon dat het toeval niet bestaat en alles voorb"
"estemd is om te worden. Uw versie van Sonic Pi is voorbestemd om altijd  `0.75"
"006103515625` terug te geven. Dit klink misschien helemaal niet nuttig, maar i"
"k verzeker je dat dit één van de meest krachtige delen van Sonic Pi is. Als je"
" hier aan vasthoud zal je leren vertrouwen te schenken aan de deterministische"
" manier van randomisering in Sonic Pi als fundamentele bouwsteen voor jouw com"
"posities en live gecodeerde DJ sets."

#: A.09-randomisation.md:41
msgid "A Random Melody"
msgstr "Een Random Melodie"

#: A.09-randomisation.md:43
msgid ""
"When Sonic Pi boots it actually loads into memory a sequence of 441,000 pre-ge"
"nerated random values. When you call a random function such as `rand` or `rran"
"d`, this random stream is used to generate your result. Each call to a random "
"function consumes a value from this stream. Therefore the 10th call to a rando"
"m function will use the 10th value from the stream. Also, every time you press"
" the Run button, the stream is reset for that run. This is why I could predict"
" the result to `rand` and why the 'random' melody was the same every time. Eve"
"rybody's version of Sonic Pi uses the exact same random stream which is very i"
"mportant when we start sharing our pieces with each other."
msgstr ""
"Wanneer Sonic Pi opstart, laad het eigenlijk een opeenvolging van 441.000 pre-"
"geregenereerde waarden in het geheugen op. Wanneer je een random functie zoals"
" `rand` of `rrand` oproept, wordt deze stroom van random waarden gebruikt om j"
"ouw resultaat te regenereren. Elke oproep naar een random functie verbruikt ee"
"n waarde van deze stroom. Daarom zal de 10-de oproep naar zo'n random functie,"
" de 10-de waarde van de stroom gebruiken. Iedere keer je op de Afspelen toets "
"drukt zal de stroom voor die doorloop gereset worden. Daarom ook kon ik het re"
"sultaat van `rand` voorspellen en was de 'random' melodie ook elke keer dezelf"
"de. Ieders versie van Sonic Pi gebruikt dezelfde random stream, wat ook belang"
"rijk is als we elkaars code onderling gaan delen."

#: A.09-randomisation.md:54
msgid "Let's use this knowledge to generate a repeatable random melody:"
msgstr ""
"Laten we deze kennis te gebruiken om een herhalende willekeurige melodie te ge"
"nereren:"

#: A.09-randomisation.md:56
#, no-wrap
msgid ""
"8.times do\n"
" play rrand_i(50, 95)\n"
" sleep 0.125\n"
"end"
msgstr ""
"8.times do\n"
" play rrand_i(50, 95)\n"
" sleep 0.125\n"
"end"

#: A.09-randomisation.md:63
msgid ""
"Type this into a spare buffer and hit Run. You'll hear a melody consisting of "
"'random' notes between 50 and 95. When it's finished, hit Run again to hear ex"
"actly the same melody again."
msgstr ""
"Typ deze in een lege buffer en klik Afspelen? Je hoort een melodie die bestaat"
" uit 'random' noten tussen 50 en 95. Wanneer deze uitgespeeld is, klik je opni"
"euw op Afspelen opnieuw om exact dezelfde melodie te hoeren spelen."

#: A.09-randomisation.md:67
msgid "Handy Randomisation Functions"
msgstr "Handige randomisering Functies"

#: A.09-randomisation.md:69
msgid ""
"Sonic Pi comes with a number of useful functions for working with the random s"
"tream. Here's a list of some of the most useful:"
msgstr ""
"Sonic Pi wordt geleverd met een aantal handige functies voor het werken met de"
" random stream. Hier is een lijst met enkele van de meest nuttige:"

#: A.09-randomisation.md:72
msgid "`rand` - Simply returns the next value in the random stream"
msgstr "`rand` - geeft gewoon de volgende waarde van de stream weer"

#: A.09-randomisation.md:73
msgid "`rrand` - Returns a random value within a range"
msgstr "`rrand` - geeft een random waarde binnen een bereik weer"

#: A.09-randomisation.md:74
msgid "`rrand_i` - Returns a random whole number within a range"
msgstr "`rrand_i` - Geeft een random geheel getal binnen een bereik weer"

#: A.09-randomisation.md:75
msgid "`one_in` - Returns true or false with the given probability"
msgstr "`one_in` - Geeft true of false weer met de gegeven probabiliteit"

#: A.09-randomisation.md:76
msgid "`dice` - Imitates rolling a dice and returns a value between 1 and 6"
msgstr ""
"`dice` - Immiteerd het rollen van een dobbelsteen en geeft waarden tussen 1 en"
" 6 weer"

#: A.09-randomisation.md:77
msgid "`choose` - Chooses a random value from a list"
msgstr "`choose` - Kiest een willekeurige waarde uit een lijst"

#: A.09-randomisation.md:79
msgid ""
"Check out their documentation in the Help system for detailed information and "
"examples."
msgstr ""
"Bekijk hun documentatie in het Help-systeem voor meer informatie en voorbeelde"
"n."

#: A.09-randomisation.md:82
msgid "Resetting the Stream"
msgstr "Resetten van de Stream"

#: A.09-randomisation.md:84
msgid ""
"Whilst the ability to repeat a sequence of chosen notes is essential to allow "
"you to replay a riff on the dance floor, it might not be exactly the riff you "
"want. Wouldn't it be great if we could try a number of different riffs and cho"
"ose the one we liked best? This is where the real magic starts."
msgstr ""
"Terwijl de mogelijkheid om het  herhalen van een fragment met gekozen noten es"
"sentieel is om jouw riff te kunnen spelen op de dansvloer, is het misschien ni"
"et de riff die je wou. Zou het niet geweldig zijn moesten we een aantal versch"
"illende riffs kunnen uitproberen om dan de beste ervan te kunnen uitkiezen? Hi"
"er gaat de toverdoos open."

#: A.09-randomisation.md:90
msgid ""
"We can manually set the stream with the fn `use_random_seed`. In Computer Scie"
"nce, a random seed is the starting point from which a new stream of random val"
"ues can sprout out and blossom. Let's try it:"
msgstr ""
"We kunnen de stream met de fn 'use_random_seed' handmatig instellen. In Comput"
"erwetenschap, is random seed een startpunt waaruit een nieuwe stream van rando"
"m waarden kunnen beginnen kiemen en bloeien. We proberen dit:"

#: A.09-randomisation.md:94
#, no-wrap
msgid ""
"use_random_seed 0\n"
"3.times do\n"
"  play rrand_i(50, 95)\n"
"  sleep 0.125\n"
"end"
msgstr ""
"use_random_seed 0\n"
"3.times do\n"
"  play rrand_i(50, 95)\n"
"  sleep 0.125\n"
"end"

#: A.09-randomisation.md:102
msgid ""
"Great, we get the first three notes of our random melody above: `84`, `83` and"
" `71`. However, we can now change the seed to something else. How about this:"
msgstr ""
"Geweldig, we krijgen de eerste drie noten van onze random melodie hierboven: '"
"84', '83' en ' 71'. We kunnen de seed naar ierts anders veranderen. Laat ons z"
"eggen deze:"

#: A.09-randomisation.md:106
#, no-wrap
msgid ""
"use_random_seed 1\n"
"3.times do\n"
"  play rrand_i(50, 95)\n"
"  sleep 0.125\n"
"end"
msgstr ""
"use_random_seed 1\n"
"3.times do\n"
"  play rrand_i(50, 95)\n"
"  sleep 0.125\n"
"end"

#: A.09-randomisation.md:114
msgid ""
"Interesting, we get `83`, `71` and `61` . You might notice that the first two "
"numbers here are the same as the last two numbers before - this isn't a coinci"
"dence."
msgstr ""
"Interessant, we  krijgen '83', '71' en ' 61'. Je merkt hierbij misschien ook o"
"p dat de eerste twee cijfers hier, dezelfde zijn als de laatste twee in het vo"
"rige voorbeeld - dit is geen toeval."

#: A.09-randomisation.md:118
msgid ""
"Remember that the random stream is just a giant list of 'pre-rolled' values. U"
"sing a random seed simply jumps us to a point in that list. Another way of thi"
"nking about it is to imagine a huge deck of pre-shuffled cards. Using a random"
" seed is cutting the deck at a particular point. The fabulous part of this is "
"that it's precisely this ability to jump around the random stream which gives "
"us huge power when making music."
msgstr ""
"Vergeer niet dat de random stream gewoon een gigantisch lijst is van vooraf op"
" een rol gezette waarden is. Random seed gebruiken is gewoon een verspringen n"
"aar een plaats in de lijst. Een andere manier om ons dit voor te stellen is te"
" denken aan een gigantische deck van door elkaar geschudde speelkaarten. Gebru"
"ik maken van random seed is als het openklappen van deze deck op een nauwkeuri"
"g punt. Het fabuleuze gedeelte hier is dat precies de mogelijkheid om rond te "
"springen in de random stream, dit ons een krachtig instrument geeft wanneer we"
" muziek maken."

#: A.09-randomisation.md:126
msgid ""
"Let's revisit our random melody of 8 notes with this new stream resetting powe"
"r, but let's also throw in a live loop so we can experiment live whilst it's p"
"laying:"
msgstr ""
"Laten we onze random melodie van 8 noten nog eens opzoeken met de kracht van d"
"ie nieuwe stream resetting, maar laten we er ook een live loop in gooien zodat"
" we ermee kunnen experimenteren terwijl de code loopt:"

#: A.09-randomisation.md:130
#, no-wrap
msgid ""
"live_loop :random_riff do    \n"
"  use_random_seed 0\n"
"  8.times do\n"
"    play rrand_i(50, 95), release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"live_loop :random_riff do    \n"
"  use_random_seed 0\n"
"  8.times do\n"
"    play rrand_i(50, 95), release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: A.09-randomisation.md:140
msgid ""
"Now, whilst it's still playing, change the seed value from `0` to something el"
"se. Try `100`, what about `999`. Try your own values, experiment and play arou"
"nd - see which seed generates the riff you like best."
msgstr ""
"Nu, terwijl deze nog speelt, verander je de seed waarde van `0`naar iets ander"
"s. Probeer `100`, en wat dacht je van `999`. Probeer ook je eigen waarden, exp"
"erimenteer en speel er wat mee - en kijk welke seed  de riff regenereerde die "
"jij het leukst vindt."

#: A.09-randomisation.md:147
msgid ""
"This month's tutorial has been quite a technical dive into the workings of Son"
"ic Pi's randomisation functionality. Hopefully it has given you some insight i"
"nto how it works and how you can start using randomisation in a reliable way t"
"o create repeatable patterns within your music. It's important to stress that "
"you can use repeatable randomisation *anywhere* you want. For example, you can"
" randomise the amplitude of notes, the timing of the rhythm, the amount of rev"
"erb, the current synth, the mix of an FX, etc. etc. In the future we'll take a"
" close look at some of these applications, but for now let me leave you with a"
" short example."
msgstr ""
"De tutorial van deze maand was een behoorlijk technische duik in hoe de functi"
"onaliteit van de randomisatie in Sonic Pi werkt.Hopelijk gaf het jou wat inzic"
"ht hoe dit in z'n werk  gaat en hoe je deze op een vertrouwde manier kan gaan "
"gebruiken om repeteerbare patronen in jouw muziekstukken te creëren. Het is be"
"langrijk je erop te wijzen dat je repeteerbare randomisatie *overal* je maar w"
"il kan gebruiken. Je kan bijvoorbeeld de amplitude van noten randomiseren, de "
"maat van het ritme, de hoeveelheid galm (reverb), de synth die je gebruikt, de"
" mix van de FX, enz. enz. In de toekomst gaan we uitgebreid kijken naar sommig"
"e van die toepassingen, maar momenteel geef jou nog even dit voorbeeld."

#: A.09-randomisation.md:157
msgid ""
"Type the following into a spare buffer, hit Run, and then start changing the s"
"eeds around, hit Run again (whilst it's still playing) and explore the differe"
"nt sounds, rhythms and melodies you can make. When you find a nice one, rememb"
"er the seed number so you can get back to it. Finally, when you've found a few"
" seeds you like, put on a live coded performance for your friends by simply sw"
"itching between your favourite seeds to create a full piece."
msgstr ""
"Typ het volgende in een lege buffer, toets Afspelen, en begin dan links en rec"
"hts de seeds te veranderen, duw opnieuw op Afspelen (terwijl het nog speelt) e"
"n onderzoek welke verschillende geluiden, ritmes en melodieën die je kan maken"
". Wanneer je iets lekkers gevonden hebt, probeer dan het seed getal te onthoud"
"en, zodat je die later opnieuw kan gebruiken. Als je tenslotte een aantal leuk"
"e seeds gevonden hebt, nu kan je voor je vrienden een live coded optreden geve"
"n door gewoon te switchen tussen jouw favoriete seeds om een compleet muziekst"
"uk te creëren."

#: A.09-randomisation.md:165
#, no-wrap
msgid ""
"live_loop :random_riff do\n"
"  use_random_seed 10300\n"
"  use_synth :prophet\n"
"  s = [0.125, 0.25, 0.5].choose\n"
"  8.times do\n"
"    r = [0.125, 0.25, 1, 2].choose\n"
"    n = (scale :e3, :minor).choose\n"
"    co = rrand(30, 100)\n"
"    play n, release: r, cutoff: co\n"
"    sleep s\n"
"  end\n"
"end\n"
"live_loop :drums do\n"
"  use_random_seed 2001\n"
"  16.times do\n"
"    r = rrand(0.5, 10)\n"
"    sample :drum_bass_hard, rate: r, amp: rand\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"live_loop :random_riff do\n"
"  use_random_seed 10300\n"
"  use_synth :prophet\n"
"  s = [0.125, 0.25, 0.5].choose\n"
"  8.times do\n"
"    r = [0.125, 0.25, 1, 2].choose\n"
"    n = (scale :e3, :minor).choose\n"
"    co = rrand(30, 100)\n"
"    play n, release: r, cutoff: co\n"
"    sleep s\n"
"  end\n"
"end\n"
"live_loop :drums do\n"
"  use_random_seed 2001\n"
"  16.times do\n"
"    r = rrand(0.5, 10)\n"
"    sample :drum_bass_hard, rate: r, amp: rand\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: A.10-controlling-your-sound.md:1
msgid "A.10 Control"
msgstr "A.10 Control"

#: A.10-controlling-your-sound.md:3
msgid "Controlling Your Sound"
msgstr "Jouw Geluid Controllen"

#: A.10-controlling-your-sound.md:5
msgid ""
"So far during this series we've focussed on triggering sounds. We've discovere"
"d that we can trigger the many synths built into Sonic Pi with `play` or `synt"
"h` and how to trigger pre-recorded samples with `sample`. We've also looked at"
" how we can wrap these triggered sounds within studio FX such as reverb and di"
"stortion using the `with_fx` command. Combine this with Sonic Pi's incredibly "
"accurate timing system and you can produce a vast array of sounds, beats and r"
"iffs. However, once you've carefully selected a particular sound's options and"
" triggered it, there's no ability to mess with it whilst it's playing right? W"
"rong! Today you're going to learn something very powerful - how to control run"
"ning synths."
msgstr ""
"Tot zover hebben we in deze serie de focus gelegd op het triggeren van geluide"
"n. We hebben geleerd dat we de, in Sonic Pi, ingebouwde synth's met `play` of "
"`synth` kunnen triggeren en vooraf opgenomen samples triggeren met `sample`. W"
"e hebben ook geleerd hoe we deze getriggerde klanken in een studio FX kunnen s"
"teken door middel van het `with_fx` commando. Combineer deze met het ongelofel"
"ijk nauwkeurige timing systeem van Sonic Pi en je kan een breed scala klanken,"
"beats en riff's produceren. Maar zodra je een zorgvuldig geselecteerde klank o"
"pties hebt uitgekozen en deze hebt getriggerd, is er geen mogelijkheid om deze"
" klank te veranderen terwijl deze speelt, juist? Neen hoor! Vandaag gaan we ie"
"ts machtig leren, hoe een lopende synth controllen."

#: A.10-controlling-your-sound.md:17
msgid "A Basic Sound"
msgstr "Een Basis Klank"

#: A.10-controlling-your-sound.md:19
msgid ""
"Let's create a nice simple sound. Fire up Sonic Pi and in a fresh buffer type "
"the following:"
msgstr ""
"Laat ons even een leuke eenvoudige klank maken. Start Sonic Pi en typ in een n"
"ieuwe buffer het volgende:"

#: A.10-controlling-your-sound.md:22
#, no-wrap
msgid "synth :prophet, note: :e1, release: 8, cutoff: 100"
msgstr "synth :prophet, note: :e1, release: 8, cutoff: 100"

#: A.10-controlling-your-sound.md:26
msgid ""
"Now press the Run button at the top left to hear a lovely rumbling synth sound"
". Go ahead, press it again a few times to get a feel for it. OK, done? Let's s"
"tart controlling it!"
msgstr ""
"Druk nu op de Afspeel-knop bovenaan links om dan een een mooie rommelend synth"
"-geluid te mogen horen. Doe dit nog maar een paar keer om het in de vingers te"
" krijgen en druk op Afspelen. Ok, klaar? Nu beginnen we het te controllen!"

#: A.10-controlling-your-sound.md:30
msgid "Synth Nodes"
msgstr "Synth Nodes"

#: A.10-controlling-your-sound.md:32
msgid ""
"A little known feature in Sonic Pi is that the fns `play`, `synth` and `sample"
"`, return something called a `SynthNode` which represents a running sound. You"
" can capture one of these `SynthNode`s using a standard variable and then **co"
"ntrol** it at a later point in time. For example, let's change the value of th"
"e `cutoff:` opt after 1 beat:"
msgstr ""
"Een weinig bekende functie in Sonic Pi is dat de fns `play`, `synth` en `sampl"
"e`, een zogenaamde `SynthNode` opgeven, die een lopende klank vertegenwoordigd"
". Je kan zo'n `SynthNode` vastleggen door een standaard variabele te gebruiken"
" en deze later te gaan **controllen**. We kunnen bijvoorbeeld de waarde van de"
" `cutoff:` opt na 1 tel veranderen:"

#: A.10-controlling-your-sound.md:38
#, no-wrap
msgid ""
"sn = synth :prophet, note: :e1, release: 8, cutoff: 100\n"
"sleep 1\n"
"control sn, cutoff: 130"
msgstr ""
"sn = synth :prophet, note: :e1, release: 8, cutoff: 100\n"
"sleep 1\n"
"control sn, cutoff: 130"

#: A.10-controlling-your-sound.md:44
msgid "Let's look at each line in turn:"
msgstr "Laten we de verschillende regels op zijn beurt even bekijken:"

#: A.10-controlling-your-sound.md:46
msgid ""
"Firstly we trigger the `:prophet` synth using the `synth` fn as normal. Howeve"
"r we also capture the result in a variable called `sn`. We could have called t"
"his variable something completely different such as `synth_node` or `jane` - t"
"he name doesn't matter. However, it's important to choose a name that's meanin"
"gful to you for your performances and for people reading your code. I chose `s"
"n` as it's a nice short mnemonic for synth node."
msgstr ""
"Ten eerste triggeren we de `:prophet` synth door de `synth` fn zoals gewoonlij"
"k te gebruiken. We spelen het resultaat aan een variabele door genaamd `sn`. W"
"e zouden deze variabele ook een totaal andere naam hebben kunnen geven zoals `"
"synth_node` of `kevin` , de naam speelt geen rol. Het is wel belangrijk dat de"
"ze voor jou een betekenis heeft als je een performance geeft en voor de mensen"
" die jouw code lezen. Ik koos nu voor `sn` omdat dit een mooi geheugensteuntje"
" is naar synth node."

#: A.10-controlling-your-sound.md:54
msgid ""
"On line 2 we have a standard `sleep` command. This does nothing special - it j"
"ust asks the computer to wait for 1 beat before moving onto the next line."
msgstr ""
"Op regel 2 hebben we het standaard `sleep` commando. Het doet niks bijzonders,"
" het vraagt de computer enkel om één tel te wachten alvorens verder te gaan na"
"ar de volgende regel."

#: A.10-controlling-your-sound.md:58
msgid ""
"Line 3 is where the control fun starts. Here, we use the `control` fn to tell "
"our running `SynthNode` to change the cutoff value to `130`. If you hit the **"
"Run** button, you'll hear the `:prophet` synth start playing as before, but af"
"ter 1 beat it will shift to sound a lot brighter."
msgstr ""
"Op regel 3 begint de pret met control. Hier gebruiken we de `control` fn, om o"
"nze lopende `synth_node` te vertellen, de cutoff waarde naar `130` te verander"
"en. Als je **Afspelen** klikt, hoor je de`:prophet` synth zoals daarvoor, maar"
" na 1 tel zal deze verschuiven naar een meer heldere klank ."

#: A.10-controlling-your-sound.md:63
msgid "Modulatable Options"
msgstr "Moduleerbare Opties"

#: A.10-controlling-your-sound.md:65
msgid ""
"Most of Sonic Pi's synths and FX opts may be changed after being triggered. Ho"
"wever, this isn't the case for all of them. For example, the envelope opts `at"
"tack:`, `decay:`, `sustain:` and `release:` can only be set when triggering th"
"e synth. Figuring out which opts can and can't be changed is simple - just hea"
"d to the documentation for a given synth or FX and then scroll down to the ind"
"ividual option documentation and look for the phrases \"May be changed whilst p"
"laying\" or \"Can not be changed once set\". For example, the documentation for t"
"he `:beep` synth's `attack:` opt makes it clear that it's not possible to chan"
"ge it:"
msgstr ""
"De meeste van Sonic Pi's synths en FX opts kunnen veranderd worden nadat ze ge"
"triggerd zijn. Dit is echter niet voor allen het geval. Bijvoorbeeld, de envel"
"op opts  `attack:`, `decay:`, `sustain:` and `release:` kunnen alleen ingestel"
"t worden bij bij het triggeren van de synth. Uitzoeken welke opts wel en welke"
" niet kunnen veranderd worden is heel makkelijk, ga gewoon naar de documentati"
"e voor de gegeven synth of FX en scroll naar beneden naar de afzonderlijke bes"
"chrijving van de opties.In de onderste regel vind je dan “Kan veranderd worden"
" tijdens het afspelen” of “Kan niet veranderd worden eens ingesteld”. De docum"
"entatie voor de `:beep` synth maakt duidelijk dat het niet mogelijk is de `att"
"ack:` opt te veranderen eens ingesteld:"

#: A.10-controlling-your-sound.md:76
msgid "Default: 0"
msgstr "Standaard instelling: 0"

#: A.10-controlling-your-sound.md:77
msgid "Must be zero or greater"
msgstr "Moet nul of groter dan nul zijn"

#: A.10-controlling-your-sound.md:78
msgid "Can not be changed once set"
msgstr "Kan niet worden aangepast eens ingesteld"

#: A.10-controlling-your-sound.md:79
msgid "Scaled with current BPM value"
msgstr "Geschaald met huidige BPM waarde"

#: A.10-controlling-your-sound.md:81
msgid "Multiple Changes"
msgstr "Meerdere veranderingen"

#: A.10-controlling-your-sound.md:83
msgid ""
"Whilst a synth is running you're not limited to changing it only once - you're"
" free to change it as many times as you like. For example, we can turn our `:p"
"rophet` into a mini arpeggiator with the following:"
msgstr ""
"Als een synth eenmaal loopt ben je niet beperkt tot slechts 1 verandering - je"
" kunt veranderingen blijven doen zoveel je wilt. bijvoorbeeld, we kunnen onze "
"':prophet' veranderen in een generator van een reeks accoordtonen (dat is een "
"arpeggio, arpeggio generator =arpeggiator) door het volgende te doen:"

#: A.10-controlling-your-sound.md:87
#, no-wrap
msgid ""
"notes = (scale :e3, :minor_pentatonic)\n"
"sn = synth :prophet, note: :e1, release: 8, cutoff: 100\n"
"sleep 1\n"
"16.times do\n"
"  control sn, note: notes.tick\n"
"  sleep 0.125\n"
"end"
msgstr ""
"notes = (scale :e3, :minor_pentatonic)\n"
"sn = synth :prophet, note: :e1, release: 8, cutoff: 100\n"
"sleep 1\n"
"16.times do\n"
"  control sn, note: notes.tick\n"
"  sleep 0.125\n"
"end"

#: A.10-controlling-your-sound.md:97
msgid ""
"In this snippet of code we just added a couple of extra things. First we defin"
"ed a new variable called `notes` which contains the notes we'd like to cycle t"
"hrough (an arpeggiator is just a fancy name for something that cycles through "
"a list of notes in order). Secondly we replaced our single call to `control` w"
"ith an iteration calling it 16 times. In each call to `control` we `.tick` thr"
"ough our ring of `notes` which will automatically repeat once we get to the en"
"d (thanks to the fabulous power of Sonic Pi's rings). For a bit of variety try"
" replacing `.tick` with `.choose` and see if you can hear the difference."
msgstr ""
"In dit stukje code kunnen we een aantal extra zaken toevoegen. Ten eerste hebb"
"en we een nieuwe variabele, genaamd `notes`, gedefinieerd, die de noten bevat "
"die we graag willen doorlopen (een arpeggiator is gewoon een chique naam voor "
"datgene waarin een lijst van noten in een volgorde wordt doorlopen) Ten tweede"
" hebben we onze éénmalige oproep naar `control`, vervangen door een iteratie o"
"m deze 16 keer aan te roepen. In elke oproep naar `control`, hebben we een `:t"
"ick` -en we door onze ring van `notes`, die automatisch herhaald worden eens w"
"e aan het einde ervan gekomen zijn (dankzij de sublieme kracht van Sonic Pi's "
"rings) Voor wat variatie probeer je `.tick` door `.choose` te vervangen, en be"
"kijk of je hier een verschil kan horen."

#: A.10-controlling-your-sound.md:107
msgid ""
"Note that we can change multiple opts simultaneously. Try changing the control"
" line to the following and listen for the difference:"
msgstr ""
"Merk op dat we meerdere opts tegelijk kunnen veranderen. Probeer de control re"
"gel naar het volgende te wijzigen en hoor nu het verschil:"

#: A.10-controlling-your-sound.md:110
#, no-wrap
msgid "control sn, note: notes.tick, cutoff: rrand(70, 130)"
msgstr "control sn, note: notes.tick, cutoff: rrand(70, 130)"

#: A.10-controlling-your-sound.md:114
msgid "Sliding"
msgstr "Sliden"

#: A.10-controlling-your-sound.md:116
msgid ""
"When we control a `SynthNode`, it responds exactly on time and instantly chang"
"es the value of the opt to the new one as if you'd pressed a button or flicked"
" a switch requesting the change. This can sound rhythmical and percussive - es"
"pecially if the opt controls an aspect of the timbre such as `cutoff:`. Howeve"
"r, sometimes you don't want the change to happen instantaneously. Instead, you"
" might want to smoothly move from the current value to the new one as if you'd"
" moved a slider or dial. Of course, Sonic Pi can also do this too using the `_"
"slide:` opts."
msgstr ""
"Wanneer we een `SynthNode` controllen, reageert die precies op tijd vanuit de "
"waarde van de opt naar de nieuwe waarde, alsof je een knop indrukte, of een sc"
"hakelaar aanzette om de verandering aan te brengen. Dit kan ritmisch en percus"
"sief klinken, zeker als de opt een aspect van de klankkleur bepaalt zoals de `"
"cutoff:`. Maar soms wil je helemaal niet dat de verandering in een knip gebeur"
"d, maar dat deze langzaam aan overgaat van de huidige waarde naar de nieuwe wa"
"arde, alsof je langzaam een schuifregelaar bewoog. Natuurlijk kan Sonic Pi dit"
" ook, door gebruik te maken van de  `_slide:` opts."

#: A.10-controlling-your-sound.md:125
msgid ""
"Each opt that can be modified also has a special corresponding `_slide:` opt t"
"hat allows you to specify a slide time. For example, `amp:` has `amp_slide:` a"
"nd `cutoff:` has `cutoff_slide:`. These slide opts work slightly differently t"
"han all the other opts in that they tell the synth note how to behave **next t"
"ime they are controlled**. Let's take a look:"
msgstr ""
"Elke opt die gewijzigd kan worden heeft een overeenkomstige `_slide:` opt  waa"
"rmee je de slide tijd mee kan instellen. Bijvoorbeeld, `amp:` heeft `amp_slide"
":` en `cutoff:` heeft `cutoff_slide:`. Deze slide opts werken een beetje ander"
"s dan de andere opts, doordat zij de synth noot opdraagt, hoe deze zich moeten"
" gaan gedragen **de volgende keer dat ze gecontrold wordt**. Laten we hier eve"
"n naar kijken:"

#: A.10-controlling-your-sound.md:131
#, no-wrap
msgid ""
"sn = synth :prophet, note: :e1, release: 8, cutoff: 70, cutoff_slide: 2\n"
"sleep 1\n"
"control sn, cutoff: 130"
msgstr ""
"sn = synth :prophet, note: :e1, release: 8, cutoff: 70, cutoff_slide: 2\n"
"sleep 1\n"
"control sn, cutoff: 130"

#: A.10-controlling-your-sound.md:137
msgid ""
"Notice how this example is exactly the same as before except with the addition"
" of `cutoff_slide:`. This is saying that next time this synth has its `cutoff:"
"` opt controlled, it will take 2 beats to slide from the current value to the "
"new one. Therefore, when we use `control` you can hear the cutoff slide from 7"
"0 to 130. It creates an interesting dynamic feel to the sound. Now, try changi"
"ng the `cutoff_slide:` time to a shorter value such as 0.5 or a longer value s"
"uch as 4 to see how it changes the sound. Remember, you can slide any of the m"
"odifiable opts in exactly this way and each `_slide:` value can be totally dif"
"ferent so you can have the cutoff sliding slowly, the amp sliding fast and the"
" pan sliding somewhere in between if that's what you're looking to create..."
msgstr ""
"Merk hierbij op dat we hetzelfde voorbeeld genomen hebben, maar hier hebben we"
" `cutoff_slide:` toegevoegd. Dit betekent dat de volgende keer; de `cutoff:` o"
"pt wordt gecontrolt. Het neemt 2 beats (tellen) in beslag om te sliden vanuit "
"de huidige waarde naar de nieuwe waarde. Daardoor hoor je, wanneer we `control"
"` gebruiken, de cutoff sliden van 70 naar 130. Het creëert een interessante dy"
"namiek in het geluid. Probeer nu de `cutoff_slide:` tiid  te veranderen naar e"
"en kortere waarde zoals 0.5 en door een langere waarde zoals 4 om te zien hoe "
"dit de klank verandert. Denk eraan, je kan elke modificeerbare opt op deze man"
"ier sliden, en elke `_slide:` waarde mag helemaal anders zijn. Zo kan de cutof"
"f langzaam sliden, de amp snel sliden en de pan daar ergens tussenin sliden, z"
"oals jij dit wil …"

#: A.10-controlling-your-sound.md:151
msgid ""
"Let's look at a short example which demonstrates the power of controlling synt"
"hs after they've been triggered. Notice that you can also slide FX just like s"
"ynths although with a slightly different syntax. Check out section 7.2 of the "
"built-in tutorial for more information on controlling FX."
msgstr ""
"Laat ons naar een korter voorbeeld kijken dat ons de kracht toont van het cont"
"rollen van synths nadat ze getriggerd zijn. Merk hierbij op dat ook FX zoals s"
"ynths kan sliden maar met een iets andere syntax. Bekijk hoofdstuk 7.2 van de "
"ingebouwde handleiding voor meer informatie omtrent het controllen van FX ."

#: A.10-controlling-your-sound.md:157
msgid ""
"Copy the code into a spare buffer and take a listen. Don't stop there though -"
" play around with the code. Change the slide times, change the notes, the synt"
"h, the FX and the sleep times and see if you can turn it into something comple"
"tely different!"
msgstr ""
"Kopieer de code naar een overgebleven buffer en luister hier naar. Stop niet e"
"n speel een beetje met de code. Verander de slide tijd, verander de noten, de "
"synth, de rusttijd (sleep) en zorg dat je deze kan veranderen tot iets complee"
"t anders!"

#: A.10-controlling-your-sound.md:162
#, no-wrap
msgid ""
"live_loop :moon_rise do\n"
"  with_fx :echo, mix: 0, mix_slide: 8 do |fx|\n"
"    control fx, mix: 1\n"
"    notes = (scale :e3, :minor_pentatonic, num_octaves: 2).shuffle\n"
"    sn = synth :prophet , sustain: 8, note: :e1, cutoff: 70, cutoff_slide: 8\n"
"    control sn, cutoff: 130\n"
"    sleep 2\n"
"    32.times do\n"
"      control sn, note: notes.tick, pan: rrand(-1, 1)\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"
msgstr ""
"live_loop :moon_rise do\n"
"  with_fx :echo, mix: 0, mix_slide: 8 do |fx|\n"
"    control fx, mix: 1\n"
"    notes = (scale :e3, :minor_pentatonic, num_octaves: 2).shuffle\n"
"    sn = synth :prophet , sustain: 8, note: :e1, cutoff: 70, cutoff_slide: 8\n"
"    control sn, cutoff: 130\n"
"    sleep 2\n"
"    32.times do\n"
"      control sn, note: notes.tick, pan: rrand(-1, 1)\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"

#: A.11-beat-tracking.md:1
msgid "A.11 Tick Tock"
msgstr "A.11 Tik Tok"

#: A.11-beat-tracking.md:3
msgid "Tracking the Beat"
msgstr "De maat houden"

#: A.11-beat-tracking.md:5
msgid ""
"Last month in this series we took a deep technical dive into the randomisation"
" system underpinning Sonic Pi. We explored how we can use it to deterministica"
"lly add new levels of dynamic control over our code. This month we're going to"
" continue our technical dive and turn our attention to Sonic Pi's unique tick "
"system. By the end of this article you'll be ticking your way through rhythms "
"and riffs on your way to being a live coding DJ."
msgstr ""
"Vorige maand hebben we in deze serie een diepe duik genomen in het randomiseer"
" systeem dat Sonic Pi ondersteund. We gingen na hoe we dit kunnen gebruiken om"
" op deterministische wijze, nieuwe lagen van dynamische controle op onze code,"
" uit te oefenen."

#: A.11-beat-tracking.md:13
msgid "Beat Counting"
msgstr "De beat tellen"

#: A.11-beat-tracking.md:15
msgid ""
"When making music we often want to do a different thing depending on which bea"
"t it is. Sonic Pi has a special beat counting system called `tick` to give you"
" precise control over when a beat actually occurs and even supports multiple b"
"eats with their own tempos."
msgstr ""
"Wanneer we muziek maken willen we soms dingen gaan doen die afhangen van het t"
"empo en de beat. Sonic Pi heeft een speciaal systeem dat de beat telt, genaamd"
"  `tick`, om je de precieze controle te geven  over wanneer een beat daadwerke"
"lijk optreedt en zelfs meerdere beats met hun eigen tempo ondersteunt."

#: A.11-beat-tracking.md:20
msgid ""
"Let's have a play - to advance the beat we just need to call `tick`. Open up a"
" fresh buffer, type in the following and hit Run:"
msgstr ""
"We spelen hier nu even mee, om de beats te laten toenemen hoeven we gewoon `ti"
"ck` aan te roepen. Open een lege buffer, typ het volgende en druk op Afspelen:"

#: A.11-beat-tracking.md:23
#, no-wrap
msgid "puts tick #=> 0"
msgstr "puts tick #=> 0"

#: A.11-beat-tracking.md:27
msgid ""
"This will return the current beat: `0`. Notice that even if you press the Run "
"button a few times it will always return `0`. This is because each run starts "
"a fresh beat counting from 0. However, whilst the run is still active, we can "
"advance the beat as many times as we want:"
msgstr ""
"Dit geeft je de huidige beat: `0`. Merk op dat zelfs wanneer je de Afspeel-kno"
"p herhaaldelijk indrukt, altijd `0` zal weergegeven worden. Dat komt omdat bij"
" elke afspeel-commando het tellen van de beat van 0 start. We kunnen echter wa"
"nneer het afspelen nog actief is, de beat omhoog laten gaan, zoveel maal we ze"
"lf willen:"

#: A.11-beat-tracking.md:32
#, no-wrap
msgid ""
"puts tick #=> 0\n"
"puts tick #=> 1\n"
"puts tick #=> 2"
msgstr ""
"puts tick #=> 0\n"
"puts tick #=> 1\n"
"puts tick #=> 2"

#: A.11-beat-tracking.md:38
msgid ""
"Whenever you see the symbol `#=>` at the end of a line of code it means that t"
"hat line will log the text on the right-hand-side. For example, `puts foo #=> "
"0` means the code `puts foo` prints `0` to the log at that point in the progra"
"m."
msgstr ""
"Telkens je het symbool `l#=>`  aan het einde van een regel code ziet, betekend"
" dit dat deze regel de tekst logt in het logvenster rechts. Bijvoorbeeld `puts"
" eenderwat #=> 0 betekent dat de code `puts eenderwat `0`zal uitprinten naar h"
"et log op het moment dat dit in het programma voorkomt."

#: A.11-beat-tracking.md:43
msgid "Checking the Beat"
msgstr "De beat nagaan"

#: A.11-beat-tracking.md:45
msgid ""
"We've seen that `tick` does two things. It increments (adds one) and returns t"
"he current beat. Sometimes we just want to look at the current beat without ha"
"ving to increment it which we can do via `look`:"
msgstr ""
"We hebben gezien dat `tick` twee dingen doet. Het verhoogt (voegt toe) en geef"
"t als resultaat de huidige beat. Soms willen we gewoon kijken naar de huidige "
"beat zonder deze te verhogen. Dat kunnen we doen met `look`:"

#: A.11-beat-tracking.md:49
#, no-wrap
msgid ""
"puts tick #=> 0\n"
"puts tick #=> 1\n"
"puts look #=> 1\n"
"puts look #=> 1"
msgstr ""
"puts tick #=> 0\n"
"puts tick #=> 1\n"
"puts look #=> 1\n"
"puts look #=> 1"

#: A.11-beat-tracking.md:56
msgid ""
"In this code we tick the beat up twice and then call `look` twice. We'll see t"
"he following values in the log: `0`, `1`, `1`, `1`. The first two `tick`s retu"
"rned `0`, then `1` as expected, then the two `look`s just returned the last be"
"at value twice which was `1`."
msgstr ""
"In deze code tick-en we de beat twee keer en roepen we `look` twee maal op. We"
" zien de volgende waarden het log verschijnen: `0`, `1`, `1`, `1`. De eerste t"
"wee `tick`s gaven `0`en `1` zoals verwacht weer. daarna gaven de twee `look`s "
"de laatste waarde van de beat weer, die `1`was."

#: A.11-beat-tracking.md:64
msgid ""
"So now we can advance the beat with `tick` and check the beat with `look`. Wha"
"t next? We need something to tick over. Sonic Pi uses rings for representing r"
"iffs, melodies and rhythms and the tick system has been specifically designed "
"to work very closely with them. In fact, rings have their own dot version of `"
"tick` which does two things. Firstly, it acts like a regular tick and incremen"
"ts the beat. Secondly it looks up the ring value using the beat as the index. "
"Let's take a look:"
msgstr ""
"Nu kunnen we dus de beat verhogen door middel van `tick`en deze nagaan door `l"
"ook`. Maar wat nu? We hebben nog iets nodig om te laten tick-en. Sonic Pi gebr"
"uikt ringen om riffs, melodieën en ritmes te vertegenwoordigen, en het tick sy"
"steem is speciaal ontwikkeld om nauw met hen samen te werken. In feite hebben "
"ringen hun eigen dot versie van `tick`,die  twee dingen doet. Ten eerste funct"
"ioneert deze als een gewone tick en verhoogt ook de beat.Ten tweede zoekt die "
"de waarde van de ring op waarbij de beat als index wordt gebruikt. Laten we hi"
"er even naar kijken:"

#: A.11-beat-tracking.md:72
#, no-wrap
msgid "puts (ring :a, :b, :c).tick #=> :a"
msgstr "puts (ring :a, :b, :c).tick #=> :a"

#: A.11-beat-tracking.md:76
msgid ""
"`.tick` is a special dot version of `tick` which will return the first value o"
"f the ring `:a`. We can grab each of the values in the ring by calling `.tick`"
" multiple times:"
msgstr ""
"`.tick` 'is een speciale dot versie van 'tik', die de eerste waarde van de rin"
"g geeft `:a`. We kunnen elke waarden in de ring oppikken door `.tick` meerdere"
" keren op te roepen:"

#: A.11-beat-tracking.md:80
#, no-wrap
msgid ""
"puts (ring :a, :b, :c).tick #=> :a\n"
"puts (ring :a, :b, :c).tick #=> :b\n"
"puts (ring :a, :b, :c).tick #=> :c\n"
"puts (ring :a, :b, :c).tick #=> :a\n"
"puts look                   #=> 3"
msgstr ""
"puts (ring :a, :b, :c).tick #=> :a\n"
"puts (ring :a, :b, :c).tick #=> :b\n"
"puts (ring :a, :b, :c).tick #=> :c\n"
"puts (ring :a, :b, :c).tick #=> :a\n"
"puts look                   #=> 3"

#: A.11-beat-tracking.md:88
msgid ""
"Take a look at the log and you'll see `:a`, `:b`, `:c` and then `:a` again. No"
"tice that `look` returns `3`. Calls to `.tick` act just like they are regular "
"calls to `tick` - they increment the local beat."
msgstr ""
"Neem nu een kijkje in het log en je zal `:a`, `:b`, `:c` zien en dan `:a` opni"
"euw. Merk op dat `look` `3` weergeeft. Een oproep naar `.tick` zal handelen al"
"s een gewone oproep naar `tick`, zij verhogen de beat hier."

#: A.11-beat-tracking.md:93
msgid "A Live Loop Arpeggiator"
msgstr "Een Live Loop Arpeggiator"

#: A.11-beat-tracking.md:95
msgid ""
"The real power comes when you mix `tick` with rings and `live_loop`s. When com"
"bined we have all the tools we need to both build and understand a simple arpe"
"giator. We need just four things:"
msgstr ""
"De sterke kant hiervan komt naar boven als je `tick` mixt met `ring` en `live_"
"loops`s. Wanneer zij gecombineerd worden, hebben we ons gereedschap om een een"
"voudige arpegiator te bouwen,en om deze te begrijpen. We hebben maar vier ding"
"en nodig:"

#: A.11-beat-tracking.md:99
msgid "A ring containing the notes we want to loop over."
msgstr "Een ring die de te doorlopen noten bevat."

#: A.11-beat-tracking.md:100
msgid "A means of incrementing and obtaining the beat."
msgstr "Een middel om de beat te verkrijgen en te verhogen."

#: A.11-beat-tracking.md:101
msgid "The ability to play a note based on the current beat."
msgstr "De mogelijkheid om een noot te spelen volgens de huidige beat."

#: A.11-beat-tracking.md:102
msgid "A loop structure to keep the arpegiator repeating."
msgstr "Een loop structuur waarin de arpegiator zich herhaalt."

#: A.11-beat-tracking.md:104
msgid "These concepts can all be found in the following code:"
msgstr "Deze concepten vind je in de volgende code terug:"

#: A.11-beat-tracking.md:106
#, no-wrap
msgid ""
"notes = (ring 57, 62, 55, 59, 64)\n"
"live_loop :arp do\n"
"  use_synth :dpulse\n"
"  play notes.tick, release: 0.2\n"
"  sleep 0.125\n"
"end"
msgstr ""
"notes = (ring 57, 62, 55, 59, 64)\n"
"live_loop :arp do\n"
"  use_synth :dpulse\n"
"  play notes.tick, release: 0.2\n"
"  sleep 0.125\n"
"end"

#: A.11-beat-tracking.md:116
msgid ""
"Let's look at each of these lines. First we define our ring of notes which we'"
"ll continually play. We then create a `live_loop` called `:arp` which loops ro"
"und for us. Each time round the `live_loop` we set our synth to `:dpulse` and "
"then play the next note in our ring using `.tick`. Remember that this will inc"
"rement our beat counter and use the latest beat value as an index into our not"
"es ring. Finally, we wait for an eighth of a beat before looping round again."
msgstr ""
"Laten we een kijkje nemen naar elke regels. Ten eerste definiëren we onze ring"
" noten, die we continue laten afspelen. Dan maken we onze `live_loop` die `arp"
"` heet, en die voor ons de loop doet. Elke cyclus van de `live_loop` stellen w"
"e onze synth in op `:dpulse´, om vervolgens de volgende noot in onze ring te s"
"pelen met behulp van `;tick`. Denk eraan dat dit onze beat-teller zal verhogen"
" en onze laatste beat waarde zal gaan gebruiken als index in onze noten ring. "
"Tenslotte, wachten we één achtste van een tel alvorens opnieuw te gaan  loop-e"
"n."

#: A.11-beat-tracking.md:124
msgid "Multiple Simultaneous Beats"
msgstr "Meerdere simultane beats"

#: A.11-beat-tracking.md:126
msgid ""
"A really important thing to know is that `tick`s are local to the `live_loop`."
" This means that each `live_loop` has its own independent beat counter. This i"
"s much more powerful than having a global metronome and beat. Let's take a loo"
"k at this in action:"
msgstr ""
"Belangrijk om weten is, is dat `tick` lokaal werkt tegenover `live_loop`. Dit "
"betekent dat elke `live_loop` z'n eigen individuele beat-teller heeft. Dit is "
"krachtiger dan het hebben van een globale metronoom en beat. Laten we dit in a"
"ctie zien:"

#: A.11-beat-tracking.md:131
#, no-wrap
msgid ""
"notes = (ring 57, 62, 55, 59, 64)\n"
"with_fx :reverb do\n"
"  live_loop :arp do\n"
"    use_synth :dpulse\n"
"    play notes.tick + 12, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
"live_loop :arp2 do\n"
"  use_synth :dsaw\n"
"  play notes.tick - 12, release: 0.2\n"
"  sleep 0.75\n"
"end"
msgstr ""
"notes = (ring 57, 62, 55, 59, 64)\n"
"with_fx :reverb do\n"
"  live_loop :arp do\n"
"    use_synth :dpulse\n"
"    play notes.tick + 12, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
"live_loop :arp2 do\n"
"  use_synth :dsaw\n"
"  play notes.tick - 12, release: 0.2\n"
"  sleep 0.75\n"
"end"

#: A.11-beat-tracking.md:149
msgid "Clashing Beats"
msgstr "Botsende Beats"

#: A.11-beat-tracking.md:151
msgid ""
"A big cause of confusion with Sonic Pi's tick system is when people want to ti"
"ck over multiple rings in the same `live_loop`:"
msgstr ""
"Een grote oorzaak van verwarring met het tick systeem van Sonic Pi is wanneer "
"men meerdere ringen willen tick-en in de zelfde `live_loop`:"

#: A.11-beat-tracking.md:154
#, no-wrap
msgid ""
"use_bpm 300\n"
"use_synth :blade\n"
"live_loop :foo do\n"
"  play (ring :e1, :e2, :e3).tick\n"
"  play (scale :e3, :minor_pentatonic).tick\n"
"  sleep 1\n"
"end"
msgstr ""
"use_bpm 300\n"
"use_synth :blade\n"
"live_loop :foo do\n"
"  play (ring :e1, :e2, :e3).tick\n"
"  play (scale :e3, :minor_pentatonic).tick\n"
"  sleep 1\n"
"end"

#: A.11-beat-tracking.md:164
msgid ""
"Even though each `live_loop` has its own independent beat counter, we're calli"
"ng `.tick` twice within the same `live_loop`. This means that the beat will be"
" incremented twice every time round. This can produce some interesting polyrhy"
"thms but is often not what you want. There are two solutions to this problem. "
"One option is to manually call `tick` at the start of the `live_loop` and then"
" use `.look` to look up the current beat in each `live_loop`. The second solut"
"ion is to pass a unique name to each call to `.tick` such as `.tick(:foo)`. So"
"nic Pi will then create and track a separate beat counter for each named tick "
"you use. That way you can work with as many beats as you need! See the section"
" on named ticks in 9.4 of the built-in tutorial for more information."
msgstr ""
"Hoewel elke 'live_loop' zijn eigen onafhankelijke beat teller heeft, roepen we"
" `.tick` twee keer op binnen dezelfde `live_loop`.  Dit betekent dat de beat t"
"wee keer wordt verhoogd bij elke cyclus die doorlopen wordt. Op die manier kun"
"nen interessante poly-ritmes ontstaan, maar dikwijls wil je dit ook helemaal n"
"iet. Je kan dit op twee manieren oplossen. De ene oplossing is een manuele opr"
"oep naar `tick` aan de start van de `live_loop` om dan `.look` te gebruiken om"
" de huidige beat in in elk van de `live_loop`'s op te zoeken. De tweede oploss"
"ing is elke  `.tick` een unieke naam te geven zoals bvb `.tick(:naam1)`. Sonic"
" Pi zal dan een aparte beat-teller maken en gebruiken voor elke, door jou beno"
"emde `.tick`. Hiermee kan je zoveel verschillende beats werken als je maar wil"
"! Zie sectie 9.4 over benoemde tick's in de ingebouwde handleiding voor meer i"
"nformatie."

#: A.11-beat-tracking.md:178
msgid ""
"Let's bring all this knowledge of `tick`s, `ring`s and `live_loop`s together f"
"or a final fun example. As usual, don't treat this as a finished piece. Start "
"changing things and play around with it and see what you can turn it into. See"
" you next time..."
msgstr ""
"Laat ons de opgestoken kennis over  `tick`s, `ring`s en `live_loop`s samenvoeg"
"en in een leuk voorbeeld. En ook deze keer mag je dit voorbeeld ook niet als e"
"en afgewerkt stuk zien. Verander hier en daar de waarden, en ontdek zo wat je "
"er kan uitkrijgen. Tot volgende keer…"

#: A.11-beat-tracking.md:183
#, no-wrap
msgid ""
"use_bpm 240\n"
"notes = (scale :e3, :minor_pentatonic).shuffle\n"
"live_loop :foo do\n"
"  use_synth :blade\n"
"  with_fx :reverb, reps: 8, room: 1 do\n"
"    tick\n"
"    co = (line 70, 130, steps: 32).tick(:cutoff)\n"
"    play (octs :e3, 3).look, cutoff: co, amp: 2\n"
"    play notes.look, amp: 4\n"
"    sleep 1\n"
"  end\n"
"end\n"
"live_loop :bar do\n"
"  tick\n"
"  sample :bd_ada if (spread 1, 4).look\n"
"  use_synth :tb303\n"
"  co = (line 70, 130, steps: 16).look\n"
"  r = (line 0.1, 0.5, steps: 64).mirror.look\n"
"  play notes.look, release: r, cutoff: co\n"
"  sleep 0.5\n"
"end"
msgstr ""
"use_bpm 240\n"
"notes = (scale :e3, :minor_pentatonic).shuffle\n"
"live_loop :foo do\n"
"  use_synth :blade\n"
"  with_fx :reverb, reps: 8, room: 1 do\n"
"    tick\n"
"    co = (line 70, 130, steps: 32).tick(:cutoff)\n"
"    play (octs :e3, 3).look, cutoff: co, amp: 2\n"
"    play notes.look, amp: 4\n"
"    sleep 1\n"
"  end\n"
"end\n"
"live_loop :bar do\n"
"  tick\n"
"  sample :bd_ada if (spread 1, 4).look\n"
"  use_synth :tb303\n"
"  co = (line 70, 130, steps: 16).look\n"
"  r = (line 0.1, 0.5, steps: 64).mirror.look\n"
"  play notes.look, release: r, cutoff: co\n"
"  sleep 0.5\n"
"end"

#: A.12-sample-slicing.md:1
msgid "A.12 Sample Slicing"
msgstr "A.12 Sample Snijden"

#: A.12-sample-slicing.md:3
msgid "Sample Slicing"
msgstr "Het snijden van een sample"

#: A.12-sample-slicing.md:5
msgid ""
"Way back in episode 3 of this Sonic Pi series we looked at how to loop, stretc"
"h and filter one of the most famous drum breaks of all time - the Amen Break. "
"In this tutorial we're going to take this one step further and learn how to sl"
"ice it up, shuffle the slices and glue it back together in a completely new or"
"der. If that sounds a bit crazy to you, don't worry, it will all become clear "
"and you'll soon master a powerful new tool for your live coded sets."
msgstr ""
"Een hele tijd terug in aflevering 3 van deze Sonic Pi serie, keken we hoe we é"
"én van de meest bekende drum breaks aller tijden  konden loop-en, stretchen en"
" filteren: de Amen Break. In deze tutorial gaan we nog een stapje verder en ga"
"an we zien hoe we de sample kunnen opknippen, de stukken door elkaar te schudd"
"en en deze in een andere volgorde weer aan elkaar te lijmen. Misschien klinkt "
"dit allemaal wat raar nu, maar maak je geen zorgen, het zal je snel allemaal d"
"uidelijk worden, en je zal deze techniek snel meester zijn en deze in de toeko"
"mst gebruiken in je live gecode set ."

#: A.12-sample-slicing.md:13
msgid "Sound as Data"
msgstr "Geluid als data"

#: A.12-sample-slicing.md:15
msgid ""
"Before we get started let's just take a brief moment to understand how to work"
" with samples. By now, you've all hopefully played with Sonic Pi's powerful sa"
"mpler. If not, there's no time like the present! Boot up your Raspberry Pi, la"
"unch Sonic Pi from the Programming menu, type the following into a fresh buffe"
"r and then hit the Run button to hear a pre-recorded drum beat:"
msgstr ""
"Voor we eraan beginnen, kijken we even hoe we het gebruik van sample's beter k"
"unnen begrijpen. Ondertussen hebben jullie hopelijk al gespeeld met de krachti"
"ge sampler van Sonic Pi. Indien niet, start Raspberry Pi, laad Sonic Pi op, en"
" typ het volgende in een lege buffer om de drum-sample te kunnen horen:"

#: A.12-sample-slicing.md:26
msgid ""
"A recording of a sound is simply represented as data - lots of numbers between"
" -1 and 1 which represent the peaks and troughs of the sound wave. If we play "
"those numbers back in order, we get the original sound. However, what's to sto"
"p us from playing them back in a different order and creating a new sound?"
msgstr ""
"Een opgenomen geluid wordt simpelweg uitgedrukt in data, veel nummers tussen -"
"1 en 1 zijn dat die de pieken en dalen van een geluidsgolf vertegenwoordigen. "
"Als we deze cijfers in volgorde kunnen reproduceren, krijgen we het originele "
"geluid terug. Maar wat houdt ons tegen om deze in een andere volgorde te gaan "
"afspelen en hierbij een nieuw geluid te creëren?"

#: A.12-sample-slicing.md:32
msgid ""
"How are samples actually recorded? It's actually pretty simple once you unders"
"tand the basic physics of sound. When you make a sound - for example by hittin"
"g a drum, the noise travels through the air in a similar fashion to how the su"
"rface of a lake ripples when you throw a pebble into it. When those ripples re"
"ach your ears, your eardrum moves sympathetically and converts those movements"
" into the sound you hear. If we wish to record and play back the sound, we the"
"refore need a way of capturing, storing and reproducing those ripples. One way"
" is to use a microphone which acts like an eardrum and moves back and forth as"
" the sound ripples hit it. The microphone then converts its position into a ti"
"ny electric signal which is then measured many times a second. These measureme"
"nts are then represented as a series of numbers between -1 and 1."
msgstr ""
"Hoe zijn samples eigenlijk opgenomen? Dat  is eigenlijk vrij eenvoudig als u e"
"enmaal de fundamentele fysica van geluid begrijpt. Bij het produceren van een "
"klank,bijvoorbeeld door op een trommel te slaan, reist het geluid door de luch"
"t,op een zelfde manier het wateroppervlak rimpels maakt als je er een steentje"
" in gooit. Als deze golven jouw oren bereiken, zal jouw trommelvlies hierop re"
"ageren en zullen deze bewegingen omgezet worden naar de klank die jij dan hoor"
"t. Als we een geluid willen opnemen en terug willen afspelen moeten we deze ge"
"luidsgolven capteren, opslaan en reproduceren. We kunnen dit bijvoorbeeld met "
"een microfoon, die net als een trommelvlies reageert en heen en weer zal beweg"
"en zodra een geluidsgolf het membraan raakt. De microfoon registreert deze bew"
"eging en zet deze om tot een minuscuul elektrisch signaal dat op zijn beurt ve"
"le malen per seconde wordt gemeten.Deze metingen worden dan weergegeven als ee"
"n reeks getallen tussen -1 en 1."

#: A.12-sample-slicing.md:46
msgid ""
"If we were to plot a visualisation of the sound it would be a simple graph of "
"data with time on the x axis and microphone/speaker position as a value betwee"
"n -1 and 1 on the y axis. You can see an example of such a graph at the top of"
" the diagram."
msgstr ""
"Als we geluid zouden visualiseren zou deze een simpele grafiek zijn van datage"
"gevens met tijdsverloop op de x-as en de bewegingen van de microfoon/luidsprek"
"er met waarden tussen -1 en 1 op de y-as. Je kan, bovenaan het diagram, een vo"
"orbeeld van zo'n grafiek zien."

#: A.12-sample-slicing.md:51
msgid "Playing Part of a Sample"
msgstr "Een deel van een sample afspelen"

#: A.12-sample-slicing.md:53
msgid ""
"So, how do we code Sonic Pi to play a sample back in a different order? To ans"
"wer this question we need to take a look at the `start:` and `finish:` opts fo"
"r `sample`. These let us control the start and finish positions of our playbac"
"k of the numbers which represent the sound. The values for both of these opts "
"are represented as a number between `0` and `1` where `0` represents the start"
" of the sample and `1` is the end. So, to play the first half of the Amen Brea"
"k, we just need to specify a `finish:` of `0.5`:"
msgstr ""
"Dus, hoe kunnen we dan Sonic Pi zo coderen dat deze een sample in een andere v"
"olgorde afspeelt? Om een antwoord op deze vraag te kunnen geven moeten we een "
"kijkje nemen naar de `start:` en`finish:` opts voor `sample`. Deze laten ons t"
"oe de start en eindposities voor de weergave van een sample te bepalen. De waa"
"rden voor deze opts liggen tussen  `0` en`1` waarbij `0` staat voor de de star"
"t van de sample en `1` het einde ervan is. Dus als we de eerste helft van de A"
"men Break willen spelen moeten we de  `finish:` zetten op `0.5`:"

#: A.12-sample-slicing.md:66
msgid "We can add in a `start:` value to play an even smaller section of the sample:"
msgstr ""
"We kunnen ook een `start:` toevoegen om een nog kleiner stukje van de sample t"
"e kunnen spelen:"

#: A.12-sample-slicing.md:68
#, no-wrap
msgid "sample :loop_amen, start: 0.25, finish: 0.5"
msgstr "sample :loop_amen, start: 0.25, finish: 0.5"

#: A.12-sample-slicing.md:72
msgid ""
"For fun, you can even have the `finish:` opt's value be *before* `start:` and "
"it will play the section backwards:"
msgstr ""
"Voor de lol kunnen we de waarde van `finish:` laten vallen *vòòr* de waarde va"
"n `start:` om de selectie achterstevoren te laten afspelen:"

#: A.12-sample-slicing.md:75
#, no-wrap
msgid "sample :loop_amen, start: 0.5, finish: 0.25"
msgstr "sample :loop_amen, start: 0.5, finish: 0.25"

#: A.12-sample-slicing.md:79
msgid "Re-ordering Sample Playback"
msgstr "Het afspelen van een sample herordenen"

#: A.12-sample-slicing.md:81
msgid ""
"Now that we know that a sample is simply a list of numbers that can be played "
"back in any order and also how to play a specific part of a sample we can now "
"start having fun playing a sample back in the 'wrong' order."
msgstr ""
"Nu we weten dat een sample een simpele lijst is van getallen, die we in eender"
" welke volgorde kunnen laten afspelen en we ook weten hoe we een bepaald deel "
"van de sample kunnen afspelen, kunnen we na aan de slag gaan en een sample in "
"de verkeerde volgorde gooien en afspelen."

#: A.12-sample-slicing.md:86
msgid ""
"![Amen Slices](../../../etc/doc/images/tutorial/articles/A.12-sample-slicing/a"
"men_slice.png)"
msgstr ""
"![Amen Slices](../../../etc/doc/images/tutorial/articles/A.12-sample-slicing/a"
"men_slice.png)"

#: A.12-sample-slicing.md:88
msgid ""
"Let's take our Amen Break and chop it up into 8 equally-sized slices and then "
"shuffle the pieces around. Take a look at the diagram: at the top A) represent"
"s the graph of our original sample data. Chopping it into 8 slices gives us B)"
" - notice that we've given each slice a different colour to help distinguish t"
"hem. You can see each slice's start and finish values at the top. Finally C) i"
"s one possible re-ordering of the slices. We can then play this back to create"
" a new beat. Take a look at the code to do this:"
msgstr ""
"Laten we onze Amen break nemen en deze in 8 gelijke stukken verdelen en de stu"
"kken verschuiven. Kijk even op het diagram: bovenaan A) geeft de grafiek van o"
"nze originele sample weer. In 8 stukjes geknipt geeft ons B) , merk op dat we "
"elk stukje een andere kleur hebben gegeven om deze te kunnen onderscheiden. Je"
" ziet bovenaan de waarde van start en einde ,van elk stukje. En tenslotte is  "
"C) een mogelijke herordening van de stukjes. Deze kunnen we als een nieuwe bea"
"t afspelen. Laten we even deze code bekijken om dit te gaan doen:"

#: A.12-sample-slicing.md:97
#, no-wrap
msgid ""
"live_loop :beat_slicer do\n"
"  slice_idx = rand_i(8)\n"
"  slice_size = 0.125\n"
"  s = slice_idx * slice_size\n"
"  f = s + slice_size\n"
"  sample :loop_amen, start: s, finish: f\n"
"  sleep sample_duration :loop_amen, start: s, finish: f\n"
"end"
msgstr ""
"live_loop :beat_slicer do\n"
"  slice_idx = rand_i(8)\n"
"  slice_size = 0.125\n"
"  s = slice_idx * slice_size\n"
"  f = s + slice_size\n"
"  sample :loop_amen, start: s, finish: f\n"
"  sleep sample_duration :loop_amen, start: s, finish: f\n"
"end"

#: A.12-sample-slicing.md:108
msgid ""
"we choose a random slice to play which should be a random number between 0 and"
" 7 (remember that we start counting at 0). Sonic Pi has a handy function for e"
"xactly this: `rand_i(8)`. We then store this random slice index in the variabl"
"e `slice_idx`."
msgstr ""
"We kiezen een willekeurige segment om af te spelen welke een willekeurig getal"
" tussen 0 en 7 is (voor de 8 stukken, we tellen vanaf 0!) Hiervoor heeft Sonic"
" Pi een handige functie: `rand_i(8)`. Vervolgens bewaren we deze willekeurige "
"segment-index in de variabele `slice_idx`."

#: A.12-sample-slicing.md:113
msgid ""
"We define our `slice_size` which is 1/8 or 0.125. The `slice_size` is necessar"
"y for us to convert our `slice_idx` into a value between 0 and 1 so we can use"
" it as our `start:` opt."
msgstr ""
"Definiëren we onze `slice_size` die 1/8 is of 0,125 is. De `slice_size` is noo"
"dzakelijk om  onze 'slice_idx' te converteren naar een waarde tussen 0 en 1 zo"
"dat we deze kunnen gebruiken als onze `start:` opt."

#: A.12-sample-slicing.md:117
msgid ""
"We calculate the start position `s` by multiplying the `slice_idx` by the `sli"
"ce_size`."
msgstr ""
"We berekenen de beginpositie ' door de 'slice_idx' met 'slice_size' te vermeni"
"gvuldigen ."

#: A.12-sample-slicing.md:120
msgid ""
"We calculate the finish position `f` by adding the `slice_size` to the start p"
"osition `s`."
msgstr ""
"We berekenen de eind-positie `f` door de ´slice_size` aan de startpositie `s` "
"toe te voegen."

#: A.12-sample-slicing.md:123
msgid ""
"We can now play the sample slice by plugging in the `s` and `f` values into th"
"e `start:` and `finish:` opts for `sample`."
msgstr ""
"We kunnen nu deze sample-slice afspelen door de waarden van `s`en `f`, in de `"
"start:` en `finish:` opts voor `sample` te steken."

#: A.12-sample-slicing.md:126
msgid ""
"Before we play the next slice we need to know how long to `sleep` which should"
" be the duration of the sample slice. Luckily, Sonic Pi has us covered with `s"
"ample_duration` which accepts all the same opts as `sample` and simply returns"
" the duration. Therefore, by passing `sample_duration` our `start:` and `finis"
"h:` opts, we can find out the duration of a single slice."
msgstr ""
"Voordat we het volgende segment spelen moeten we weten hoe lang de `sleep` is "
"welke de duurtijd is van ons sample segment. Gelukkig heeft  Sonic Pi ons voor"
"zien van `sample_duration` welke dezelfde opts heeft als `sample`en ons zijn d"
"uurtijd kan weergeven. Dus, door het passeren van `sample_duration` aan onze `"
"start:` en  `finish:`  kennen we de duur van elke slice."

#: A.12-sample-slicing.md:133
msgid ""
"We wrap all of this code in a `live_loop` so that we continue to pick new rand"
"om slices to play."
msgstr ""
"We steken deze code in een `live_loop` zodat we verder nieuwe random slices ku"
"nnen uitpikken."

#: A.12-sample-slicing.md:139
msgid ""
"Let's combine everything we've seen so far into a final example which demonstr"
"ates how we can take a similar approach to combine randomly sliced beats with "
"some bass to create the start of an interesting track. Now it's your turn - ta"
"ke the code below as a starting point and see if you can take it in your own d"
"irection and create something new..."
msgstr ""
"Laten we alles wat we tot nu toe hebben gezien, met de zelfde aanpak in een la"
"atste voorbeeld combineren, dat demonstreert hoe opgeknipte beats met wat bass"
" het begin van een interessante track kunnen maken . Nu is het jouw beurt - om"
" de onderstaande code als uitgangspunt te nemen en te zien of je deze een eige"
"n twist kan geven om er weer iets helemaal anders van te maken..."

#: A.12-sample-slicing.md:145
#, no-wrap
msgid ""
"live_loop :sliced_amen do\n"
"  n = 8\n"
"  s =  line(0, 1, steps: n).choose\n"
"  f = s + (1.0 / n)\n"
"  sample :loop_amen, beat_stretch: 2, start: s, finish: f\n"
"  sleep 2.0  / n\n"
"end\n"
"live_loop :acid_bass do\n"
"  with_fx :reverb, room: 1, reps: 32, amp: 0.6 do\n"
"    tick\n"
"    n = (octs :e0, 3).look - (knit 0, 3 * 8, -4, 3 * 8).look\n"
"    co = rrand(70, 110)\n"
"    synth :beep, note: n + 36, release: 0.1, wave: 0, cutoff: co\n"
"    synth :tb303, note: n, release: 0.2, wave: 0, cutoff: co\n"
"    sleep (ring 0.125, 0.25).look\n"
"  end\n"
"end"
msgstr ""
"live_loop :sliced_amen do\n"
"  n = 8\n"
"  s =  line(0, 1, steps: n).choose\n"
"  f = s + (1.0 / n)\n"
"  sample :loop_amen, beat_stretch: 2, start: s, finish: f\n"
"  sleep 2.0  / n\n"
"end\n"
"live_loop :acid_bass do\n"
"  with_fx :reverb, room: 1, reps: 32, amp: 0.6 do\n"
"    tick\n"
"    n = (octs :e0, 3).look - (knit 0, 3 * 8, -4, 3 * 8).look\n"
"    co = rrand(70, 110)\n"
"    synth :beep, note: n + 36, release: 0.1, wave: 0, cutoff: co\n"
"    synth :tb303, note: n, release: 0.2, wave: 0, cutoff: co\n"
"    sleep (ring 0.125, 0.25).look\n"
"  end\n"
"end"

#: A.13-probabilistic-sequencer.md:1
msgid "A.13 Code a Probabilistic Sequencer"
msgstr "A.13 Codeer een probabilistische Sequencer"

#: A.13-probabilistic-sequencer.md:3
msgid "Code a Probabilistic Sequencer"
msgstr "Codeer een probabilistische Sequencer"

#: A.13-probabilistic-sequencer.md:5
msgid ""
"In a previous episode of this Sonic Pi series we explored the power of randomi"
"sation to introduce variety, surprise and change into our live coded tracks an"
"d performances. For example, we randomly picked notes from a scale to create n"
"ever-ending melodies. Today we're going to learn a new technique which uses ra"
"ndomisation for rhythm - probabilistic beats!"
msgstr ""
"In een vorige aflevering van deze Sonic Pi serie, verkenden we de kracht van r"
"andomiseren om verscheidenheid,variatie en verassing te kunnen introduceren in"
" onze live gecodeerde nummers en optredens. We plukten bijvoorbeeld willekeuri"
"g noten van een bepaalde toonladder, om nooit-eindigende melodieën te creëren."
" Vandaag gaan we een nieuwe techniek leren, die gebruik maakt van het randomis"
"eren van ritme - probabilistische beats!"

#: A.13-probabilistic-sequencer.md:12
msgid "Probability"
msgstr "Probabiliteit"

#: A.13-probabilistic-sequencer.md:14
msgid ""
"Before we can start making new beats and synth rhythms we need to take a quick"
" dive into the basics of probability. This might sound daunting and complicate"
"d, but really it's just as simple as rolling a dice - honestly! When you take "
"a regular 6 sided board game dice and roll it what's actually happening? Well,"
" firstly you'll roll either a 1, 2, 3, 4, 5 or 6 with exactly the same chance "
"of getting any of the numbers. In fact, given that it's a 6 sided dice, on ave"
"rage (if you roll lots and lots of times) you'll throw a 1 every 6 throws. Thi"
"s means you have a 1 in 6 chance of throwing a 1. We can emulate dice rolls in"
" Sonic Pi with the fn `dice`. Let's roll one 8 times:"
msgstr ""
"Voor we nieuwe beats en synth ritmes beginnen maken, moeten we even kijken naa"
"r de basisprincipes van probabiliteit. Het lijkt misschien ingewikkeld, maar h"
"et is echt net zo eenvoudig als een dobbelstenen werpen - echt waar! Als je ee"
"n 6 zijdige dobbelsteen gooit, wat gebeurt er dan? Wel misschien gooi je een 1"
", 2, 3, 4, 5 of 6 met precies dezelfde kansen.\n"
"Hierdoor heb je een kans van 1 in 6 van het gooien van een 1. We kunnen ook he"
"t gooien van dobbelstenen in Sonic Pi emuleren met de fn 'dice' . Laten we een"
"s 8 keer gooien:"

#: A.13-probabilistic-sequencer.md:25
#, no-wrap
msgid ""
"8.times do\n"
"  puts dice\n"
"  sleep 1\n"
"end"
msgstr ""
"8.times do\n"
"  puts dice\n"
"  sleep 1\n"
"end"

#: A.13-probabilistic-sequencer.md:32
msgid ""
"Notice how the log prints values between 1 and 6 just as if we'd rolled a real"
" dice ourselves."
msgstr ""
"Kijk hoe in het logboek waarden tussen 1 en 6 wordt afgedrukt, alsof we een ec"
"hte dobbelsteen geworpen zouden hebben."

#: A.13-probabilistic-sequencer.md:35
msgid "Random Beats"
msgstr "Random Beats"

#: A.13-probabilistic-sequencer.md:37
msgid ""
"Now imagine you had a drum and every time you were about to hit it you rolled "
"a dice. If you rolled a 1, you hit the drum and if you rolled any other number"
" you didn't. You now have a probabilistic drum machine working with a probabil"
"ity of 1/6! Let's hear what that sounds like:"
msgstr ""
"Beeld je even in dat je een trommel hebt en dat je elke keer je deze zou slaan"
", je een teerling zou werpen. Als je één gooit zou je hem slaan en elke worp m"
"et een ander getal niet. Je hebt nu een probalistische drummachine met een pro"
"babiliteit van 1/6! Laten we eens horen hoe dat klinkt:"

#: A.13-probabilistic-sequencer.md:42
#, no-wrap
msgid ""
"live_loop :random_beat do\n"
"  sample :drum_snare_hard if dice == 1\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :random_beat do\n"
"  sample :drum_snare_hard if dice == 1\n"
"  sleep 0.125\n"
"end"

#: A.13-probabilistic-sequencer.md:50
msgid ""
"Let's quickly go over each line to make sure everything is very clear. First w"
"e create a new `live_loop` called `:random_beat` which will continually repeat"
" the two lines between `do` and `end`. The first of these lines is a call to `"
"sample` which will play a pre-recorded sound (the `:drum_snare_hard` sound in "
"this case). However, this line has a special conditional `if` ending. This mea"
"ns that the line will only be executed if the statement on the right hand side"
" of the `if` is `true`. The statement in this case is `dice == 1`. This calls "
"our `dice` function which, as we have seen, returns a value between 1 and 6. W"
"e then use the equality operator `==` to check to see if this value is `1`. If"
" it is `1`, then the statement resolves to `true` and our snare drum sounds, i"
"f it isn't `1` then the statement resolves to `false` and the snare is skipped"
". The second line simply waits for `0.125` seconds before rolling the dice aga"
"in."
msgstr ""
"Laat ons even snel elke regel overlopen om er zeker van te zijn dat alles duid"
"elijk is. Eerst creëren we een nieuwe `live_loop` die `:random_beat`heet , en "
"de twee regels tussen `do` en `end`, herhaalt. De eerste regel roept een `samp"
"le` aan die een vooraf opgenomen geluidsbestand afspeelt ( `:drum_snare_hard` "
"in dit geval ).Deze lijn heeft echter een special voorwaardelijk einde met de "
"`if` functie. Deze betekent dat de regel enkel wordt uitgevoerd als de declara"
"tie, rechts van de `if` (als), `true`(waar) is. Deze geeft in dit geval `dice "
"== 1` aan. Die roept onze `dice`functie aan dewelke, zoals we reeds zagen, een"
" waarde tussen 1 en 6 zal teruggeven."

#: A.13-probabilistic-sequencer.md:65
msgid "Changing Probabilities"
msgstr "Probabiliteit veranderen"

#: A.13-probabilistic-sequencer.md:67
msgid ""
"Those of you that have played role play games will be familiar with lots of st"
"rangely shaped dice with different ranges. For example there is the tetrahedro"
"n shaped dice which has 4 sides and even a 20 sided dice in the shape of a ico"
"sahedron. The number of sides on the dice changes the chance, or probability o"
"f rolling a 1. The fewer sides, the more likely you are to roll a 1 and the mo"
"re sides the less likely. For example, with a 4 sided dice, there's a one in 4"
" chance of rolling a 1 and with a 20 sided dice there's a one in 20 chance. Lu"
"ckily, Sonic Pi has the handy `one_in` fn for describing exactly this. Let's p"
"lay:"
msgstr ""
"Wie al een rollenspel heeft gespeeld zal al wel vertrouwd zijn met vreemd gevo"
"rmde dobbelstenen die verschillende reeksen getallen kunnen hebben. Er is bijv"
"oorbeeld de tetraëder-vormige dobbelsteen die 4 zijden heeft en zelfs een 20 z"
"ijdige dobbelsteen in de vorm van een icosaëder. Het aantal zijden op de dobbe"
"lsteen verandert de kans of waarschijnlijkheid van het rollen van een 1. Hoe m"
"inder kanten, hoe meer kans je hebt om 1 te gooien en hoe meer zijden hoe mind"
"er waarschijnlijk. Met een 4-zijdige dobbelstenen bijvoorbeeld, is er  een kan"
"s van één op 4 om een 1 te gooien en met een 20 zijdige dobbelsteen er is één "
"kans op de 20. Gelukkig heeft Sonic Pi de handige 'one_in' fn om precies dit t"
"e bepalen. Laten we gaan gooien:"

#: A.13-probabilistic-sequencer.md:77
#, no-wrap
msgid ""
"live_loop :different_probabilities do\n"
"  sample :drum_snare_hard if one_in(6)\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :different_probabilities do\n"
"  sample :drum_snare_hard if one_in(6)\n"
"  sleep 0.125\n"
"end"

#: A.13-probabilistic-sequencer.md:84
msgid ""
"Start the live loop above and you'll hear the familiar random rhythm. However,"
" don't stop the code running. Instead, change the `6` to a different value suc"
"h as `2` or `20` and hit the `Run` button again. Notice that lower numbers mea"
"n the snare drum sounds more frequently and higher numbers mean the snare trig"
"gers fewer times. You're making music with probabilities!"
msgstr ""
"Start de bovenstaande live-loop en je hoort het bekende random ritme. Stop dez"
"e nog even niet maar wijzig de `6` naar een andere waarde, zoals `2` of `20` e"
"n druk op de `Afspeel` - knop. Merk op dat een lager getal betekent dat je de "
"snare drum vaker hoort en dat hogere cijfers de snare minder zullen triggeren."
" Je maakt nu muziek met kansberekening!"

#: A.13-probabilistic-sequencer.md:91
msgid "Combining Probabilities"
msgstr "Probabiliteit combineren"

#: A.13-probabilistic-sequencer.md:93
msgid ""
"Things get really exciting when you combine multiple samples being triggered w"
"ith different probabilities. For example:"
msgstr ""
"Echt spannend wordt het wanneer je meerdere samples combineert, die worden gea"
"ctiveerd met verschillende kansen. Bijvoorbeeld:"

#: A.13-probabilistic-sequencer.md:96
#, no-wrap
msgid ""
"live_loop :multi_beat do\n"
"  sample :elec_hi_snare if one_in(6)\n"
"  sample :drum_cymbal_closed if one_in(2)\n"
"  sample :drum_cymbal_pedal if one_in(3)\n"
"  sample :bd_haus if one_in(4)\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :multi_beat do\n"
"  sample :elec_hi_snare if one_in(6)\n"
"  sample :drum_cymbal_closed if one_in(2)\n"
"  sample :drum_cymbal_pedal if one_in(3)\n"
"  sample :bd_haus if one_in(4)\n"
"  sleep 0.125\n"
"end"

#: A.13-probabilistic-sequencer.md:106
msgid ""
"Again, run the code above and then start changing the probabilities to modify "
"the rhythm. Also, try changing the samples to create an entirely new feel. For"
" example try changing `:drum_cymbal_closed` to `:bass_hit_c` for extra bass!"
msgstr ""
"Opnieuw, laat de bovenstaande code lopen, en wijzig de probabiliteit, om het r"
"itme te modificeren. Probeer het ook de samples te veranderen om een geheel ni"
"euw gevoel te creëren. Probeer bijvoorbeeld `:drum_cymbal_closed` naar `:bass_"
"hit_c` te veranderen voor extra bass!"

#: A.13-probabilistic-sequencer.md:112
msgid "Repeatable Rhythms"
msgstr "Herhaalbare ritmes"

#: A.13-probabilistic-sequencer.md:114
msgid ""
"Next, we can use our old friend `use_random_seed` to reset the random stream a"
"fter 8 iterations to create a regular beat. Type the following code to hear a "
"much more regular and repeating rhythm. Once you hear the beat, try changing t"
"he seed value from `1000` to another number. Notice how different numbers gene"
"rate different beats."
msgstr ""
"Vervolgens kunnen we gebruik maken van onze oude vriend `use_random_seed` om d"
"e willekeurige stroom, na 8 herhalingen opnieuw in te stellen om een regelmati"
"ge beat te maken. Typ de volgende code om een meer regelmatig en herhalend rit"
"me te horen. Zodra je de beat hoort, probeer de seed waarde van `1000` naar ee"
"n ander nummer te wijzigen. Merk op hoe verschillende cijfers, verschillende b"
"eats genereren."

#: A.13-probabilistic-sequencer.md:120
#, no-wrap
msgid ""
"live_loop :multi_beat do\n"
"  use_random_seed 1000\n"
"  8.times do\n"
"    sample :elec_hi_snare if one_in(6)\n"
"    sample :drum_cymbal_closed if one_in(2)\n"
"    sample :drum_cymbal_pedal if one_in(3)\n"
"    sample :bd_haus if one_in(4)\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"live_loop :multi_beat do\n"
"  use_random_seed 1000\n"
"  8.times do\n"
"    sample :elec_hi_snare if one_in(6)\n"
"    sample :drum_cymbal_closed if one_in(2)\n"
"    sample :drum_cymbal_pedal if one_in(3)\n"
"    sample :bd_haus if one_in(4)\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: A.13-probabilistic-sequencer.md:133
msgid ""
"One thing I tend to do with this kind of structure is to remember which seeds "
"sound good and make a note of them. That way I can easily re-create my rhythms"
" in future practice sessions or performances."
msgstr ""
"Wat ik met dit soort structuren ook graag doe is, de seeds, welke goed klinken"
",te onthouden en deze te noteren. Op die manier kan ik makkelijk mijn favoriet"
"e ritmes opnieuw maken in toekomstige trainingen of voorstellingen."

#: A.13-probabilistic-sequencer.md:139
msgid ""
"Finally, we can throw in some random bass to give it some nice melodic content"
". Notice that we can also use our newly discovered probabilistic sequencing me"
"thod on synths just as well as samples. Don't leave it at that though - tweak "
"the numbers and make your own track with the power of probabilities!"
msgstr ""
"Tot slot kunnen we er een random baslijn aan toevoegen om er een mooie melodis"
"che inhoud aan te geven. Merk ook op dat we onze pas aangeleerde probabilistis"
"che sequentie methode, kunnen gebruiken op synths en samples. Laat het daar ze"
"ker ook niet bij, pas de getallen aan, en maak je eigen nummer met de kracht v"
"an waarschijnlijkheden!"

#: A.13-probabilistic-sequencer.md:145
#, no-wrap
msgid ""
"live_loop :multi_beat do\n"
"  use_random_seed 2000\n"
"  8.times do\n"
"    c = rrand(70, 130)\n"
"    n = (scale :e1, :minor_pentatonic).take(3).choose\n"
"    synth :tb303, note: n, release: 0.1, cutoff: c if rand < 0.9\n"
"    sample :elec_hi_snare if one_in(6)\n"
"    sample :drum_cymbal_closed if one_in(2)\n"
"    sample :drum_cymbal_pedal if one_in(3)\n"
"    sample :bd_haus, amp: 1.5 if one_in(4)\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"live_loop :multi_beat do\n"
"  use_random_seed 2000\n"
"  8.times do\n"
"    c = rrand(70, 130)\n"
"    n = (scale :e1, :minor_pentatonic).take(3).choose\n"
"    synth :tb303, note: n, release: 0.1, cutoff: c if rand < 0.9\n"
"    sample :elec_hi_snare if one_in(6)\n"
"    sample :drum_cymbal_closed if one_in(2)\n"
"    sample :drum_cymbal_pedal if one_in(3)\n"
"    sample :bd_haus, amp: 1.5 if one_in(4)\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: A.14-amplitude-modulation.md:1
msgid "A.14 Amplitude Modulation"
msgstr "A.14 Amplitude Modulatie"

#: A.14-amplitude-modulation.md:3
msgid "Amplitude Modulation"
msgstr "Amplitude Modulatie"

#: A.14-amplitude-modulation.md:5
msgid ""
"This month we're going to take a deep dive into one of Sonic Pi's most powerfu"
"l and flexible audio FX - the `:slicer`. By the end of this article you will h"
"ave learned how to manipulate the overall volume of parts of our live coded so"
"und in powerful new ways. This will allow you to create new rhythmic and timbr"
"al structures and broaden your sonic possibilities."
msgstr ""
"Deze maand gaan we een diepe duik nemen in een van Sonic Pi ' s meest krachtig"
"e en flexibele audio effecten: de `: slicer`. Aan het eind van dit artikel heb"
" je geleerd hoe je de totale omvang van de onderdelen van ons live gecodeerd g"
"eluid op een krachtige, nieuwe manieren kan manipuleren. Dit zal je toelaten, "
"nieuwe ritmische en timbrale structuren te creëren en je klankspectrum te verr"
"uimen."

#: A.14-amplitude-modulation.md:12
msgid "Slice that Amp"
msgstr "Snij de Amp"

#: A.14-amplitude-modulation.md:14
msgid ""
"So, what does the `:slicer` FX actually do? One way to think about it is that "
"it's just like having someone play around with the volume control on your TV o"
"r home hi-fi. Let's take a look but first, listen to the deep growl of the fol"
"lowing code which triggers the `:prophet` synth:"
msgstr ""
"Dus, wat doet deze:slicer` FX eigenlijk? Een manier om er naar te kijken is ,d"
"at het net iemand is, die speelt met de volumeknop op de stereoinstallatie of "
"de TV. Laten we eens een kijkje nemen, maar zeker eerst luisteren naar het die"
"pe gegrom van de volgende code die de `:prophet` synth triggeren:"

#: A.14-amplitude-modulation.md:20
#, no-wrap
msgid ""
"synth :prophet, note: :e1, release: 8, cutoff: 70\n"
"synth :prophet, note: :e1 + 4, release: 8, cutoff: 80"
msgstr ""
"synth :prophet, note: :e1, release: 8, cutoff: 70\n"
"synth :prophet, note: :e1 + 4, release: 8, cutoff: 80"

#: A.14-amplitude-modulation.md:25
msgid "Now, let's pipe it through the `:slicer` FX:"
msgstr "Laat ons dit nu door het `:slicer`FX leiden:"

#: A.14-amplitude-modulation.md:27
#, no-wrap
msgid ""
"\n"
"with_fx :slicer do\n"
"  synth :prophet, note: :e1, release: 8, cutoff: 70\n"
"  synth :prophet, note: :e1 + 4, release: 8, cutoff: 80\n"
"end"
msgstr ""
"\n"
"with_fx :slicer do\n"
"  synth :prophet, note: :e1, release: 8, cutoff: 70\n"
"  synth :prophet, note: :e1 + 4, release: 8, cutoff: 80\n"
"end"

#: A.14-amplitude-modulation.md:35
msgid ""
"Hear how the slicer acts like it's muting and unmuting the audio with a regula"
"r beat. Also, notice how the `:slicer` affects all the audio generated between"
" the `do`/`end` blocks. You can control the speed at which it turns the audio "
"on and off with the `phase:` opt which is short for phase duration. Its defaul"
"t value is `0.25` which means 4 times a second at the default BPM of 60. Let's"
" make it faster:"
msgstr ""
"Hoor hier, hoe de Slicer, het geluid met een een regelmatige tel, lijkt op en "
"aan te zetten.Merk hierbij op dat de `:slicer` het geluid, gegenereerd tussen "
"de `do`/`end` blocks, beïnvloed. Je kan de snelheid waarmee het geluid wordt a"
"f- en aangezet bepalen met de `phase:` opt ( duurtijd fase). Zijn standaard in"
"stelling is `0.25`, dat is 4 keer per minuut aan de standaard 60 BPM. Dit make"
"n we sneller:"

#: A.14-amplitude-modulation.md:42
#, no-wrap
msgid ""
"with_fx :slicer, phase: 0.125 do\n"
"  synth :prophet, note: :e1, release: 8, cutoff: 70\n"
"  synth :prophet, note: :e1 + 4, release: 8, cutoff: 80\n"
"end"
msgstr ""
"with_fx :slicer, phase: 0.125 do\n"
"  synth :prophet, note: :e1, release: 8, cutoff: 70\n"
"  synth :prophet, note: :e1 + 4, release: 8, cutoff: 80\n"
"end"

#: A.14-amplitude-modulation.md:49
msgid ""
"Now, play with different `phase:` durations yourself. Try longer and shorter v"
"alues. See what happens when you choose a really short value. Also, try differ"
"ent synths such as `:beep` or `:dsaw` and different notes. Take a look at the "
"following diagram to see how different `phase:` values change the number of am"
"plitude changes per beat."
msgstr ""
"Speel nu zelf met de verschillende `phase:` tijden. Probeer langere en kortere"
" waarden. Zie wat er gebeurt wanneer je kiest voor een heel korte-waarde. Prob"
"eer ook verschillende synths zoals `:beep` of `:dsaw` en probeer ook andere no"
"ten. Bekijk het volgende diagram om te zien hoe verschillende `phase:` waarden"
", het aantal veranderingen op de amplitude per beat wijzigt."

#: A.14-amplitude-modulation.md:56
msgid ""
"![Phase Durations](../../../etc/doc/images/tutorial/articles/A.14-amplitude-mo"
"dulation/slicer_phase_durations.png)"
msgstr ""
"![Phase Durations](../../../etc/doc/images/tutorial/articles/A.14-amplitude-mo"
"dulation/slicer_phase_durations.png)"

#: A.14-amplitude-modulation.md:58
msgid ""
"Phase duration is the length of time for one on/off cycle. Therefore smaller v"
"alues will make the FX switch on and off much faster than larger values. Good "
"values to start playing with are `0.125`, `0.25`, `0.5` and `1`."
msgstr ""
"De duur van een fase is de lengte van een aan/uit cyclus. Daarom zullen kleine"
"re waarden, de FX schakelaar veel sneller aan-/ uitschakelen, dan grotere waar"
"den. Leuke waarden om mee te beginnen spelen zijn `0.125`, `0.25`, `0.5` en `1"
"`."

#: A.14-amplitude-modulation.md:64
msgid "Control Waves"
msgstr "Golfsoort Instellen"

#: A.14-amplitude-modulation.md:66
msgid ""
"By default, the `:slicer` FX uses a square wave to manipulate the amplitude th"
"rough time. This is why we hear the amplitude on for a period, then immediatel"
"y off for a period, then back on again. It turns out that the square wave is j"
"ust one of 4 different control waves that are supported by `:slicer`. The othe"
"rs are saw, triangle and (co)sine. Take a look at the diagram below to see wha"
"t these look like. We can also hear what they sound like. For example, the fol"
"lowing code uses (co)sine as the control wave. Hear how the sound doesn't turn"
" on and off abruptly but instead smoothly fades in and out:"
msgstr ""
"Standaard gebruikt het `:slicer` FX een blokgolf om de amplitude in een bepaal"
"de tijdsduur te manipuleren.  Daarom horen we amplitude voor een tijdje, en da"
"n voor een tijdje helemaal niet, om dan weer met een zelfde cyclus te beginnen"
". Het is zo dat de blokgolf  één van de vier golfvormen is die we kunnen inste"
"llen in deze  `:slicer`. De andere golfsoorten zijn: zaagtand, driehoeksgolf, "
"en (co)sinus. Kijk ook eens naar de onderstaande afbeelding om te zien hoe dez"
"e eruit zien. We kunnen ook horen hoe deze klinken. De volgende code gebruikt "
"een sinusgolf als controlegolf. Hoor nu dat het geluid niet abrupt aan en uit "
"gaat, maar zacht in- en uit-fade:"

#: A.14-amplitude-modulation.md:76
#, no-wrap
msgid ""
"with_fx :slicer, phase: 0.5, wave: 3 do\n"
"  synth :dsaw, note: :e3, release: 8, cutoff: 120\n"
"  synth :dsaw, note: :e2, release: 8, cutoff: 100\n"
"end"
msgstr ""
"with_fx :slicer, phase: 0.5, wave: 3 do\n"
"  synth :dsaw, note: :e3, release: 8, cutoff: 120\n"
"  synth :dsaw, note: :e2, release: 8, cutoff: 100\n"
"end"

#: A.14-amplitude-modulation.md:83
msgid ""
"Have a play with the different wave forms by changing the `wave:` opt to `0` f"
"or saw, `1` for square, `2` for triangle and `3` for sine. See how different w"
"aves sound with different `phase:` opts too."
msgstr ""
"Speel met verschillende golftypes door de `wave:` opt naar `0` te veranderen v"
"oor saw (zaagtandgolf) , `1` voor square (blokgolf), `2` voor triangle (drieho"
"eksgolf) en `3` voor sine (sinusgolf). Bekijk ook hoe deze verschillende golft"
"ypes klinken met verschillende `phase:` opts."

#: A.14-amplitude-modulation.md:87
msgid ""
"Each of these waves can be inverted with the `invert_wave:` opt which flips it"
" on the y axis. For example, in a single phase the saw wave typically starts h"
"igh, and slowly goes down before jumping back to the top. With `invert_wave: 1"
"` it will start low and slowly go up before jumping back down again. Additiona"
"lly, the control wave can be started at different points with the `phase_offse"
"t:` opt which should be a value between `0` and `1`. By playing around with `p"
"hase:`, `wave:`, `invert_wave:` and `phase_offset` opts you can dramatically c"
"hange how the amplitude is modified through time."
msgstr ""
"Elk van deze golven kan worden omgekeerd met de `invert_wave:` optie, en spieg"
"elt deze tegenover de Y-as. Bijvoorbeeld, in een enkele fase, zal een zaagtand"
"-golf normaal gezien op zijn hoogste punt beginnen en langzaam naar beneden te"
" gaan, om dan terug naar zin hoogste punt te springen. Met `invert_wave: 1` za"
"l deze nu op het laagste punt beginnen en langzaam naar boven gaan, om dan naa"
"r beneden te vallen. Bijkomend, kan je de  golf ook instellen dat deze op ande"
"re punten start met de `phase_offset:` optie. Deze kan een getal bevatten tuss"
"en `0` en`1`. Door te gaan spelen met de `phase:`, `wave:`, `invert_wave:` en`"
"phase_offset` opties kan je de amplitude binnen een tijdsverloop dramatisch ve"
"randeren."

#: A.14-amplitude-modulation.md:97
msgid ""
"![Phase Durations](../../../etc/doc/images/tutorial/articles/A.14-amplitude-mo"
"dulation/slicer_control_waves.png)"
msgstr ""
"![Phase Durations](../../../etc/doc/images/tutorial/articles/A.14-amplitude-mo"
"dulation/slicer_control_waves.png)"

#: A.14-amplitude-modulation.md:100
msgid "Setting your levels"
msgstr "Het instellen van je niveaus"

#: A.14-amplitude-modulation.md:102
msgid ""
"By default, `:slicer` switches between amplitude values `1` (fully loud) and `"
"0` (silent). This can be changed with the `amp_min:` and `amp_max:` opts. You "
"can use this alongside the sine wave setting to create a simple tremolo effect"
":"
msgstr ""
"Standaard schakelt `:slicer` tussen de amplitude-waarden `1` (luid) en `0` (st"
"il). Dit kan je veranderen met de `amp_min:` en `amp_max:` opties. Je kan deze"
" gebruiken naast de sinusgolf instelling om een eenvoudige tremolo-effect te b"
"ekomen:"

#: A.14-amplitude-modulation.md:107
#, no-wrap
msgid ""
"with_fx :slicer, amp_min: 0.25, amp_max: 0.75, wave: 3, phase: 0.25 do\n"
"  synth :saw, release: 8\n"
"end"
msgstr ""
"with_fx :slicer, amp_min: 0.25, amp_max: 0.75, wave: 3, phase: 0.25 do\n"
"  synth :saw, release: 8\n"
"end"

#: A.14-amplitude-modulation.md:113
msgid ""
"This is just like grabbing the volume knob on your hi-fi and moving it up and "
"down just a little so the sound 'wobbles' in and out."
msgstr ""
"Dit is zoals je de volumeknop van je hi-fi op en neer zou bewegen, zodat het g"
"eluid een beetje aan en uit 'wiebelt'."

#: A.14-amplitude-modulation.md:117
msgid "Probabilities"
msgstr "Probabiliteit"

#: A.14-amplitude-modulation.md:119
msgid ""
"One of `:slicer`'s powerful features is its ability to use probability to choo"
"se whether or not to turn the slicer on or off. Before the `:slicer` FX starts"
" a new phase it rolls a dice and based on the result either uses the selected "
"control wave or keeps the amplitude off. Let's take a listen:"
msgstr ""
"Een van de krachtigste functies van ': slicer' , is de mogelijkheid of u de sl"
"icer aan of uit wil schakelen. Vooraleer het `:slicer` FX een nieuwe fase star"
"t, zal deze een teerling werpen, en gebaseerd op de uitkomst hiervan , de gese"
"lecteerde controle golf gebruiken, of de amplitude niet aanzetten. Laten we ev"
"en gaan luisteren:"

#: A.14-amplitude-modulation.md:125
#, no-wrap
msgid ""
"with_fx :slicer, phase: 0.125, probability: 0.6  do\n"
"  synth :tb303, note: :e1, cutoff_attack: 8, release: 8\n"
"  synth :tb303, note: :e2, cutoff_attack: 4, release: 8\n"
"  synth :tb303, note: :e3, cutoff_attack: 2, release: 8\n"
"end"
msgstr ""
"with_fx :slicer, phase: 0.125, probability: 0.6  do\n"
"  synth :tb303, note: :e1, cutoff_attack: 8, release: 8\n"
"  synth :tb303, note: :e2, cutoff_attack: 4, release: 8\n"
"  synth :tb303, note: :e3, cutoff_attack: 2, release: 8\n"
"end"

#: A.14-amplitude-modulation.md:133
msgid ""
"Hear how we now have an interesting rhythm of pulses. Try changing the `probab"
"ility:` opt to a different value between `0` and `1`. Values closer to `0` wil"
"l have more space between each sound due to the likelihood of the sound being "
"triggered being much lower."
msgstr ""
"Hoor hoe we nu een interessant ritme van pulsen hebben bekomen. Probeer de `pr"
"obability:` optie naar een andere waarde tussen `0` en `1` te veranderen.  Waa"
"rden dichter bij `0` zullen meer ruimte tussen elk geluid hebben, doordat de w"
"aarschijnlijkheid dat het geluid wordt getriggerd veel lager ligt."

#: A.14-amplitude-modulation.md:138
msgid ""
"Another thing to notice is that the probability system in the FX is just like "
"the randomisation system accessible via fns such as `rand` and `shuffle`. They"
" are both completely deterministic. This means that each time you hit Run you'"
"ll hear exactly the same rhythm of pulses for a given probability. If you woul"
"d like to change things around you can use the `seed:` opt to select a differe"
"nt starting seed. This works exactly the same as `use_random_seed` but only af"
"fects that particular FX."
msgstr ""
"Wat je zeker ook nog moet weten is, dat het probabiliteitssysteem in FX, net z"
"oals het randomisatie-systeem toegankelijk is via functies zoals `rand` en`shu"
"ffle`. Ze zijn beide volledig deterministisch. Dit betekent dat elke keer je o"
"p afspelen klikt, je precies hetzelfde ritme van pulsen zal horen binnen een b"
"epaalde probabiliteit. Wil je toch nog dingen veranderen, gebruik dan de `seed"
":` opt om een verschillend start seed te kiezen. Dit werkt precies hetzelfde a"
"ls `use_random_seed` maar zal enkel invloed hebben op dat bepaalde FX."

#: A.14-amplitude-modulation.md:146
msgid ""
"Finally, you can change the 'resting' position of the control wave when the pr"
"obability test fails from `0` to any other position with the `prob_pos:` opt:"
msgstr ""
"Tenslotte kan je ook nog de 'rust' positie van de controle-Golf als de probabi"
"liteit-test mislukt, van `0` naar eender welke positie brengen met de `prob_po"
"s:` opt:"

#: A.14-amplitude-modulation.md:150
#, no-wrap
msgid ""
"with_fx :slicer, phase: 0.125, probability: 0.6, prob_pos: 1  do\n"
"  synth :tb303, note: :e1, cutoff_attack: 8, release: 8\n"
"  synth :tb303, note: :e2, cutoff_attack: 4, release: 8\n"
"  synth :tb303, note: :e3, cutoff_attack: 2, release: 8\n"
"end"
msgstr ""
"with_fx :slicer, phase: 0.125, probability: 0.6, prob_pos: 1  do\n"
"  synth :tb303, note: :e1, cutoff_attack: 8, release: 8\n"
"  synth :tb303, note: :e2, cutoff_attack: 4, release: 8\n"
"  synth :tb303, note: :e3, cutoff_attack: 2, release: 8\n"
"end"

#: A.14-amplitude-modulation.md:158
msgid "Slicing Beats"
msgstr "Beats Slicen (Opknippen)"

#: A.14-amplitude-modulation.md:160
msgid "One really fun thing to do is to use `:slicer` to chop a drum beat in and out:"
msgstr ""
"Wat ook heel leuk is om te doen is het gebruik van `:slicer` om een drum beat "
"aan en uit te knipperen:"

#: A.14-amplitude-modulation.md:163
#, no-wrap
msgid ""
"with_fx :slicer, phase: 0.125 do\n"
"  sample :loop_mika\n"
"end"
msgstr ""
"with_fx :slicer, phase: 0.125 do\n"
"  sample :loop_mika\n"
"end"

#: A.14-amplitude-modulation.md:169
msgid ""
"This allows us to take any sample and create new rhythmical possibilites which"
" is a lot of fun. However, one thing to be careful about is to make sure that "
"the tempo of the sample matches the current BPM in Sonic Pi otherwise the slic"
"ing will sound totally off. For example, try swapping `:loop_mika` with the `l"
"oop_amen` sample to hear how bad this can sound when the tempos don't align."
msgstr ""
"Hiermee kunnen we met eender welke sample nieuwe ritmische mogelijkheden creër"
"en, heel leuk om mee te spelen. Waar je wel op moet letten is dat het tempo va"
"n de sample past in het huidige BPM van Sonic Pi, anders knipt hij naast het r"
"itme. Probeer bijvoorbeeld de `:loop_mika` met de `loop_amen` sample te verwis"
"selen, om te horen hoe slecht dit kan klinken als het tempo niet uitlijnt."

#: A.14-amplitude-modulation.md:176
msgid "Changing tempo"
msgstr "Tempo Veranderen"

#: A.14-amplitude-modulation.md:178
msgid ""
"As we have already seen, changing the default BPM with `use_bpm` will make all"
" the sleep times and synth envelope durations grow or shrink to match the beat"
". The `:slicer` FX honours this too, as the `phase:` opt is actually measured "
"in beats not seconds. We can therefore fix the issue with `loop_amen` above by"
" changing the BPM to match the sample:"
msgstr ""
"Zoals we reeds gezien hebben, als het standaard BPM met `use_bpm` wordt verand"
"erd, zal dit ervoor zorgen dat de rusttijden (sleep) en de enveloppe van de sy"
"nths gaan groeien of krimpen, om gelijk met de tel te kunnen lopen. De `:slice"
"r` FX houdt hier ook rekening mee, vermits de `phase:` optie in de maat wordt "
"berekend en niet in seconden. We kunnen dus bovenstaand probleem oplossen door"
" de BPM te veranderen om deze met de sample te laten passen:"

#: A.14-amplitude-modulation.md:184
#, no-wrap
msgid ""
"use_sample_bpm :loop_amen\n"
"with_fx :slicer, phase: 0.125 do\n"
"  sample :loop_amen\n"
"end"
msgstr ""
"use_sample_bpm :loop_amen\n"
"with_fx :slicer, phase: 0.125 do\n"
"  sample :loop_amen\n"
"end"

#: A.14-amplitude-modulation.md:194
msgid ""
"Let's apply all these ideas into a final example that only uses the `:slicer` "
"FX to create an interesting combination. Go ahead, start changing it and make "
"it into your own piece!"
msgstr ""
"Laten we deze ideeën nu even toepassen in een laatste voorbeeld waar enkel het"
" `:slicer` FX wordt gebruikt om een interessante combinatie te maken. Ga je ga"
"ng, begin dingen te veranderen en maak er je eigen nummer van!"

#: A.14-amplitude-modulation.md:198
#, no-wrap
msgid ""
"live_loop :dark_mist do\n"
"  co = (line 70, 130, steps: 8).tick\n"
"  with_fx :slicer, probability: 0.7, prob_pos: 1 do\n"
"    synth :prophet, note: :e1, release: 8, cutoff: co\n"
"  end\n"
"  \n"
"  with_fx :slicer, phase: [0.125, 0.25].choose do\n"
"    sample :guit_em9, rate: 0.5\n"
"  end\n"
"  sleep 8\n"
"end\n"
"live_loop :crashing_waves do\n"
"  with_fx :slicer, wave: 0, phase: 0.25 do\n"
"    sample :loop_mika, rate: 0.5\n"
"  end\n"
"  sleep 16\n"
"end"
msgstr ""
"live_loop :dark_mist do\n"
"  co = (line 70, 130, steps: 8).tick\n"
"  with_fx :slicer, probability: 0.7, prob_pos: 1 do\n"
"    synth :prophet, note: :e1, release: 8, cutoff: co\n"
"  end\n"
"  \n"
"  with_fx :slicer, phase: [0.125, 0.25].choose do\n"
"    sample :guit_em9, rate: 0.5\n"
"  end\n"
"  sleep 8\n"
"end\n"
"live_loop :crashing_waves do\n"
"  with_fx :slicer, wave: 0, phase: 0.25 do\n"
"    sample :loop_mika, rate: 0.5\n"
"  end\n"
"  sleep 16\n"
"end"

#: A.15-performance.md:1
msgid "A.15 Five Live Coding Techniques"
msgstr "A.15 Vijf Live codering technieken"

#: A.15-performance.md:3
msgid "Five Live Coding Techniques"
msgstr "Vijf Live-Coding Technieken"

#: A.15-performance.md:5
msgid ""
"In this month's Sonic Pi tutorial we're going to take a look at how you can st"
"art treating Sonic Pi like a real instrument. We therefore need to start think"
"ing of code in a completely different way. Live coders think of code in a simi"
"lar way to how violinists think of their bow. In fact, just like a violinist c"
"an apply various bowing techniques to create different sounds (long slow motio"
"ns vs short fast hits) we will explore five of the basic live coding technique"
"s that Sonic Pi enables. By the end of this article you'll be able to start pr"
"acticing for your own live coded performances."
msgstr ""
"In de Sonic Pi zelfstudie van deze maand gaan we eens kijken hoe je Sonic Pi a"
"ls een echt muziekinstrument kan gaan hanteren. We moeten daarvoor met een and"
"ere blik naar de code beginnen kijken. Live Coders bekijken hun code zoals een"
" violist naar zijn strijkstok kijkt. Zoals een violist in feite verschillende "
"strijktechnieken gebruikt om andere klanken te creëren (lange trage bewegingen"
" of korte snelle aanslagen), zullen wij vijf van de basistechnieken onderzoeke"
"n die Sonic Pi mogelijk maakt. Aan het eind van het artikel, kan je je eigen l"
"ive coding optreden beginnen oefenen."

#: A.15-performance.md:15
msgid "1. Memorise the Shortcuts"
msgstr "1. Het onthouden van de Sneltoetsen"

#: A.15-performance.md:17
msgid ""
"The first tip to live coding with Sonic Pi is to start using the shortcuts. Fo"
"r example, instead of wasting valuable time reaching for the mouse, moving it "
"over to the Run button and clicking, you can simply press `alt` and `r` at the"
" same time which is much faster and keeps your fingers at the keyboard ready f"
"or the next edit. You can find out the shortcuts for the main buttons at the t"
"op by hovering the mouse over them. See section 10.2 of the built-in tutorial "
"for the full list of shortcuts."
msgstr ""
"De eerste tip om met Sonic Pi live coding te gaan doen is beginnen gebruik mak"
"en van de sneltoetsen. Bijvoorbeeld, in plaats van kostbare tijd te verliezen "
"door de muis te moeten gaan nemen om op de afspeeltoets te klikken kan je simp"
"elweg tegelijk de `alt` en`r` toets typen, dat werkt niet alleen sneller, je v"
"ingers staan zo ook al klaar op het klavier voor de volgende bewerking. Je kan"
" de sneltoetsen voor de belangrijkste knoppen bovenaan makkelijk uitzoeken doo"
"r met de muis eroverheen te zweven. Zie sectie 10.2 voor de ingebouwde handlei"
"ding voor de volledige lijst met sneltoetsen."

#: A.15-performance.md:26
msgid ""
"When performing, one fun thing to do is to add a bit of flair with your arm mo"
"tion when hitting shortcuts. For example, it's often good to communicate to th"
"e audience when you're about to make a change - so embellish your movement whe"
"n hitting `alt-r` just like a guitarist would do when hitting a big power chor"
"d."
msgstr ""
"Wanneer je een voorstelling doet is het ook prettig om je armbewegingen met wa"
"t flair te doen als je een sneltoets aanslaat. Zo is het bijvoorbeeld heel goe"
"d met het publiek fysiek te communiceren als je op het punt staat een verander"
"ing te maken, dus maak een mooie beweging als je `alt-r` typt, net zoals een g"
"itarist zou doen wanneer hij een power chord aanslaat."

#: A.15-performance.md:32
msgid "2. Manually Layer your Sounds"
msgstr "2. Handmatig je geluid van lagen voorzien"

#: A.15-performance.md:34
msgid ""
"Now you can trigger code instantly with the keyboard, you can instantly apply "
"this skill for our second technique which is to layer your sounds manually. In"
"stead of 'composing' using lots of calls to `play`, and `sample` separated by "
"calls to `sleep` we will have one call to `play` which we will manually trigge"
"r using `alt-r`. Let's try it. Type the following code into a fresh buffer:"
msgstr ""
"Nu je de code direct kunt activeren met het computerklavier, kan je deze vaard"
"igheid voor onze tweede techniek gaan gebruiken, en dat is handmatig je geluid"
" van lagen voorzien. In plaats van te componeren door meermaals een `play`, en"
" een `sample` op te roepen, gescheiden door oproepen van `sleep`, hebben we éé"
"n oproep naar `play` welk we manueel activeren met `alt-r`. Typ de volgende co"
"de in een nieuwe buffer:"

#: A.15-performance.md:41
#, no-wrap
msgid "synth :tb303, note: :e2 - 0, release: 12, cutoff: 90"
msgstr "synth :tb303, note: :e2 - 0, release: 12, cutoff: 90"

#: A.15-performance.md:46
msgid ""
"Now, hit `Run` and whilst the sound is playing, modify the code in order to dr"
"op down four notes by changing it to the following:"
msgstr ""
"Klik nu op de  `Afspeel` knop wanneer de klank loopt, verander de code om vier"
" tonen te zakken door het volgende te doen:"

#: A.15-performance.md:50
#, no-wrap
msgid "synth :tb303, note: :e2 - 4, release: 12, cutoff: 90"
msgstr "synth :tb303, note: :e2 - 4, release: 12, cutoff: 90"

#: A.15-performance.md:55
msgid ""
"Now, hit `Run` again, to hear both sounds playing at the same time. This is be"
"cause Sonic Pi's `Run` button doesn't wait for any previous code to finish, bu"
"t instead starts the code running at the same time. This means you can easily "
"layer lots of sounds manually with minor or major modifications between each t"
"rigger. For example, try changing both the `note:` and the `cutoff:` opts and "
"then re-trigger."
msgstr ""
"Klik nu terug op `Afspelen`, om beide klanken, tegelijk te horen spelen. Dit k"
"omt omdat de `Afspelen`knop van Sonic Pi niet wacht tot een voorgaande code is"
" afgelopen, maar in plaats daarvan de code tegelijkertijd start. Dit betekent "
"dat je makkelijk veel lagen van je geluid van kleinere of grotere veranderinge"
"n kan voorzien tussen elke trigger. Verander bijvoorbeeld zowel de `note:` als"
" de  `cutoff:` opties en herstart dan."

#: A.15-performance.md:63
msgid "You can also try this technique with long abstract samples. For example:"
msgstr "Je kan deze techniek ook gebruiken met lange abstracte samples. Bijvoorbeeld:"

#: A.15-performance.md:65
#, no-wrap
msgid "sample :ambi_lunar_land, rate: 1"
msgstr "sample :ambi_lunar_land, rate: 1"

#: A.15-performance.md:69
msgid ""
"Try starting the sample off, and then progressively halving the `rate:` opt be"
"tween hitting `Run` from `1` to `0.5` to `0.25` to `0.125` and then even try s"
"ome negative values such as `-0.5`. Layer the sounds together and see where yo"
"u can take it. Finally, try adding some FX."
msgstr ""
"Probeer de sample op te starten en dan geleidelijk de `rate:` waarde te halver"
"en tussen de afspeelcommando's door en gebruik getallen tussen `1` tot `0.5` t"
"ot `0.25` tot `0.125` en probeer zelfs negatieve waarden zoals `-0.5`. Voeg la"
"gen toe en kijk waar je uitkomt. Voeg er tenslotte nog een snuifje FX aan toe."

#: A.15-performance.md:74
msgid ""
"When performing, working with simple lines of code in this way means that an a"
"udience new to Sonic Pi has a good chance to follow what you're doing and rela"
"te the code that they can read to the sounds they are hearing."
msgstr ""
"Werken met eenvoudige regels code tijdens een uitvoering, betekent hier dat ee"
"n publiek dat niet vertrouwd is met Sonic Pi, een goede kans maakt, te begrijp"
"en wat jij aan het doen bent, en de code kunnen koppelen en lezen aan de klank"
" die ze horen."

#: A.15-performance.md:80
msgid "3. Master Live Loops"
msgstr "3.Live Loops Masteren"

#: A.15-performance.md:82
msgid ""
"When working with more rhythmic music, it can often be hard to manually trigge"
"r everything and keep good time. Instead, it is often better to use a `live_lo"
"op`. This provides repetition for your code whilst also giving the ability to "
"edit the code for the next time round the loop. They also will run at the same"
" time as other `live_loop`s which means you can layer them together both with "
"each other and manual code triggers. Take a look at section 9.2 of the built-i"
"n tutorial for more information about working with live loops."
msgstr ""
"Als je eerder met ritmische muziek werkt, kan het dikwijls moeilijk zijn om al"
"les manueel te activeren en hierin een goeie timing te houden. In plaats daarv"
"an is het dikwijls beter om een `live_loop`te gebruiken. Het geeft herhaling a"
"an je code en geeft je ook de mogelijkheid de code te bewerken voor de volgend"
"e cyclus van een loop. Deze lopen samen met andere `live_loop`s, wat betekent "
"dat je deze kan lagen met elkaar en manueel triggers codeert. Bekijk sectie 9."
"2 van de ingebouwde handleiding om meer over live loops te weten te komen."

#: A.15-performance.md:91
msgid ""
"When performing, remember to make use of `live_loop`'s `sync:` opt to allow yo"
"u to recover from accidental runtime mistakes which stop the live loop running"
" due to an error. If you already have the `sync:` opt pointing to another vali"
"d `live_loop`, then you can quickly fix the error and re-run the code to re-st"
"art things without missing a beat."
msgstr ""
"Denk eraan om, bij een uitvoering, gebruikt te maken van de  `sync:` optie van"
" `live_loop`om te kunnen herstellen van een accidentele doorloop die de live l"
"oop stopt door een fout. Als je de `sync:` optie laat verwijzen naar een ander"
"e geldige `live_loop`, kan je snel de fout herstellen en de code te herstarten"
" zonder een tel te missen."

#: A.15-performance.md:97
#, fuzzy
msgid "4. Use the Main Mixer"
msgstr "4. De Master Mixer Gebruiken"

#: A.15-performance.md:99
#, fuzzy
msgid ""
"One of Sonic Pi's best kept secrets is that it has a main mixer through which "
"all sound flows. This mixer has both a low pass filter and a high pass filter "
"built-in, so you can easily perform global modifications to the sound. The mai"
"n mixer's functionality can be accessed via the fn `set_mixer_control!`. For e"
"xample, whilst some code is running and making sound, enter this into a spare "
"buffer and hit `Run`:"
msgstr ""
"Een van Sonic Pi's best bewaarde geheimen, is dat deze een master mixer heeft,"
" waar het geluid doorgaat. Deze mixer heeft zowel een low pass- als een high p"
"ass filter ingebouwd, zodat je makkelijk het globale geluid kan modificeren. D"
"e functies van de master mixer is toegankelijk via de fn `set_mixer_control!`."
" Gebruik bijvoorbeeld het volgende, terwijl je de code loopt en hoort, in een "
"vrije buffer, en druk op `Afspelen`:"

#: A.15-performance.md:107
msgid "` set_mixer_control! lpf: 50 `"
msgstr "` set_mixer_control! lpf: 50 `"

#: A.15-performance.md:111
msgid ""
"After you run this code, all existing and new sounds will have a low pass filt"
"er applied to them and will therefore sound more muffled. Note that this means"
" that the new mixer values stick until they are changed again. However, if you"
" want, you can always reset the mixer back to its default state with `reset_mi"
"xer!`. Some of the currently supported opts are: `pre_amp:`, `lpf:` `hpf:`, an"
"d `amp:`. For the full list, see the built-in docs for `set_mixer_control!`."
msgstr ""
"Nadat je deze code uitvoert, worden alle bestaande en nieuwe geluiden van een "
"low pass filter voorzien en daarom zal het geluid nu meer gedempt zijn. Merk o"
"p, dat dit betekent, dat de waarden van nieuwe mixer blijvend zijn, totdat ze "
"weer veranderd worden. Je kan echter, als je wil, altijd opnieuw de mixer teru"
"g naar de standaard instelling zetten met `reset_mixer!`. Een aantal van de hu"
"idige ondersteunde opts zijn: `pre_amp:`, `lpf:` op hpf:` en `amp:`. Voor de v"
"olledige lijst, zie de ingebouwde handleiding voor `set_mixer_control!`."

#: A.15-performance.md:119
msgid ""
"Use the mixer's `*_slide` opts to slide one or many opts values over time. For"
" example, to slowly slide the mixer's low pass filter down from the current va"
"lue to 30, use the following:"
msgstr ""
"Gebruik de `*_slide` opts van de mixer om tussen een of meerdere opt waarden t"
"e schuiven. Om bijvoorbeeld langzaam de waarde van de mixer's low pass filter "
"van de huidige waarde naar 30 te brengen, gebruik het volgende:"

#: A.15-performance.md:123
#, no-wrap
msgid "set_mixer_control! lpf_slide: 16, lpf: 30"
msgstr "set_mixer_control! lpf_slide: 16, lpf: 30"

#: A.15-performance.md:127
msgid "You can then slide quickly back to a high value with:"
msgstr "Je kan dan snel terug naar boven schuiven voor een hogere waarde met:"

#: A.15-performance.md:129
#, no-wrap
msgid "set_mixer_control! lpf_slide: 1, lpf: 130"
msgstr "set_mixer_control! lpf_slide: 1, lpf: 130"

#: A.15-performance.md:133
msgid ""
"When performing, it's often useful to keep a buffer free for working with the "
"mixer like this."
msgstr ""
"Als u optreed is het nuttig om een lege buffer vrij te houden om zoals hier me"
"t de mixer te werken."

#: A.15-performance.md:136
msgid "5. Practice"
msgstr "5. Oefening"

#: A.15-performance.md:138
msgid ""
"The most important technique for live coding is practice. The most common attr"
"ibute across professional musicians of all kinds is that they practice playing"
" with their instruments - often for many hours a day. Practice is just as impo"
"rtant for a live coder as a guitarist. Practice allows your fingers to memoris"
"e certain patterns and common edits so you can type and work with them more fl"
"uently. Practice also gives you opportunities to explore new sounds and code c"
"onstructs."
msgstr ""
"De meest belangrijke techniek voor live coding is oefening. Het meest gezamenl"
"ijke kenmerk van professionele muzikanten  is dat ze het bespelen van hun inst"
"rumenten - vaak vele uren per dag, oefenen. Oefening is net zo belangrijk voor"
" een live-coder als voor een gitarist. Oefening laten uw vingers bepaalde patr"
"onen  en veel voorkomende bewerkingen onthouden, zodat je deze kan typen, en j"
"e meer vloeiend met hen kan werken . Het oefenen geeft je ook de mogelijkheid "
"nieuwe klanken en constructies te kunnen gaan verkennen ."

#: A.15-performance.md:146
msgid ""
"When performing, you'll find the more practice you do, the easier it will be f"
"or you to relax into the gig. Practice will also give you a wealth of experien"
"ce to draw from. This can help you understand which kinds of modifications wil"
"l be interesting and also work well with the current sounds."
msgstr ""
"Bij het uitvoeren, zal je zien dat hoe meer oefening je doet, hoe makkelijker "
"het voor je zal zijn om te ontspannen bij het optreden. Oefening zal je ook ee"
"n schat aan ervaring geven, om uit te putten. Dit kan je helpen te begrijpen w"
"elke soorten wijzigingen interessant zullen zijn en goed werken met de huidige"
" \"sound\"."

#: A.15-performance.md:154
#, fuzzy
msgid ""
"This month, instead of giving you a final example that combines all the things"
" discussed, let's part by setting down a challenge. See if you can spend a wee"
"k practicing one of these ideas every day. For example, one day practice manua"
"l triggers, the next do some basic `live_loop` work and the following day play"
" around with the main mixer. Then repeat. Don't worry if things feel slow and "
"clunky at first - just keep practicing and before you know it you'll be live c"
"oding for a real audience."
msgstr ""
"In plaats van je een laatste Voorbeeld te geven, waarin alle aangeleerde dinge"
"n worden gecombineerd, laten we deze maand afscheid nemen door je een uitdagin"
"g te laten aangaan. Kijk of je een week lang al deze ideeën kan oefenen. Bijvo"
"orbeeld, de ene dag oefen je alle manuele triggers, de volgende dag wat `live_"
"loop` basiswerk en de volgende dag speel je met de master mixer. Dan herhaal j"
"e dit. Maak je geen zorgen dat dit eest met horten en stoten gaat, blijf oefen"
"en en voor je het weet ben je echt voor een publiek aan het live coden."

#: A.16-practice.md:1
msgid "A.16 How to Practice Live Coding"
msgstr "A. 16 Hoe Live Coding te oefenen"

#: A.16-practice.md:3
msgid "8 Tips for Live Coding Practice"
msgstr "8 Tips om Live-Coding te oefenen"

#: A.16-practice.md:5
msgid ""
"Last month we took a look at five important techniques for mastering live codi"
"ng - in other words, we explored how we could use Sonic Pi to approach code in"
" the same way we would approach a musical instrument. One of the important con"
"cepts that we discussed was practice. This month we're going to take a deeper "
"dive into understanding why live coding practice is important and how you migh"
"t start."
msgstr ""
"Vorige maand namen we een kijkje naar vijf belangrijke technieken om live-codi"
"ng te beheersen  - in andere woorden, we onderzocht hoe we gebruik kunnen make"
"n van Sonic Pi en de code te benaderen op eenzelfde manier als een muziekinstr"
"ument. Een van de belangrijkste concepten die we besproken hebben, is deze van"
" oefening. Deze maand gaan we hier dieper op in, om te begrijpen waarom het oe"
"fenen van live coding zo belangrijk is en hoe je eraan zou kunnen beginnen."

#: A.16-practice.md:13
msgid "Practice regularly"
msgstr "Regelmatig oefenen"

#: A.16-practice.md:15
msgid ""
"The most important piece of advice is to make sure you practice regularly. As "
"a rule I typically practice for 1-2 hours a day, but 20 mins is just fine when"
" you're starting out. Little but often is what you're aiming for - so if you c"
"an only manage 10 minutes, that's a great start."
msgstr ""
"Het belangrijkste advies is om ervoor te zorgen dat je regelmatig oefent. Als "
"regel oefen ik meestal  1-2 uur per dag, maar 20 minuten is prima wanneer je b"
"egint. Kleine beetjes maar wel vaak is waar je naar zou willen streven - dus a"
"ls het je lukt slechts 10 minuten, is al een goede start."

#: A.16-practice.md:21
msgid ""
"Practice tip #1 - start to develop a practice routine. Find a nice time in the"
" day that works for you and try and practice at that time as many days of the "
"week as you can. Before long you'll be looking forward to your regular session"
"."
msgstr ""
"Oefening tip #1 Begin een routine om te oefenen op te bouwen. Bepaal een leuk "
"tijdstip, dat jou het beste uitkomt, om zoveel mogelijk dagen in de week te ku"
"nnen oefenen. Het zal niet lang duren eer je naar je dagelijkse sessie uitkijk"
"t."

#: A.16-practice.md:27
msgid "Learn to Touch Type"
msgstr "Leer blind typen"

#: A.16-practice.md:29
msgid ""
"If you watch a professional musician performing on stage you'll likely notice "
"a few things. Firstly, when they play they don't stare at their instrument. Th"
"eir fingers, arms and bodies know which keys to press, strings to pluck or dru"
"ms to hit without them having to think about it too much. This is known as \"mu"
"scle memory\" and although it might sound like something only professionals can"
" do - it's just the same as when you first learned to walk or ride a bike - pr"
"acticing through repetition. Live coders use muscle memory to free their minds"
" from having to think about where to move their fingers so they can focus on t"
"he music. This is called touch-typing - typing without having to look at the k"
"eyboard."
msgstr ""
"Als je een professionele muzikant op het podium ziet ,zal je waarschijnlijk ee"
"n paar dingen merken. Ten eerste, als ze spelen staren ze niet zo overduidelij"
"k op hun instrument. Hun vingers, armen en lichamen weten welke toetsen, snare"
"n te plukken of drums te raken zonder hier veel over  na te denken. Dit is bek"
"end als \"muscle memory\" (spier geheugen) en hoewel dit misschien klinkt als ie"
"ts dat alleen professionals kunnen doen - het is net hetzelfde als wanneer je "
"voor het eerst geleerd hebt om te lopen of om fiets te rijden- oefenen door mi"
"ddel van herhaling. Live programmeurs gebruiken spier geheugen om niet na te m"
"oeten denken over waar hun vingers te zetten, zodat ze zich kunnen concentrere"
"n op de muziek. Dit is de zogenaamde touch-typen - typen zonder te kijken naar"
" het toetsenbord."

#: A.16-practice.md:41
msgid ""
"Practice tip #2 - learn how to touch type. There are many apps, websites and e"
"ven games which can help you achieve this. Find one you like the look of and s"
"tick at it until you can code without looking down."
msgstr ""
"Oefening tip #2 - leer blind typen. Er zijn vele apps, websites en zelfs games"
" die jou daarbij kunnen helpen. Kies er een die er voor jou goed uitziet en bl"
"ijf deze gebruiken tot je code kan typen en niet meer hoeft te kijken."

#: A.16-practice.md:46
msgid "Code whilst standing"
msgstr "Codeer terwijl je rechtstaat"

#: A.16-practice.md:48
msgid ""
"The body of a musician is conditioned for playing their instrument. For exampl"
"e, a trumpet player needs to be able to blow hard, a guitar player needs to be"
" able to grip the fretboard with strength and a drummer needs to be able to co"
"ntinually hit the drums for long periods of time. So, what's physical about li"
"ve coding? Just like DJs, live coders typically perform whilst standing up and"
" some even dance whilst they code! If you practice live coding whilst sitting "
"at a desk and then have to get up and stand at a gig, you'll likely find the d"
"ifference very difficult and frustrating."
msgstr ""
"Het lichaam van een muzikant is geconditioneerd naar het spelen van hun instru"
"ment. Zo moet bijvoorbeeld een trompettist hard kunnen blazen, een gitarist zi"
"jn greep krachtig kunnen zijn op het fretboard  en een drummer de drums voor l"
"angere tijd kunnen slaan. Dus, wat is het fysieke aan live coding? Net als DJs"
", zullen live coders doorgaans rechtstaan bij een optreden, en sommige zullen "
"zelfs dansen terwijl ze coden! Als je  live coden oefent terwijl je zittend ac"
"hter een bureau zit en dan moet rechtstaan op een optreden, zal je het verschi"
"l zeer moeilijk en frustrerend vinden."

#: A.16-practice.md:58
msgid ""
"Practice tip #3 - stand whilst you practice. The easiest way to do this is to "
"use a standing height desk. However, if like me you don't have one at home, th"
"ere's a couple of low-fi options. The approach I take is to use an ironing boa"
"rd which happens to work rather well. Another is to stack some boxes or large "
"books on a normal desk and place your keyboard on top of that. Also, make sure"
" you stretch before you start practicing and try and dance a little during the"
" session. Remember, nobody is watching you, so have fun and you'll feel much m"
"ore natural on stage."
msgstr ""
"Oefening tip #4 - Sta recht als je oefent.  De eenvoudigste manier om dit te d"
"oen is gebruik te maken van een bureau op stahoogte . Maar als je net zoals ik"
" er thuis geen hebt, zijn er wel een paar low-fi opties. Ik gebruik bijvoorbee"
"ld een strijkplank en dat werkt bijzonder goed voor me. Een andere optie is, w"
"at dozen op elkaar stapelen, of een stapel boeken op een gewone tafel te schik"
"ken, en je keyboard hierboven op te zetten. Vergeet niet te stretchen voor je "
"begint en probeer ook een beetje te dansen tijdens de sessie. Denk eraan, niem"
"and kijkt, amuseer je, op het podium zal het later veel meer naturel aanvoelen"
"."

#: A.16-practice.md:68
msgid "Practice setting up"
msgstr "Oefen het opstellen"

#: A.16-practice.md:70
msgid ""
"Most instruments require some assembly and tuning before they can be played. U"
"nless you're a rockstar with a bus full of roadies, you'll have to set up your"
" own instrument before your gig. This is often a stressful time and it is easy"
" for problems to occur. One way to help with this is to incorporate the setup "
"process into your practice sessions."
msgstr ""
"De meeste instrumenten vereisen enige montage en moeten gestemd, voordat ze af"
"gespeeld kunnen worden. Tenzij je een rockstar met een bus vol roadies hebt, m"
"oet je je eigen instrument voor je optreden  klaarmaken. Dit is vaak een stres"
"svol moment en problemen kunnen hier ook makkelijk de kop opsteken. Een manier"
" om dit te verhelpen is het setup-proces in uw oefen sessies in te bouwen."

#: A.16-practice.md:76
msgid ""
"Practice tip #4 - treat setting up as an important part of your practice. For "
"example, have a box or bag that you can keep your Raspberry Pi and keyboard in"
" etc. Before each practice session, take out all the parts, connect everything"
", and work through the boot process until you have Sonic Pi running and can ma"
"ke sounds. Once you've finished practicing, take the time to carefully pack ev"
"erything away afterwards. This may take some time at first, but before long yo"
"u'll be able to setup and pack everything away incredibly quickly without havi"
"ng to think about it."
msgstr ""
"Oefen tip #4 - Behandel het opstellen als een belangrijk onderdeel van je oefe"
"ning. Hou je Raspberry Pi en je toetsenbord enz... in een een doos of tas. Pak"
" deze dan voor elke oefening uit en stel ze op en start de computer en Sonic P"
"i op en je geluid hebt. Als je oefening gedaan is, neem je de tijd om alles we"
"er zorgvuldig in te pakken. In het begin zal dit traag gaan, maar je zal zien,"
" dat je na een tijdje alles snel kan inpakken, zonder hier zelfs maar over na "
"te hoeven denken."

#: A.16-practice.md:87
msgid "Experiment Musically"
msgstr "Experimenteer op muzikaal vlak"

#: A.16-practice.md:89
msgid ""
"Once you've set up and are ready to start making music, you might find yoursel"
"f struggling to know where to start. One problem many people face is that they"
" might have a good idea of the kinds of sounds they want to make, but are frus"
"trated that they can't produce them. Some people don't even know what kind of "
"sounds they want to make! The first thing to do is not to worry - this is very"
" common and happens to every musician - even if they've been practicing for a "
"long time. It is much more important to be making sounds you don't like than n"
"ot making any sounds at all."
msgstr ""
"Eens je bent opgesteld en klaar om muziek te maken, kan je misschien worstelen"
" met waar te beginnen. Een probleem dat veel mensen hebben is dat ze wel goed "
"weten welke klanken ze willen maken, maar gefrustreerd raken omdat ze niet goe"
"d weten hoe ze deze moeten maken. Sommige mensen weten zelfs niet welke klanke"
"n te gaan maken! Maak je hier vooral geen zorgen over, dit komt heel vaak voor"
" en het gebeurt bij elke , zelfs doorwinterde muzikant. Het is belangrijker om"
" klanken te maken die je niet mooi vind, dan helemaal niets te maken."

#: A.16-practice.md:99
msgid ""
"Practice tip #5 - spend time making sounds and music you don't like. Try to ma"
"ke time to explore new sounds and ideas. Don't worry that it might sound terri"
"ble if it's not the style you're looking for. When you're experimenting like t"
"his you increase the chance of stumbling over a sound or combination of sounds"
" which you love! Even if 99% of the sounds you make are bad, that 1% might be "
"the riff or intro to your new track. Forget the things you don't like and reme"
"mber the parts you do. This is even easier when you're making music with code "
"- just hit save!"
msgstr ""
"Oefening tip #5 - Besteed tijd aan het maken van klanken en muziek die je niet"
" aanstaan. Maak tijd om nieuwe klanken en ideeën te ondekken. Maak je geen zor"
"gen als het afschuwelijk klinkt en het zelfs de stijl niet is waar je naar zoe"
"kt. Door te experimenteren vergroot je de kans om op iets te stuiten op een kl"
"ank of klankcombinatie die je wel graag hoort! Zelfs als 99% van de geluiden d"
"ie je maakt slecht zijn, die 1% is misschien de riff of intro van jouw nieuwe "
"track. Vergeet de delen die je niet goed vind en denk aan de delen die je wel "
"mooi vindt. Dat is zelfs makkelijker bij het maken van muziek met code- druk g"
"ewoon op bewaren!"

#: A.16-practice.md:110
msgid "Hear the Code"
msgstr "Hoor de code"

#: A.16-practice.md:112
#, fuzzy
msgid ""
"Many musicians can look at a musical score and hear the music in their head wi"
"thout having to play it. This is a very useful skill and it's well worth incor"
"porating into your live coding practice sessions. The important point is to be"
" able to have some understanding of what the code is going to sound like. You "
"don't need to be able to hear it exactly in your head, but instead it's useful"
" to know if the code is going to be fast, slow, loud, rhythmic, melodic, rando"
"m, etc. The final goal is then to be able to reverse this process - to be able"
" to hear music in your head and know what code to write to make it. It may tak"
"e you a long time to master this, but once you do, you'll be able to improvise"
" on stage and express your ideas fluently."
msgstr ""
"Veel muzikanten kunnen naar bladmuziek kijken en de muziek in hun hoofd horen,"
" zonder deze te moeten spelen. Dit is een zeer nuttige vaardigheid en het is d"
"e moeite waard om deze te integreren in je oefen sessies live-coding."

#: A.16-practice.md:124
msgid ""
"Practice tip #6 - write some code into Sonic Pi but don't hit the Run button. "
"Instead, try to imagine what sound it is going to produce. Then, hit Run, list"
"en, and think about what you got right and what you didn't. Keep repeating thi"
"s until it become a natural part of your coding process. When I practice I nor"
"mally have a good idea of what the code will sound like. However, I still am o"
"ccasionally surprised, and then I'll stop and spend some time thinking about w"
"hy I was wrong. Each time this happens, I learn new tricks which allow me to e"
"xpress myself in new ways."
msgstr ""
"Oefen tip #6 - Schrijf wat code in Sonic Pi, maar druk niet op afspelen. Probe"
"er je in plaats daarvan, voor te stellen, welke klank deze gaat produceren. Kl"
"ik dan op Afspelen, luister, en bekijk dan wat je goed had en wat je niet goed"
" had. Herhaal dit tot dit een tweede natuur word tijdens je coding sessies. Al"
"s ik oefen heb ik er normaal gezien altijd een goed idee van, hoe de code gaat"
" klinken. Af en toe ben ik echter ook verrast, en besteed ik er even aandacht "
"aan, waarom ik verkeerd was. Elke keer als dit gebeurt, leer ik een nieuw truc"
"je waardoor ik mij op een nieuwe manier kan uiten."

#: A.16-practice.md:134
msgid "Remove all distractions"
msgstr "Verwijder alle afleiding"

#: A.16-practice.md:136
msgid ""
"A common problem when practicing is to become distracted with other things. Pr"
"acticing is hard and requires real discipline regardless of the kind of music "
"you're making - from jazz to classical to EDM. If you're struggling to get sta"
"rted or make progress, it's often too easy to hop on social media, or look som"
"ething up on the internet etc. If you've set yourself a target of 20 minutes o"
"f practice, it's important to try and spend all that time being as productive "
"as possible."
msgstr ""
"Een veel voorkomend probleem tijdens het oefenen is dat je makkelijk door ande"
"re dingen word afgeleid. Oefenen is moeilijk en vergt een echte discipline,  o"
"ngeacht het soort muziek dat je maakt - van jazz tot klassiek, EDM. Als je erm"
"ee worstelt om aan de slag te gaan of vooruitgang te boeken, is het dikwijls v"
"eel makkelijker om even een kijkje te gaan nemen op sociale media of iets op t"
"e gaan zoeken op het internet enz... Als je jezelf een oefentijd van 20 minute"
"n voorhoud, is het belangrijk om deze zo productief mogelijk proberen te maken"
"."

#: A.16-practice.md:144
msgid ""
"Practice tip #7 - before you start practicing remove as many distractions as p"
"ossible. For example, disconnect from the internet, put your phone in another "
"room and try to practice in a quiet place where you're unlikely to be disturbe"
"d. Try to focus on coding music and you can return to your distractions when y"
"ou've finished."
msgstr ""
"Oefen tip #7 - Voor je je oefening begint, doe je zoveel mogelijke afleidingen"
" weg. Zet bijvoorbeeld je wi-fi uit, leg je gsm in een andere kamer, en probee"
"r te oefenen op een rustige plaats, waar je niet gestoord kan worden. Probeer "
"je op het coden van muziek te focussen, je kan later, wanneer je klaar bent, n"
"aar je afleidingen terugkeren ."

#: A.16-practice.md:151
msgid "Keep a practice diary"
msgstr "Hou een oefenboek bij"

#: A.16-practice.md:153
msgid ""
"When you are practicing, you'll often find your mind is full of new exciting i"
"deas - new musical directions, new sounds to try out, new functions to write, "
"etc. These ideas are often so interesting that you might stop what you're doin"
"g and start working on the idea. This is another form of distraction!"
msgstr ""
"Wanneer je oefent, zult je vaak merken dat je geest vol zit met spannende nieu"
"we ideeën - nieuwe muzikale richtingen, nieuwe geluiden om uit te proberen, ni"
"euwe functies om te schrijven, enz. Deze ideeën zijn vaak zo interessant dat j"
"e zou willen stoppen met wat je aan het doen bent en begint te werken aan dat "
"idee. Dit is een andere vorm van afleiding!"

#: A.16-practice.md:159
msgid ""
"Practice tip #8 - keep a practice diary by your keyboard. When you get an exci"
"ting new idea, temporarily pause your practice session, quickly jot the idea d"
"own, then forget about it and carry on practicing. You can then spend some qua"
"lity time thinking about and working on your ideas after you've finished pract"
"icing."
msgstr ""
"Oefen tip #8 - Hou een oefendagboek bij naast je keyboard. Wanneer je een gaaf"
" idee krijgt, pauzeer de oefening even en schrijf je idee op, vergeet deze dan"
" en oefen verder. Je kan er dan extra tijd besteden aan je ideeën en deze uitw"
"erken na je oefening."

#: A.16-practice.md:168
msgid ""
"Try to establish a practice routine which incorporates as many of these ideas "
"as possible. Try to keep the sessions as fun as possible but be aware that som"
"e practice sessions will be hard and feel a little like work. However, it will"
" all be worth it once you've created your first piece or given your first perf"
"ormance. Remember, practice is the key to success!"
msgstr ""
"Probeer ook zoveel mogelijk routine te krijgen in het oefenen van deze nieuwe "
"ideeën. Probeer de oefensessies zo leuk mogelijk te houden, maar wees er wel v"
"an bewust dat sommige sessies zwaar zullen zijn en als hard werken aanvoelen. "
"Het zal het allemaal waard zijn als je je eerste stuk hebt gemaakt en je eerst"
"e optreden hebt gegeven. Den eraan, oefening is de sleutel naar succes!"

#: A.17-sample-stretching.md:1
msgid "A.17 Sample Stretching"
msgstr "A.12 Sample Stretching"

#: A.17-sample-stretching.md:3
msgid "Sample Stretching"
msgstr "Sample Stretching"

#: A.17-sample-stretching.md:5
msgid ""
"When people discover Sonic Pi, one of the first things they learn is how simpl"
"e it is to play pre-recorded sounds using the `sample` function. For example, "
"you can play an industrial drum loop, hear the sound of a choir or even listen"
" to a vinyl scratch all via a single line of code. However, many people don't "
"realise that you can actually vary the speed that the sample is played back at"
" for some powerful effects and a whole new level of control over your recorded"
" sounds. So, fire up a copy of Sonic Pi and let's get started stretching some "
"samples!"
msgstr ""
"Wanneer mensen Sonic Pi ontdekken, een van de eerste dingen die ze leren, hoe "
"eenvoudig het is om vooraf opgenomen geluiden af te spelen met behulp van de `"
"sample` functie. Je kan bijvoorbeeld een industriële drumloop afspelen, het ge"
"luid van een koor horen of zelfs naar een kras op vinyl luisteren, allemaal vi"
"a een enkele regel code. Veel mensen beseffen echter niet dat je eigenlijk de "
"snelheid waarmee de sample wordt afgespeeld kan variëren wat voor een krachtig"
"e effect kan zorgen en de controle over je opgenomen geluiden naar een nieuw n"
"iveau kan tillen . Dus, start een kopie van Sonic Pi en laten ons aan de slag "
"gaan met wat sample stretching!"

#: A.17-sample-stretching.md:14
msgid "Slowing Samples Down"
msgstr "Samples vertragen"

#: A.17-sample-stretching.md:16
msgid "To modify the playback rate of a sample we need to use the `rate:` opt:"
msgstr ""
"Om de afspeelsnelheid van de sample te wijzigen moeten we de `rate:` optie geb"
"ruiken:"

#: A.17-sample-stretching.md:18
#, no-wrap
msgid "sample :guit_em9, rate: 1"
msgstr "sample :guit_em9, rate: 1"

#: A.17-sample-stretching.md:20
msgid ""
"If we specify a `rate:` of `1` then the sample is played back at the normal ra"
"te. If we want to play it back at half speed we simply use a `rate:` of `0.5`:"
msgstr ""
"Als we een `rate:` waarde van `1` toekennen wordt de sample op de normale snel"
"heid afgespeeld. Als we deze op halve snelheid willen afspelen gebruiken we si"
"mpelweg een `rate:` van`0.5`:"

#: A.17-sample-stretching.md:27
msgid ""
"Notice that this has two effects on the audio. Firstly the sample sounds lower"
" in pitch and secondly it takes twice as long to play back (see the sidebar fo"
"r an explanation of why this is the case). We can even choose lower and lower "
"rates moving towards `0`, so a `rate:` of `0.25` is a quarter speed, `0.1` is "
"a tenth of the speed, etc. Try playing with some low rates and see if you can "
"turn the sound into a low rumble."
msgstr ""
"Merk op dat dit twee gevolgen voor de audio heeft. Ten eerste zullen de sample"
"s lager in toonhoogte klinken en ten tweede duurt twee keer zo lang om ze af t"
"e spelen (Zie de zijbalk voor de uitleg  waarom dit het geval is). We kunnen z"
"elfs nog lager kiezen en lagere snelheden, naar '0' toe, een `rate:` van '0,25"
"' is de kwart snelheid, '0.1' is voor een tiende van de snelheid, enz. Probeer"
" af te spelen met enkele lage snelheden en zie of je het geluid naar een laag "
"gerommel kan omzetten."

#: A.17-sample-stretching.md:34
msgid "Speeding Samples Up"
msgstr "Samples versnellen"

#: A.17-sample-stretching.md:36
msgid ""
"In addition to making the sound longer and lower using a small rate, we can us"
"e higher rates to make the sound shorter and higher. Let's play with a drum lo"
"op this time. First, take a listen to how it sounds at the default rate of `1`"
":"
msgstr ""
"Naast het maken van langere, lager klinkende samples door een kleiner waarde v"
"oor de snelheid te gebruiken, kunnen we hogere waarde ingeven om kortere en ho"
"ger klinkende geluiden te maken. Laten we dit nu even met een drumloop doen. H"
"oor even hoe dit klinkt met de standaard snelheid van `1`:"

#: A.17-sample-stretching.md:41
#, no-wrap
msgid "sample :loop_amen, rate: 1"
msgstr "sample :loop_amen, rate: -1"

#: A.17-sample-stretching.md:44
msgid "Now, let's speed it up a little:"
msgstr "Nu versnellen we deze een beetje:"

#: A.17-sample-stretching.md:48
msgid ""
"Ha! We just moved musical genres from old-skool techno to jungle. Notice how t"
"he pitch of each drum hit is higher as well as how the whole rhythm speeds up."
" Now, try even higher rates and see how high and short you can make the drum l"
"oop. For example, if you use a rate of `100`, the drum loop turns into a click"
"!"
msgstr ""
"Ha! Nu verhuisden we naar een ander muzikaal genre, van old-skool techno naar "
"jungle. Merk hierbij op dat zowel elke drumslag hoger klinkt als het gehele ri"
"tme versnelt. Probeer nu nog hogere waarden uit en zie hoe hoog en hoe kort je"
" de drumloop kan maken. Als je bijvoorbeeld een snelheid van `100`gebruikt, ve"
"randert de drumloop naar een enkele klik!"

#: A.17-sample-stretching.md:54
msgid "Reverse Gear"
msgstr "In achteruit versnelling"

#: A.17-sample-stretching.md:56
msgid ""
"Now, I'm sure many of you are thinking the same thing right now... \"what if yo"
"u use a negative number for the rate?\". Great question! Let's think about this"
" for a moment. If our `rate:` opt signifies the speed with which the sample is"
" played back, `1` being normal speed, `2` being double speed, `0.5` being half"
" speed, `-1` must mean backwards! Let's try it on a snare. First, play it back"
" at the normal rate:"
msgstr ""
"Ik weet zeker dat velen nu gaan denken... \"wat als we nu eens een negatieve wa"
"arde gebruiken voor de `rate:`?\" Goeie vraag! Als `1`de normale snelheid is en"
" ´2´dubbele snelheid en waarbij `0,5` de halve snelheid is, dan moet `-1`achte"
"rwaarts  zijn! Laten we dit met een snare uitproberen. Laten we deze eerst op "
"normale snelheid afspelen:"

#: A.17-sample-stretching.md:63
#, no-wrap
msgid "sample :elec_filt_snare, rate: 1"
msgstr "sample :elec_filt_snare, rate: 1"

#: A.17-sample-stretching.md:65
msgid "Now, play it backwards:"
msgstr "Cool! Het speelt achterstevoren:"

#: A.17-sample-stretching.md:67
#, no-wrap
msgid "sample :elec_filt_snare, rate: -1"
msgstr "sample :elec_filt_snare, rate: -1"

#: A.17-sample-stretching.md:69
msgid ""
"Of course, you can play it backwards twice as fast with a rate of `-2` or back"
"wards at half speed with a rate of `-0.5`. Now, play around with different neg"
"ative rates and have fun. It's particularly amusing with the `:misc_burp` samp"
"le!"
msgstr ""
"Natuurlijk kan je ook achterwaarts dubbel zo snel met een waarde van `-2` of a"
"chterwaarts op halve snelheid met `-0,5`. Speel nu even met verschillende nega"
"tieve waarden en amuseer je hiermee. Het is bijzonder grappig met de `:misc_bu"
"rp` sample!"

#: A.17-sample-stretching.md:75
#, fuzzy
msgid "Sample, Rate and Pitch"
msgstr "Sample, Rate and Pitch [Sidebar]"

#: A.17-sample-stretching.md:77
msgid ""
"One of the effects of rate modification on samples is that faster rates result"
" in the sample sounding higher in pitch and slower rates result in the sample "
"sounding lower in pitch. Another place you may have heard this effect in every"
" day life is when you're cycling or driving past a beeping pedestrian crossing"
" - as you're heading towards the sound source the pitch is higher than when yo"
"u're moving away from the sound - the so-called Doppler effect. Why is this?"
msgstr ""
"Een van de effecten van het modificeren van de snelheid van samples, is dat bi"
"j hogere snelheden de klank hoger klinkt en bij trage snelheid lager. In het a"
"lledaagse leven hebt je misschien ook al eens opgemerkt dat wanneer een zieken"
"wagen voorbij rijd, als deze aankmt gereden zal de sirene hoger klinken dan wa"
"nneer deze voorbij is gereden- het zogenaamde Doppler effect. Waarom gebeurd d"
"it?"

#: A.17-sample-stretching.md:85
msgid ""
"Let's consider a simple beep which is represented by a sine wave. If we use an"
" oscilloscope to plot a beep, we'll see something like Figure A. If we plot a "
"beep an octave higher, we'll see Figure B and an octave lower will look like F"
"igure C. Notice that the waves of higher notes are more compact and the waves "
"of lower notes are more spread out."
msgstr ""
"Laten we even een simpele biep nemen die wordt vertegenwoordigd door een sinus"
"golf. Als we een oscilloscoop gebruiken om de grafische weergave van deze biep"
" te kunnen zien krijgen we zoiets als Figuur B en bij een octaaf lager zien we"
" zoiets als Figuur C. Merk op dat de golven van hogere noten compacter zijn en"
" dat de golven van lagere noten meer uitgespreid zijn."

#: A.17-sample-stretching.md:91
msgid ""
"A sample of a beep is nothing more than a lot of numbers (x, y, coordinates) w"
"hich when plotted onto a graph will re-draw the original curves. See figure D "
"where each circle represents a coordinate. To turn the coordinates back into a"
"udio, the computer works through each x value and sends the corresponding y va"
"lue to the speakers. The trick here is that the rate at which the computer wor"
"ks through the x numbers does not have to be the same as the rate with which t"
"hey were recorded. In other words, the space (representing an amount of time) "
"between each circle can be stretched or compressed. So, if the computer walks "
"through the x values faster than the original rate, it will have the effect of"
" squashing the circles closer together which will result in a higher sounding "
"beep. It will also make the beep shorter as we will work through all the circl"
"es faster. This is shown in Figure E."
msgstr ""
"Een sample van een pieptoon is niets meer dan een heleboel cijfers (x, y, coör"
"dinaten) die wanneer ze uitgezet worden op een grafiek hun oorspronkelijke cur"
"ven laten zien. Zie figuur D waarbij elke cirkel een coördinaat vertegenwoordi"
"gd. Om de coördinaten terug om te zetten in geluid, zet de computer elke x-waa"
"rde en de bijbehorende waarde van y naar de luidsprekers om. De truc hier is d"
"at de afspeelsnelheid waarmee de computer zich door de x-nummers werkt niet de"
"zelfde moet zijn als de snelheid waarmee zij werden geregistreerd. Met andere "
"woorden, kan de ruimte (die de tijd vertegenwoordigen) tussen elke cirkel word"
"en uitgerekt of samengedrukt. Dus, als de computer de x-waarden sneller dan he"
"t oorspronkelijke snelheid doorloopt, zal het het effect van het samendrukken "
"van de cirkels in een hogere klinkende pieptoon resulteren. Het maakt ook de p"
"ieptoon korter maken gezien we sneller door de cirkels lopen. Dit wordt getoon"
"d in figuur E."

#: A.17-sample-stretching.md:105
msgid ""
"Finally, one last thing to know is that a mathematician called Fourier proved "
"that any sound is actually lots and lots of sine waves all combined together. "
"Therefore, when we compress and stretch any recorded sound we're actually stre"
"tching and compressing many sine waves all at the same time in exactly this ma"
"nner."
msgstr ""
"Tot slot, interessant om weten is dat, een wiskundige genaamd Fourier bewees d"
"at elk geluid eigenlijk bestaat uit heel veel sinusgolven. Daarom, als we een "
"opgenomen geluid comprimeren , rekken we vele sinusgolven allemaal op hetzelfd"
"e moment op precies deze manier uit."

#: A.17-sample-stretching.md:111
msgid "Pitch Bending"
msgstr "Pitch Bending"

#: A.17-sample-stretching.md:113
msgid ""
"As we've seen, using a faster rate will make the sound higher in pitch and a s"
"lower rate will make the sound lower in pitch. A very simple and useful trick "
"is to know that doubling the rate actually results in the pitch being an octav"
"e higher and inversely halving the rate results in the pitch being an octave l"
"ower. This means that for melodic samples, playing it alongside itself at doub"
"le/half rates actually sounds rather nice:"
msgstr ""
"Zoals we hebben gezien, zal met een sneller tempo het geluid hoger in toonhoog"
"te, en een trager tempo zal het geluid lager in toonhoogte zijn. Een zeer eenv"
"oudige en nuttige truc is om te weten dat een verdubbeling van de rate waarde,"
" eigenlijk resulteert in een toonhoogte van een octaaf hoger wordt en omgekeer"
"d de halvering van de rate waarde resulteren in een toonhoogte van een octaaf "
"lager. Dit betekent dat voor melodische samples, het naast elkaar afspelen op "
"het dubbel/helft van de rate waarde, deze eigenlijk vrij mooi klinken:"

#: A.17-sample-stretching.md:121
#, no-wrap
msgid ""
"sample :bass_trance_c, rate: 1\n"
"sample :bass_trance_c, rate: 2\n"
"sample :bass_trance_c, rate: 0.5"
msgstr ""
"sample :bass_trance_c, rate: 1\n"
"sample :bass_trance_c, rate: 2\n"
"sample :bass_trance_c, rate: 0.5"

#: A.17-sample-stretching.md:127
msgid ""
"However, what if we just want to alter the rate such that the pitch goes up on"
"e semitone (one note up on a piano)? Sonic Pi makes this very easy via the `rp"
"itch:` opt:"
msgstr ""
"Maar, wat als we gewoon het tempo willen veranderen zodat de toonhoogte stijgt"
" met een halve toon (één noot hoger op een piano)? Sonic Pi maakt dit zeer een"
"voudig via de ' rpitch:' optie:"

#: A.17-sample-stretching.md:131
#, no-wrap
msgid ""
"sample :bass_trance_c\n"
"sample :bass_trance_c, rpitch: 3\n"
"sample :bass_trance_c, rpitch: 7"
msgstr ""
"sample :bass_trance_c\n"
"sample :bass_trance_c, rpitch: 3\n"
"sample :bass_trance_c, rpitch: 7"

#: A.17-sample-stretching.md:137
msgid ""
"If you take a look at the log on the right, you'll notice that an `rpitch:` of"
" `3` actually corresponds to a rate of `1.1892` and a `rpitch:` of `7` corresp"
"onds to a rate of `1.4983`. Finally, we can even combine `rate:` and `rpitch:`"
" opts:"
msgstr ""
"Als je een kijkje neemt op het log aan de rechterkant, zal je merken dat een '"
" rpitch:' van '3' overeenkomt met een snelheid van '1.1892' en een ' rpitch:' "
"van '7' overeenkomt met een snelheid van '1.4983'. Tot slot kunnen we zelfs de"
" ' rate:' en ' rpitch:' optie combineren:"

#: A.17-sample-stretching.md:142
#, no-wrap
msgid ""
"sample :ambi_choir, rate: 0.25, rpitch: 3\n"
"sleep 3\n"
"sample :ambi_choir, rate: 0.25, rpitch: 5\n"
"sleep 2\n"
"sample :ambi_choir, rate: 0.25, rpitch: 6\n"
"sleep 1\n"
"sample :ambi_choir, rate: 0.25, rpitch: 1"
msgstr ""
"sample :ambi_choir, rate: 0.25, rpitch: 3\n"
"sleep 3\n"
"sample :ambi_choir, rate: 0.25, rpitch: 5\n"
"sleep 2\n"
"sample :ambi_choir, rate: 0.25, rpitch: 6\n"
"sleep 1\n"
"sample :ambi_choir, rate: 0.25, rpitch: 1"

#: A.17-sample-stretching.md:155
msgid ""
"Let's take a look at a simple piece which combines these ideas. Copy it into a"
"n empty Sonic Pi buffer, hit play, listen to it for a while and then use it as"
" a starting point for your own piece. See how much fun it is to manipulate the"
" playback rate of samples. As an added exercise try recording your own sounds "
"and play around with the rate to see what crazy sounds you can make."
msgstr ""
"Laat ons even kijken naar een eenvoudig stukje waarbij deze ideeën gecombineer"
"d worden  . Kopieer deze naar een lege Sonic Pi buffer en klik op afspelen, lu"
"ister even en gebruik deze dan als uitgangspunt voor je eigen stuk muziek. Mer"
"k hoe leuk het is om de snelheid van het afspelen van samples te manipuleren. "
"Als extra oefening probeer je je eigen geluiden op te nemen en speel met de ra"
"te waarden om te zien wat voor gekke geluiden je hiermee kan maken."

#: A.17-sample-stretching.md:162
#, no-wrap
msgid ""
"live_loop :beats do\n"
"  sample :guit_em9, rate: [0.25, 0.5, -1].choose, amp: 2\n"
"  sample :loop_garzul, rate: [0.5, 1].choose\n"
"  sleep 8\n"
"end\n"
" \n"
"live_loop :melody do\n"
"  oct = [-1, 1, 2].choose * 12\n"
"  with_fx :reverb, amp: 2 do\n"
"    16.times do\n"
"      n = (scale 0, :minor_pentatonic).choose\n"
"      sample :bass_voxy_hit_c, rpitch: n + 4 + oct\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"
msgstr ""
"live_loop :beats do\n"
"  sample :guit_em9, rate: [0.25, 0.5, -1].choose, amp: 2\n"
"  sample :loop_garzul, rate: [0.5, 1].choose\n"
"  sleep 8\n"
"end\n"
" \n"
"live_loop :melody do\n"
"  oct = [-1, 1, 2].choose * 12\n"
"  with_fx :reverb, amp: 2 do\n"
"    16.times do\n"
"      n = (scale 0, :minor_pentatonic).choose\n"
"      sample :bass_voxy_hit_c, rpitch: n + 4 + oct\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"

#: A.18-additive-synthesis.md:1
msgid "A.18 Sound Design - Additive Synthesis"
msgstr "A.18 Sound Design - Additieve Synthese"

#: A.18-additive-synthesis.md:3
msgid "Additive Synthesis"
msgstr "Additieve Synthese"

#: A.18-additive-synthesis.md:5
#, fuzzy
msgid ""
"This is the first of a short series of articles on how to use Sonic Pi for sou"
"nd design. We'll be taking a quick tour of a number of different techniques av"
"ailable for you to craft your own unique sound. The first technique we'll look"
" at is called *additive synthesis*. This may sound complicated - but if we exp"
"and each word slightly the meaning pops right out. Firstly, additive means a c"
"ombination of things and secondly synthesis means to create sound. Additive sy"
"nthesis therefore means nothing more complicated than *combining existing soun"
"ds to create new ones*. This synthesis technique dates back a very long time -"
" for example, pipe organs in the middle ages had lots of slightly different so"
"unding pipes which you could enable or disable with stops. Pulling out the sto"
"p for a given pipe 'added it to the mix' making the sound richer and more comp"
"lex. Now, let's see how we can pull out all the stops with Sonic Pi."
msgstr ""
"Dit is de eerste van een reeks korte artikeltjes over het gebruik van Sonic Pi"
" bij klankontwerp (Sounddesign). We nemen een rondleiding door een aantal tech"
"nieken die voor je beschikbaar zijn om je eigen unieke klank te ontwikkelen. D"
"e eerste techniek die we zullen bekijken heet * additieve synthese *. Dit kan "
"ingewikkeld klinken - maar als we elk woord even apart bekijken is de betekeni"
"s vrij snel duidelijk. Ten eerste, additief betekent letterlijk de combinatie "
"van een aantal elementen en het tweede woord synthese, betekent geluid creëren"
" . Additieve synthese betekent daarom niets minder dan * bestaande geluiden co"
"mbineren om nieuwe te maken *. Deze synthese techniek dateert al van lang gele"
"den  - bijvoorbeeld pijporgels in de middeleeuwen hadden veel lichtjes verschi"
"llende cillinderpijpen die je  met tussenpozen kan in- of uitschakelen. De sto"
"p uit een bepaalde pijp trekken 'voegt deze aan de mix toe' en maakt het gelui"
"d rijker en complexer. Nu, laten we eens kijken hoe we dat kunnen doen met Son"
"ic Pi."

#: A.18-additive-synthesis.md:21
msgid "Simple Combinations"
msgstr "Eenvoudige combinaties"

#: A.18-additive-synthesis.md:23
msgid ""
"Let's start with the most basic sound there is - the humble pure-toned sine wa"
"ve:"
msgstr ""
"Laten we beginnen met het meest elementaire geluid dat er is - de eenvoudige z"
"uiver gestemde sinus golf:"

#: A.18-additive-synthesis.md:26
#, no-wrap
msgid "synth :sine, note: :d3"
msgstr "synth :sine, note: :d3"

#: A.18-additive-synthesis.md:30
msgid "Now, let's see how this sounds combined with a square wave:"
msgstr "Laten we eens kijken hoe dit klinkt gecombineerd met een blokgolf:"

#: A.18-additive-synthesis.md:32
#, no-wrap
msgid ""
"synth :sine, note: :d3\n"
"synth :square, note: :d3"
msgstr ""
"synth :sine, note: :d3\n"
"synth :square, note: :d3"

#: A.18-additive-synthesis.md:37
msgid ""
"Notice how the two sounds combine to form a new, richer sound. Of course, we d"
"on't have to stop there, we can add as many sounds as we need. However, we nee"
"d to be careful with how many sounds we add together. Just like when we mix pa"
"ints to create new colours, adding too many colours will result in a messy bro"
"wn, similarly - adding too many sounds together will result in a muddy sound."
msgstr ""
"Merk op hoe deze twee geluiden combineren tot een nieuwe, rijker geluid. Natuu"
"rlijk, hoeven we hier nog niet te stoppen, we kunnen zoveel geluiden we willen"
" toevoegen. We moeten echter wel voorzichtig zijn hoe veel geluiden we bij elk"
"aar gaan optellen. Net zoals wanneer we verf maken om  nieuwe kleuren te menge"
"n, het toevoegen van dat beetje teveel kleur zal resulteren in bijvoorbeeld ee"
"n rommelig bruin, evenzo - zal het toevoegen van te veel geluiden resulteren i"
"n een modderig geluid."

#: A.18-additive-synthesis.md:45
msgid "Blending"
msgstr "Mengen"

#: A.18-additive-synthesis.md:47
msgid ""
"Let's add something to make it sound a little brighter. We could use a triangl"
"e wave at an octave higher (for that high bright sound) yet only play it at am"
"p `0.4` so it adds something extra to the sound rather than taking it over:"
msgstr ""
"Laten we iets toevoegen om het geluid een beetje helderder te maken. We zouden"
" een driehoeksgolf kunnen gebruiken van een octaaf hoger (voor dat hoge helder"
"e geluid) voorlopig op amp '0.4' afgesteld om iets extra's toe te voegen aan h"
"et geluid, zo dat dit geluid het niet overheerst:"

#: A.18-additive-synthesis.md:52
#, no-wrap
msgid ""
"synth :sine, note: :d3\n"
"synth :square, note: :d3\n"
"synth :tri, note: :d4, amp: 0.4"
msgstr ""
"synth :sine, note: :d3\n"
"synth :square, note: :d3\n"
"synth :tri, note: :d4, amp: 0.4"

#: A.18-additive-synthesis.md:58
msgid ""
"Now, try creating your own sounds by combining 2 or more synths at different o"
"ctaves and amplitudes. Also, note that you can play around with each synth's o"
"pts to modify each source sound before it is mixed in for even more combinatio"
"ns of sounds."
msgstr ""
"Nu, probeer je eigen geluid te creëren door een combinatie van 2 of meer synth"
"s op verschillende octaven en amplitudes. Merk ook op dat je met elke synth ku"
"nt spelen en elk brongeluid afzonderlijk kan worden gewijzigd voordat het word"
"t gemengd in nog meer combinaties van geluiden."

#: A.18-additive-synthesis.md:64
msgid "Detuning"
msgstr "Detuning (Ontstemmen)"

#: A.18-additive-synthesis.md:66
msgid ""
"So far, when combining our different synths we've used either the same pitch o"
"r switched octave. How might it sound if we didn't stick to octaves but instea"
"d chose a slightly higher or lower note? Let's try it:"
msgstr ""
"Tot nu toe hebben we bij het combineren van onze verschillende synthesizers de"
"zelfde toonhoogte gebruikt of zijn we naar een andere octave overgestapt. Hoe "
"zou het misschien klinken als wij ons niet aan octaven vasthouden, maar in pla"
"ats daarvan voor een iets hogere of lagere noot zouden kiezen? Laten we dit pr"
"oberen:"

#: A.18-additive-synthesis.md:70
#, no-wrap
msgid ""
"detune = 0.7\n"
"synth :square, note: :e3\n"
"synth :square, note: :e3 + detune"
msgstr ""
"detune = 0.7\n"
"synth :square, note: :e3\n"
"synth :square, note: :e3 + detune"

#: A.18-additive-synthesis.md:76
msgid ""
"If we detune our square waves by 0.7 notes we hear something that perhaps does"
"n't sound in tune or correct - a 'bad' note. However, as we move closer to 0 i"
"t will sound less and less out of tune as the pitches of the two waves get clo"
"ser and more similar. Try it for yourself! Change the `detune:` opt value from"
" `0.7` to `0.5` and listen to the new sound. Try `0.2`, `0.1`, `0.05`, `0`. Ea"
"ch time you change the value, take a listen and see if you can hear how the so"
"und is changing. Notice that low detune values such as `0.1` produce a really "
"nice 'thick' sound, with both slightly different pitches interacting with each"
" other in interesting, often surprising, ways."
msgstr ""
"Als we onze blokgolf met een 0.7 noot ontstemmen, klinkt dit misschien vals of"
" niet in harmonie. Hoe dichter bij de 0 plaats je het geluid minder uit toon g"
"ezien de toon van de golven meer en meer met elkaar gaan samenvallen. Probeer "
"dit zelf maar eens uit! Verander de waarde van de `detune:` opt van `0.7` naar"
" `0.5`en luister hoe het geluid hierbij veranderen kan. Merk op dat lage ontst"
"emde noten zoals bij `0.1`een heel fijn 'vet' geluid produceren en waarbij de "
"lichtjes verschillende toonhoogten op een interessante wijze met elkaar een wi"
"sselwerking aangaan, dikwijls op zeer verrassende wijze ."

#: A.18-additive-synthesis.md:87
#, fuzzy
msgid ""
"Some of the built-in synths already include a detune option that does exactly "
"this in one synth. Try playing with the `detune:` opt of `:dsaw`, `:dpulse` an"
"d `:dtri`."
msgstr ""
"Sommige van de ingebouwde synths beschikken reeds over een detune optie die ex"
"act dit toepast in één synth. Probeer te spelen met de ' detune: ' opt van ': "
"dsaw ',': dpulse' en ': dtri'."

#: A.18-additive-synthesis.md:92
msgid "Amplitude shaping"
msgstr "Amplitude vormgeven"

#: A.18-additive-synthesis.md:94
msgid ""
"Another way we can finely craft our sound is to use a different envelope and o"
"ptions for each synth trigger. For example this will allow you to make some as"
"pects of the sound percussive and other aspects ring out for a period of time."
msgstr ""
"We kunnen ons geluid ook nog op een andere manier bijschaven door voor elke sy"
"nth een andere envelope te gebruiken. Deze laten jou toe om sommige elementen "
"van het geluid percussief te laten klinken terwijl we andere elementen langer "
"kunnen laten naklinken."

#: A.18-additive-synthesis.md:99
#, no-wrap
msgid ""
"detune = 0.1\n"
"synth :square, note: :e1, release: 2\n"
"synth :square, note: :e1 + detune, amp: 2, release: 2\n"
"synth :gnoise, release: 2, amp: 1, cutoff: 60\n"
"synth :gnoise, release: 0.5, amp: 1, cutoff: 100\n"
"synth :noise, release: 0.2, amp: 1, cutoff: 90"
msgstr ""
"detune = 0.1\n"
"synth :square, note: :e1, release: 2\n"
"synth :square, note: :e1 + detune, amp: 2, release: 2\n"
"synth :gnoise, release: 2, amp: 1, cutoff: 60\n"
"synth :gnoise, release: 0.5, amp: 1, cutoff: 100\n"
"synth :noise, release: 0.2, amp: 1, cutoff: 90"

#: A.18-additive-synthesis.md:108
msgid ""
"In the example above I have mixed in a noisy percussive element to the sound a"
"long with some more persistent background rumbling. This was achieved firstly "
"by using two noise synths with middling cutoff values (`90` and `100`) using s"
"hort release times along with a noise with a longer release time but with a lo"
"w cutoff value (which makes the noise less crisp and more rumbly.)"
msgstr ""
"In het bovenstaande voorbeeld heb ik lawaaierige percussieve elementen gemixt "
"met een meer aanhoudend achtergrond gerommel. Dit werd bereikt door twee noise"
" synth's met een middelmatige cutoff waarde (`90`en `100`) door gebruik te mak"
"en van korte release-tijd waarden, samen met een ruis die een langere release-"
"tijd heeft, met een lagere cutoff waarde (om het geluid minder scherp en meer "
"rommelend te maken.)"

#: A.18-additive-synthesis.md:117
msgid ""
"Let's combine all these techniques to see if we can use additive synthesis to "
"re-create a basic bell sound. I've broken this example into four sections. Fir"
"stly we have the 'hit' section which is the initial onset part of the bell sou"
"nd - so uses a short envelope (e.g. a `release:` of around `0.1`). Next we hav"
"e the long ringing section in which I'm using the pure sound of the sine wave."
" Notice that I'm often increasing the note by roughly `12` and `24` which are "
"the number of notes in one and two octaves. I have also thrown in a couple of "
"low sine waves to give the sound some bass and depth. Finally, I used `define`"
" to wrap my code in a function which I can then use to play a melody. Try play"
"ing your own melody and also messing around with the contents of the `:bell` f"
"unction until you create your own crazy sound to play with!"
msgstr ""
"Laten we deze technieken combineren om te zien of we gebruik kunnen  maken van"
" additieve synthese om een elementair bel geluid te re-creëren . Ik heb dit vo"
"orbeeld opgedeeld in vier secties. Als eerste hebben we het 'aanslag'-gedeelte"
", die het begin uitmaakt van onze bel klank - en dus gebruik maakt van een kor"
"te envelop (bijv. een `release:` van rondom `0.1`). Vervolgens hebben we het l"
"ange ring gedeelte waarin ik het pure  geluid van de sinusgolf gebruik . Merk "
"op dat ik vaak het verhogen van een noot toepas, met ongeveer `12` en `24`, da"
"t het aantal noten met één a twee octaven verhoogd. Ik heb er ook een paar lag"
"e sinus golven aan toegevoegd die het geluid wat bas en diepte geeft. Tot slot"
", gebruik ik `define` om mijn code in een functie te wikkelen, die ik dan kan "
"gebruiken om een melodie af te spelen. Probeer je eigen melodie uit en speel o"
"ok met de inhoud van de `:bell` functie totdat je je eigen leuk geluid hebt om"
" mee te spelen!"

#: A.18-additive-synthesis.md:130
#, no-wrap
#, fuzzy
msgid ""
"define :bell do |n|\n"
"  # Triangle waves for the 'hit'\n"
"  synth :tri, note: n - 12, release: 0.1\n"
"  synth :tri, note: n + 0.1, release: 0.1\n"
"  synth :tri, note: n - 0.1, release: 0.1\n"
"  synth :tri, note: n, release: 0.2\n"
"  # Sine waves for the 'ringing'\n"
"  synth :sine, note: n + 24, release: 2\n"
"  synth :sine, note: n + 24.1, release: 2\n"
"  synth :sine, note: n + 24.2, release: 0.5\n"
"  synth :sine, note: n + 11.8, release: 2\n"
"  synth :sine, note: n, release: 2\n"
"  # Low sine waves for the bass\n"
"  synth :sine, note: n - 11.8, release: 2\n"
"  synth :sine, note: n - 12, release: 2\n"
"end\n"
"# Play a melody with our new bell!\n"
"bell :e3\n"
"sleep 1\n"
"bell :c2\n"
"sleep 1\n"
"bell :d3\n"
"sleep 1\n"
"bell :g2"
msgstr "Speel een melodie met onze nieuwe klok!"

#: A.19-subtractive-synthesis.md:1
msgid "A.19 Sound Design - Subtractive Synthesis"
msgstr "A. 19 Sound Design - Subtractieve Synthese"

#: A.19-subtractive-synthesis.md:3
msgid "Subtractive Synthesis"
msgstr "Subtractieve synthese"

#: A.19-subtractive-synthesis.md:5
msgid ""
"This is the second in a series of articles on how to use Sonic Pi for sound de"
"sign. Last month we looked at additive synthesis which we discovered was the s"
"imple act of playing multiple sounds at the same time to make a new combined s"
"ound. For example we could combine different sounding synths or even the same "
"synth at different pitches to build a new complex sound from simple ingredient"
"s. This month we'll look at a new technique commonly called *subtractive synth"
"esis* which is simply the act of taking an existing complex sound and removing"
" parts of it to create something new. This is a technique which is commonly as"
"sociated with the sound of analog synthesisers of the 1960s and 1970s but also"
" with the recent renaissance of modular analog synths through popular standard"
"s such as Eurorack."
msgstr ""
"Dit is het tweede in een serie artikelen over het gebruik van Sonic Pi in soun"
"d design. Vorige maand hebben we gekeken naar additieve synthese waar we met e"
"envoudige handelingen, met het tegelijkertijd afspelen van meerdere geluiden, "
"kunnen zorgen voor een nieuw gecombineerde geluid. We kunnen bijvoorbeeld vers"
"chillend klinkende synths of zelfs dezelfde synth op verschillende toonhoogten"
" gebruiken om een nieuw complex geluid op te bouwen met eenvoudige ingrediënte"
"n. Deze maand nemen we een kijkje naar een nieuwe techniek die in de volksmond"
" *subtractieve synthese* wordt genoemd, wat gewoon het nemen van een bestaand "
"complex geluid is en deze ontdoen van bepaalde onderdelen, om er iets nieuws v"
"an te maken . Dit is een techniek die meestal wordt geassocieerd met het gelui"
"d van analoge synthesizers uit de jaren 1960 en 1970, maar ook bekend is door "
"de recente opleving van modulaire analoge synths via populaire nieuwe standaar"
"den zoals bijvoorbeeld Eurorack."

#: A.19-subtractive-synthesis.md:18
msgid ""
"Despite this sounding like a particularly complicated and advanced technique, "
"Sonic Pi makes it surprisingly simple and easy - so let's dive right in."
msgstr ""
"Ondanks dat dit klinkt als een bijzonder ingewikkelde en geavanceerde techniek"
", maakt Sonic Pi het je verrassend simpel en eenvoudig, we beginnen er gelijk "
"mee."

#: A.19-subtractive-synthesis.md:22
msgid "Complex Source Signal"
msgstr "Complex Bron Signaal"

#: A.19-subtractive-synthesis.md:24
msgid ""
"For a sound to work well with subtractive synthesis, it typically needs to be "
"fairly rich and interesting. This doesn't mean we need something hugely comple"
"x - in fact, just a standard `:square` or `:saw` wave will do:"
msgstr ""
"Om een geluid goed met subtractieve synthese te laten werken, moet deze meesta"
"l vrij rijk en interessant op zich klinken. Dat betekent niet dat deze ongelof"
"elijk complex hoeft te zijn, in feite zullen een typische `:square` of`:saw`go"
"lf volstaan:"

#: A.19-subtractive-synthesis.md:29
#, no-wrap
msgid "synth :saw, note: :e2, release: 4"
msgstr "synth :saw, note: :e2, release: 4"

#: A.19-subtractive-synthesis.md:33
msgid ""
"Notice that this sound is already pretty interesting and contains many differe"
"nt frequencies above `:e2` (the second E on a piano) which add to create the t"
"imbre. If that didn't make much sense to you, try comparing it with the `:beep"
"`:"
msgstr ""
"Merk hier op dat dit geluid al vrij interessant is en veel verschillende frequ"
"enties boven `:e2` (de tweede E op een piano) bevat, die aan toevoeging doen a"
"an het maken van de klankkleur. Als dat nog niet veel duidelijk maakt, probeer"
" dit te vergelijken met de `:beep`toon:"

#: A.19-subtractive-synthesis.md:38
#, no-wrap
msgid "synth :beep, note: :e2, release: 4"
msgstr "synth :beep, note: :e2, release: 4"

#: A.19-subtractive-synthesis.md:42
msgid ""
"As the `:beep` synth is just a sine wave, you'll hear a much purer tone and on"
"ly at `:e2` and none of the high crispy/buzzy sounds which you heard in the `:"
"saw`. It's this buzziness and variation from a pure sine wave that we can play"
" with when we use subtractive synthesis."
msgstr ""
"Vermits de `:beep` synth een eenvoudige sinusgolf is, zal je een meer zuivere "
"toon horen op `:e2` en geen van de meer knapperige/zoemende geluiden die je me"
"t `:saw`hoorde. Het is dit bezige, variërende geluid van de sinus golf, die we"
" kunnen gaan gebruiken voor subtractieve synthese."

#: A.19-subtractive-synthesis.md:49
msgid ""
"Once we have our raw source signal, the next step is to pass it through a filt"
"er of some kind which will modify the sound by removing or reducing parts of i"
"t. One of the most common filters used for subtractive synthesis is something "
"called a low pass filter. This will allow all the low parts of the sound throu"
"gh but will reduce or remove the higher parts. Sonic Pi has a powerful yet sim"
"ple to use FX system that includes a low pass filter, called `:lpf`. Let's pla"
"y with it:"
msgstr ""
"Eens we ons eerste rauwe geluid hebben gevonden, is onze volgende stap deze do"
"or een filter te sturen, die delen van het geluid wegneemt of vermindert. Een "
"van de meest gebruikte filters bij subtractieve synthese is de zogenaamde low "
"pass filter. Deze laat alle lage tonen van het geluid door, maar zal de hogere"
" frequenties reduceren of weglaten. Sonic Pi heeft een krachtig maar makkelijk"
" te gebruiken FX systeem waar een low pass filter inzit, namelijk de `:lpf`. L"
"aten we hiermee even spelen:"

#: A.19-subtractive-synthesis.md:57
#, no-wrap
msgid ""
"with_fx :lpf, cutoff: 100 do\n"
"  synth :saw, note: :e2, release: 4\n"
"end"
msgstr ""
"with_fx :lpf, cutoff: 100 do\n"
"  synth :saw, note: :e2, release: 4\n"
"end"

#: A.19-subtractive-synthesis.md:63
msgid ""
"If you listen carefully you'll hear how some of that buzziness and crispiness "
"has been removed. In fact, all the frequencies in the sound above note `100` h"
"ave been reduced or removed and only the ones below are still present in the s"
"ound. Try changing that `cutoff:` point to lower notes, say `70` and then `50`"
" and compare the sounds."
msgstr ""
"Als je goed luistert zal je horen dat wat geroezemoes en knapperigheid verwijd"
"erd is. In feite zijn alle frequenties in het geluid boven `100`gereduceerd of"
" weggenomen en zijn enkel de frequenties daaronder aanwezig in het geluid. Pro"
"beer een `cutoff:` te vinden om noten te verlagen met bijvoorbeeld `70` en dan"
" naar `50` en vergelijk dan deze klank."

#: A.19-subtractive-synthesis.md:69
msgid ""
"Of course, the `:lpf` isn't the only filter you can use to manipulate the sour"
"ce signal. Another important FX is the high pass filter referred to as `:hpf` "
"in Sonic Pi. This does the opposite to `:lpf` in that it lets the high parts o"
"f the sound through and cuts off the low parts."
msgstr ""
"Uiteraard is de `:lpf` niet de enige filter die je kan gebruiken om een inkome"
"nd signaal te bewerken. Een andere belangrijke FX is de high pass filter aange"
"duid als `:hpf` in Sonic Pi.  Dit doet het tegenovergestelde  van`:lpf` waar d"
"ie de hoge delen van het geluid doorlaat en/of  afsnijdt, doet deze dat voor d"
"e lage delen."

#: A.19-subtractive-synthesis.md:74
#, no-wrap
msgid ""
"with_fx :hpf, cutoff: 90 do\n"
"  synth :saw, note: :e2, release: 4\n"
"end"
msgstr ""
"with_fx :hpf, cutoff: 90 do\n"
"  synth :saw, note: :e2, release: 4\n"
"end"

#: A.19-subtractive-synthesis.md:80
msgid ""
"Notice how this sounds much more buzzy and raspy now that all the low frequenc"
"y sounds have been removed. Play around with the cutoff value - notice how low"
"er values let more of the original bass parts of the source signal through and"
" higher values sound increasingly tinny and quiet."
msgstr ""
"Merk op dat het geluid nu drukker en rasperig is nu alle lage frequenties wegg"
"enomen zijn. Speel maar even met de cutoff waarden en merk op dat lagere waard"
"en meer van de originele basstonen doorlaten en bij hogere waarden, het geluid"
" dunner en stiller wordt."

#: A.19-subtractive-synthesis.md:86
msgid "Low Pass Filter"
msgstr ""

#: A.19-subtractive-synthesis.md:88
msgid ""
"![Varying amounts of low pass filtering](../../../etc/doc/images/tutorial/arti"
"cles/A.19-subtractive-synthesis/subtractive-synthesis-waveforms.png)"
msgstr ""

#: A.19-subtractive-synthesis.md:90
msgid ""
"The low pass filter is such an important part of every subtractive synthesis t"
"oolkit that it's worth taking a deeper look at how it works. This diagram show"
"s the same sound wave (the `:prophet` synth) with varying amounts of filtering"
". At the top, section A shows the audio wave with no filtering. Notice how the"
" wave form is very pointy and contains lots of sharp edges. It is these hard, "
"sharp angles that produce the high crispy/buzzy parts of the sound. Section B "
"shows the low pass filter in action - notice how it is less pointy and more ro"
"unded than the wave form above. This means that the sound will have fewer high"
" frequencies giving it a more mellow rounded feel. Section C shows the low pas"
"s filter with a fairly low cutoff value - this means that even more of the hig"
"h frequencies have been removed from the signal resulting in an even softer, r"
"ounder wave form. Finally, notice how the size of the wave form, which represe"
"nts the amplitude, decreases as we move from A to C. Subtractive synthesis wor"
"ks by removing parts of the signal which means that the overall amplitude is r"
"educed as the amount of filtering that is taking place increases."
msgstr ""
"Het low-pass filter is zo'n belangrijk onderdeel in elke gereedschapskist van "
"de subtractieve synthese, dat het moeite waard is iets dieper in te gaan op ho"
"e het werkt. Dit diagram toont dezelfde geluidsgolf (de ': prophet ' synth) me"
"t verscheidene filter hoeveelheden . Aan de top toont deel A de audiogolf zond"
"er filtering. Merk op hoe de golfvorm erg puntig is en veel scherpe randen bev"
"at. Het zijn deze harde, scherpe hoeken die de hoge scherpe delen van het gelu"
"id produceren. Sectie B toont het low-pass filter in actie - merk hoe deze min"
"der puntige en meer afgerond heeft, dan de golfvorm hierboven. Dit betekent da"
"t het geluid minder hoge frequenties heeft, waardoor het een meer zacht afgero"
"nd aanvoelt . Sectie C toont de low-pass filter met een vrij lage grenswaarde "
"- dit betekent dat zelfs nog meer van de hoge frequenties zijn verwijderd uit "
"het signaal wat resulteert in een nog zachtere, ronder golfvorm. Tot slot merk"
" je hoe de vorm van de golf, die de amplitude vertegenwoordigt, afneemt als we"
" van A naar C gaan. Subtractieve synthese werkt door het verwijderen van delen"
" van het signaal en betekent dus dat de totale amplitude wordt verminderd door"
" de waarde van de filter die verhoogt."

#: A.19-subtractive-synthesis.md:109
msgid "Filter Modulation"
msgstr "Filter Modulatie"

#: A.19-subtractive-synthesis.md:111
msgid ""
"So far we've just produced fairly static sounds. In other words, the sound doe"
"sn't change in any way for the entirety of its duration. Often you might want "
"some movement in the sound to give the timbre some life. One way to achieve th"
"is is via filter modulation - changing the filter's options through time. Luck"
"ily Sonic Pi gives you powerful tools to manipulate an FX's opts through time."
" For example, you can set a slide time to each modulatable opt to specify how "
"long it should take for the current value to linearly slide to the target valu"
"e:"
msgstr ""
"Tot nu toe klonk ons geluid vrij statisch. Met andere woorden, het geluid vera"
"ndert op geen enkele manier gedurende zijn gehele duurtijd. Vaak zal je wat be"
"weging in je geluid willen, om wat leven in het timbre te brengen. Een van de "
"manieren om dit te bewerkstelligen is met filtermodulatie, d.w.z. het verander"
"en van de filter opties gedurende een bepaalde tijd. Sonic Pi heeft gelukkig e"
"en krachtig instrument om de FX opt's, tijdsgebonden te manipuleren. Je kan bi"
"jvoorbeeld voor elke moduleerbare opt een bepaalde tijd opgeven, hoe traag of "
"hoe snel deze van een bepaalde waarde, naar de vooropgestelde waarde verschuif"
"t:"

#: A.19-subtractive-synthesis.md:120
#, no-wrap
msgid ""
"with_fx :lpf, cutoff: 50 do |fx|\n"
"  control fx, cutoff_slide: 3, cutoff: 130\n"
"  synth :prophet, note: :e2, sustain: 3.5\n"
"end"
msgstr ""
"with_fx :lpf, cutoff: 50 do |fx|\n"
"  control fx, cutoff_slide: 3, cutoff: 130\n"
"  synth :prophet, note: :e2, sustain: 3.5\n"
"end"

#: A.19-subtractive-synthesis.md:127
#, fuzzy
msgid ""
"Let's take a quick look at what's going on here. Firstly we start an `:lpf` FX"
" block as normal with an initial `cutoff:` of a low `50`. However, the first l"
"ine also finishes with the strange `|fx|` at the end. This is an optional part"
" of the `with_fx` syntax which allows you to directly name and control the run"
"ning FX synth. Line 2 does exactly this and controls the FX to set the `cutoff"
"_slide:` opt to 3 and the new target `cutoff:` to be `130`. The FX will now st"
"art sliding the `cutoff:` opt's value from `50` to `130` over a period of 3 be"
"ats. Finally we also trigger a source signal synth so we can hear the effect o"
"f the modulated low pass filter."
msgstr ""
"Laat ons even kijken naar wat hier gebeurt. Eerst starten we een `:lpf` FX blo"
"k met een initiële `cutoff:` zeer laag op`20`. De eerste regel heeft evenwel e"
"en mysterieuze `|fx|` op het einde.  Dit is een optioneel onderdeel van de  `w"
"ith_fx` syntax wat ons in staat stelt om een naam te geven aan de lopende FX s"
"ynth, en deze te manipuleren. Dat is precies wat regel 2 doet, namelijk de `cu"
"toff_slide:` opt naar 4 zetten, en de uiteindelijke `cutoff:` naar `130` te br"
"engen. Het FX zal de `cutoff:` opt's waarde van `50` naar `130` schuiven, over"
" een periode van 3 tellen. Ten slotte triggeren we een synth, die als bron doo"
"r deze low pass filter wordt gestuurd."

#: A.19-subtractive-synthesis.md:140
msgid ""
"This is just a very basic taster of what's possible when you use filters to mo"
"dify and change a source sound. Try playing with Sonic Pi's many built-in FX t"
"o see what crazy sounds you can design. If your sound feels too static, rememb"
"er you can start modulating the options to create some movement."
msgstr ""
"Dit is slechts een zeer basic voorproefje van wat mogelijk is als je filters g"
"ebruikt om een geluidsbron te wijzigen. Probeer in Sonic Pi met de vele ingebo"
"uwde FX te spelen, om te zien wat een gekke geluiden je hiermee kan ontwerpen."
" Als je geluid te statisch aanvoelt , vergeet niet dat je  de opties kan modul"
"eren om bewegingen aan te brengen."

#: A.19-subtractive-synthesis.md:146
msgid ""
"Let's finish by designing a function which will play a new sound created with "
"subtractive synthesis. See if you can figure out what's going on here - and fo"
"r the advanced Sonic Pi readers out there - see if you can work out why I wrap"
"ped everything inside a call to `at` (please send answers to @samaaron on Twit"
"ter)."
msgstr ""
"Laten we eindigen, met het ontwerpen van een functie die een nieuw geluid maak"
"t met subtractieve synthese. Zie of je kan achterhalen wat hier aan de hand is"
" - en voor de gevorderde Sonic Pi lezers: - kijk of je kunt vinden waarom ik a"
"lles in de oproep verpak naar `at` (stuur de antwoorden naar @samaaron op Twit"
"ter)."

#: A.19-subtractive-synthesis.md:152
#, no-wrap
msgid ""
"define :subt_synth do |note, sus|\n"
"  at do\n"
"    with_fx :lpf, cutoff: 40, amp: 2 do |fx|\n"
"      control fx, cutoff_slide: 6, cutoff: 100\n"
"      synth :prophet, note: note, sustain: sus\n"
"    end\n"
"    with_fx :hpf, cutoff_slide: 0.01 do |fx|\n"
"      synth :dsaw, note: note + 12, sustain: sus\n"
"      (sus * 8).times do\n"
"        control fx, cutoff: rrand(70, 110)\n"
"        sleep 0.125\n"
"      end\n"
"    end\n"
"  end\n"
"end\n"
"subt_synth :e1, 8\n"
"sleep 8\n"
"subt_synth :e1 - 4, 8"
msgstr ""
"define :subt_synth do |note, sus|\n"
"  at do\n"
"    with_fx :lpf, cutoff: 40, amp: 2 do |fx|\n"
"      control fx, cutoff_slide: 6, cutoff: 100\n"
"      synth :prophet, note: note, sustain: sus\n"
"    end\n"
"    with_fx :hpf, cutoff_slide: 0.01 do |fx|\n"
"      synth :dsaw, note: note + 12, sustain: sus\n"
"      (sus * 8).times do\n"
"        control fx, cutoff: rrand(70, 110)\n"
"        sleep 0.125\n"
"      end\n"
"    end\n"
"  end\n"
"end\n"
"subt_synth :e1, 8\n"
"sleep 8\n"
"subt_synth :e1 - 4, 8"

#: A.20-creative-coding-in-the-classroom.md:1
msgid "A.20 Creative coding in the classroom with Sonic Pi"
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:3
msgid "Creative coding in the classroom with Sonic Pi"
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:5
msgid ""
"(This article was published in [issue 9 of the Hello World Magazine](https://h"
"elloworld.raspberrypi.org/issues/9))"
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:7
msgid ""
"Code is one of the most creative media that humans have created. The initially"
" obscure symbols of parentheses and lambdas are not just deeply rooted in scie"
"nce and mathematics, they are the closest we have managed to get to casting th"
"e same kind of magical spells as Gandalf and Harry Potter. I believe that this"
" provides a powerful means of engagement in our learning spaces. Through the m"
"agic of code we are able to conjure up individually meaningful stories and lea"
"rning experiences."
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:15
msgid ""
"We are surrounded by magical experiences. From the sleight of hand of a stage "
"magician making the ball disappear into thin air, to the wonder of seeing your"
" favourite band perform on a big stage. It is these \"wow\" moments that inspire"
" us to pick up a magic book and learn the French Drop or to start jamming powe"
"r chords on an old guitar. How might we create similarly deep and lasting sens"
"es of wonder that will motivate people to practice and learn the fundamentals "
"of programming?"
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:23
msgid "Musical Engines and Notation"
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:25
msgid ""
"The histories of music and computers have been intricately woven together sinc"
"e the inception of computing machines, or \"engines\" as Charles Babbage's power"
"ful analytical engine was called. Back in 1842 the Mathematician Ada Lovelace,"
" who worked very closely with Babbage, saw the creative potential of these eng"
"ines. Whilst these first engines had originally been designed to accurately so"
"lve hard maths problems, Ada dreamt about making music with them:"
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:33
msgid ""
"\"..the engine might compose elaborate and scientific pieces of music of any de"
"gree of complexity or extent.\" Ada Lovelace, 1842."
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:36
msgid ""
"Of course, today in 2019 much of our music, regardless of genre, has either be"
"en composed, produced or mastered with a digital computer. Ada's dream came tr"
"ue. It is even possible to trace the history back even further. If you see cod"
"ing as the art of writing sequences of special symbols that instruct a compute"
"r to do specific things, then musical composition is a very similar practice. "
"In Western music, the symbols are black dots positioned on a stave of lines th"
"at tell the musician which notes to play and when. Intriguingly, if we trace t"
"he roots of Western music notation back to the Italian Benedictine monk, Guido"
" d'Arezzo, we find that the dots and lines system that modern orchestras use i"
"s just one of a number of notation systems he worked on. Some of the others we"
"re much closer to what we might now see as code."
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:50
#, fuzzy
msgid ""
"In education, magical meaningful experiences with computers and programming la"
"nguages have been explored since the late '60s. Computer education pioneers Se"
"ymour Papert, Marvin Minsky and Cynthia Solomon explored simple Lisp-based lan"
"guages that moved pens over large pieces of paper. With just a few simple comm"
"ands it was possible to program the computer to draw any picture. They even ex"
"perimented by extending their Logo language from drawing to music. Papert wrot"
"e about learning through experiencing the reconstruction of knowledge rather t"
"han its transmission. Getting people to play with things directly was an impor"
"tant part of his group's work."
msgstr "Get"

#: A.20-creative-coding-in-the-classroom.md:62
msgid "Sonic Pi Performances"
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:64
msgid ""
"![Jylda Live Coding in the Sage Gateshead](../../../etc/doc/images/tutorial/ar"
"ticles/A.20-creative-coding-in-the-classroom/jylda-small.png) Jylda and Sam Aa"
"ron perform at the Thinking Digital Conference in the Sage Gateshead. Photo cr"
"edit: TyneSight Photos."
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:68
msgid ""
"Sonic Pi has been used to perform in a wide range of venues such as school hal"
"ls, nightclubs, outdoor stages at musical festivals, college chapels and prest"
"igious music venues. For example the amazing Convo project which brought 1000 "
"children together in the Royal Albert Hall to perform an ambitious new composi"
"tion by composer Charlotte Harding. The piece was written for traditional inst"
"ruments, choirs, percussion and Sonic Pi code. The pop-artist Jylda also perfo"
"rmed with Sonic Pi in the Sage Gateshead for the Thinking Digital Conference, "
"where she created a unique live-coded improvised remix of her song Reeled."
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:78
msgid ""
"![Sonic Pi in the Royal Albert Hall](../../../etc/doc/images/tutorial/articles"
"/A.20-creative-coding-in-the-classroom/convo-small.png) Sonic Pi used as one o"
"f the instruments as part of Convo at the Royal Albert Hall. Photo credit: Pet"
"e Jones."
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:83
msgid "Live coding in the classroom"
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:85
msgid ""
"Sonic Pi is a code-based music creation and performance tool that builds on al"
"l of these ideas. Unlike the majority of computing education software, it is b"
"oth simple enough to use for education and also powerful enough for profession"
"als. It has been used to perform in international music festivals, used to com"
"pose in a range of styles from classical, EDM and heavy metal, and was even re"
"viewed in the Rolling Stone magazine. It has a diverse community of over 1.5 m"
"illion live coders with a variety of backgrounds all learning and sharing thei"
"r ideas and thoughts through the medium of code. It is free to download for Ma"
"c, PC and Raspberry Pi and includes a friendly tutorial that assumes you know "
"nothing about either code or music."
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:97
msgid ""
"Sonic Pi was initially conceived as a response to the UK's newly released Comp"
"uting curriculum in 2014. The goal was to find a motivating and fun way to tea"
"ch the fundamentals of programming. It turns out that there is a lot in common"
" and it's huge fun to explain sequencing as melody, iteration as rhythm, condi"
"tionals as musical variety. I developed the initial designs and first iteratio"
"ns of the platform with Carrie Anne Philbin, who brought a teacher’s perspecti"
"ve to the project. Since then, Sonic Pi has undergone iterative improvements t"
"hanks to the feedback gained from observing learners and collaborating directl"
"y with educators in the classroom. A core design philosophy was to never add a"
" feature that couldn't be easily taught to a 10 year old child. This meant tha"
"t most ideas had to be heavily refined and reworked until they were simple eno"
"ugh. Making things simple whilst keeping them powerful continues to be the har"
"dest part of the project."
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:112
msgid ""
"In order to provide the magical motivation, Sonic Pi's design was never limite"
"d to a pure focus on education. Ideally there would be famous musicians and pe"
"rformers using Sonic Pi as a standard instrument alongside guitars, drums, voc"
"als, synths, violins, etc. These performers would then act as motivational rol"
"e models demonstrating the creative potential of code. For this to be possible"
" sufficient focus and effort therefore had to be placed on making it a powerfu"
"l instrument whilst still keeping it simple enough for 10 year olds to pick up"
". In addition to educators, I also worked directly with a variety of different"
" artists in classrooms, art galleries, studios and venues in the early stages "
"of Sonic Pi’s development. This provided essential feedback which enabled Soni"
"c Pi to grow and ultimately flourish as a tool for creative expression."
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:126
msgid ""
"There were a number of exciting and unexpected side effects of this dual focus"
" on education and professional musicians. Many of the features are beneficial "
"to both groups. For example, a lot of effort has been put into making error me"
"ssages more friendly and useful (rather than being a huge complicated mess of "
"jargon). This turns out to be very useful when you write a bug while performin"
"g in front of thousands of people. Additionally, functionality such as playing"
" studio quality audio samples, adding audio effects, providing access to live "
"audio from the microphone all turn out to make the learning experience more fu"
"n, rewarding and ultimately meaningful."
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:137
msgid ""
"The Sonic Pi community continues to grow and share amazing code compositions, "
"lesson plans, musical algorithms, and much more. Much of this happens on our f"
"riendly forum in_thread (in-thread.sonic-pi.net) which is home to a very diver"
"se group of people that includes educators, musicians, programmers, artists an"
"d makers. It is a real joy to see people learn to use code to express themselv"
"es in new ways and for that in turn to inspire others to do the same."
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:145
msgid "Some fun capabilities"
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:147
msgid ""
"From a Computer Science perspective, Sonic Pi provides you with the building b"
"locks to teach you the basics as found in the UK's curriculum such as sequenci"
"ng, iteration, conditionals, functions, data structures, algorithms, etc. Howe"
"ver, it also builds on a number of important and relevant concepts which have "
"become adopted in mainstream industry such as concurrency, events, pattern mat"
"ching, distributed computing and determinism - all whilst keeping things simpl"
"e enough to explain to a 10 year old child."
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:156
#, fuzzy
msgid "Getting started is as simple as:"
msgstr "Get"

#: A.20-creative-coding-in-the-classroom.md:162
msgid "A melody can be constructed with one more command, sleep:"
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:164
#, no-wrap
#, fuzzy
msgid ""
"play 70\n"
"sleep 1\n"
"play 72\n"
"sleep 0.5\n"
"play 75"
msgstr ""
"lay 72\n"
"sleep 0.5\n"
"play 75\n"
"sleep 0.5\n"
"play 79"

#: A.20-creative-coding-in-the-classroom.md:172
msgid ""
"In this example, we play the note 70 (roughly the 70th note on a piano), wait "
"for 1 second, play note 72, wait for half a second and then play note 75. What"
"'s interesting here is that with just two commands we have access to pretty mu"
"ch all of Western notation (which notes to play and when) and learners can cod"
"e any melody they've ever heard. This leads to huge variety in expressive outc"
"omes whilst focussing on the same computing concept: sequencing in this case."
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:180
msgid ""
"Taking ideas from the professional music world, we can also play back any reco"
"rded sound. Sonic Pi can play any audio file on your computer but also has a n"
"umber of sounds built-in to make things easy to get started:"
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:189
msgid ""
"This code will play back the drum break which was a pillarstone to early hip-h"
"op, Drum and Bass and Jungle. For example, a number of early hip-hop artists p"
"layed this drum break back at half speed to give it a more laid-back feeling:"
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:198
msgid ""
"In the 90s a number of music scenes burst out of new technology which enabled "
"artists to take drum breaks like this apart and reassemble in a different orde"
"r. For example:"
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:202
#, no-wrap
#, fuzzy
msgid ""
"live_loop :jungle do\n"
" sample :loop_amen, onset: pick\n"
" sleep 0.125\n"
"end"
msgstr "sample :loop_amen"

#: A.20-creative-coding-in-the-classroom.md:209
#, fuzzy
msgid ""
"In this example we introduce a basic loop called :jungle which picks a random "
"drum hit from our audio sample, waits for an eighth of a second and then picks"
" another drum hit. This results in an endless stream of random drum beats to d"
"ance to whilst you experience what a loop is."
msgstr "rand"

#: B-Essential-Knowledge.md:1
msgid "B Essential Knowledge"
msgstr "B Essentiële kennis"

#: B-Essential-Knowledge.md:3
msgid "Essential Knowledge"
msgstr "Essentiële Kennis"

#: B-Essential-Knowledge.md:5
msgid ""
"This section will cover some very useful - in fact *essential* - knowledge for"
" getting the most out of your Sonic Pi experience."
msgstr ""
"Deze sectie gaat over nuttige - in feite *essentiële* - kennis om het meeste u"
"it Sonic Pi te halen."

#: B-Essential-Knowledge.md:8
msgid ""
"We'll cover how to take advantage of the many keyboard shortcuts available to "
"you, how to share your work and some tips on performing with Sonic Pi."
msgstr ""
"We gaan het hebben over, hoe profijt te halen uit de vele beschikbare sneltoet"
"sen, hoe jouw werk te delen en wat tips hoe met Sonic Pi op te treden."

#: B.01-Using-Shortcuts.md:1
msgid "B.1 Using Shortcuts"
msgstr "B.1 Sneltoetsen gebruiken"

#: B.01-Using-Shortcuts.md:3
msgid "Using Shortcuts"
msgstr "Sneltoetsen gebruiken"

#: B.01-Using-Shortcuts.md:5
msgid ""
"Sonic Pi is as much an instrument as a coding environment. Shortcuts can there"
"fore make playing Sonic Pi much more *efficient and natural* - especially when"
" you're playing live in front of an audience."
msgstr ""
"Sonic Pi is evengoed een instrument als een coderingsomgeving. Sneltoetsen kun"
"en daarom het bespelen van Sonic Pi *efficienter en natuurijker* maken- zeker "
"als je live voor publijk speelt."

#: B.01-Using-Shortcuts.md:9
msgid ""
"Much of Sonic Pi can be controlled through the keyboard. As you gain more fami"
"liarity working and performing with Sonic Pi, you'll likely start using the sh"
"ortcuts more and more. *I personally touch-type* (I recommend you consider lea"
"rning too) and find myself frustrated whenever I need to reach for the mouse a"
"s it slows me down. I therefore use all of these shortcuts on a very regular b"
"asis!"
msgstr ""
"Veel van Sonic Pi kan worden bestuurd via het toetsenbord. Als je meer vertrou"
"wd raakt met Sonic Pi, zult je de sneltoetsen waarschijnlijk meer en meer begi"
"nnen gebruiken. *Ik persoonlijk touch-type* (ik adviseer je te overwegen om di"
"t te leren) ik vind het frustrerend wanneer ik het nodig vind de muis te gebru"
"iken. Ik gebruik deze shortcuts dus zeer regelmatig!"

#: B.01-Using-Shortcuts.md:16
msgid ""
"Therefore, if you learn the shortcuts, you'll learn to use your keyboard effec"
"tively and you'll be live coding like a pro in no time."
msgstr ""
"Daarom, als je de shortcuts leert, leer je je toetsenbord efficienter te gebru"
"iken en je zal in geen tijd live coderen als een pro."

#: B.01-Using-Shortcuts.md:19
msgid ""
"However, *don't try and learn them all at once*, just try and remember the one"
"s you use most and then keep adding more to your practice."
msgstr ""
"Maar probeer ze niet allemaal tegelijkertijd uit te proberen te leren, enkel d"
"ie je het meest gebruikt en ze langzaam meer en meer in de praktijk toe te voe"
"gen."

#: B.01-Using-Shortcuts.md:22
msgid "Consistency across Platforms"
msgstr "Samenhang tussen Platforms"

#: B.01-Using-Shortcuts.md:24
msgid ""
"Imagine you're learning the clarinet. You'd expect all clarinets of all makes "
"to have similar controls and fingerings. If they didn't, you'd have a tough ti"
"me switching between different clarinets and you'd be stuck to using just one "
"make."
msgstr ""
"Stel dat je een klarinet leert bespelen. Je verwachten dan toch dat alle klari"
"netten van de verschillende merken vergelijkbare controles en vingergrepen  zo"
"uden hebben. Als dat niet zo was, zou je een moeilijke tijd hebben om tussen d"
"e verschillende klarinetten te kunnen schakelen en je zou vasthangen aan het g"
"ebruik van slechts één merk."

#: B.01-Using-Shortcuts.md:29
msgid ""
"Unfortunately the three major operating systems (Linux, Mac OS X and Windows) "
"come with their own standard defaults for actions such as cut and paste etc. S"
"onic Pi will try and honour these standards. However *priority is placed on co"
"nsistency across platforms* within Sonic Pi rather than attempting to conform "
"to a given platform's standards. This means that when you learn the shortcuts "
"whilst playing with Sonic Pi on your Raspberry Pi, you can move to the Mac or "
"PC and feel right at home."
msgstr ""
"Helaas zijn de drie belangrijkste besturingssystemen (Linux, Mac OS X en Windo"
"ws) zijn voorzien van hun eigen standaardwaarden voor acties zoals het knippen"
" en plakken enz. Sonic Pi zal proberen deze normen te respecteren. Deze is ech"
"ter *de prioriteit is geplaatst op de consistentie tussen de platformen* binne"
"n Sonic Pi, in plaats te proberen om te voldoen aan de norm van een bepaald pl"
"atform. Dit betekent dat als je Sonic pi's shortcuts leert spelen op je Raspbe"
"rry Pi, je naar Mac of PC kan overschakelen en je thuis voelen."

#: B.01-Using-Shortcuts.md:37
msgid "Control and Meta"
msgstr "Controle en Meta"

#: B.01-Using-Shortcuts.md:39
msgid ""
"Part of the notion of consistency is the naming of shortcuts. In Sonic Pi we u"
"se the names *Control* and *Meta* to refer to the two main combination keys. O"
"n all platforms *Control* is the same. However, on Linux and Windows, *Meta* i"
"s actually the *Alt* key while on Mac *Meta* is the *Command* key. For consist"
"ency we'll use the term *Meta* - just remember to map that to the appropriate "
"key on your operating system."
msgstr ""
"Het concept van consistentie zit ook in de benaming van de shortcuts. In Sonic"
" Pi gebruiken we de namen *Control* en *Meta*  om te verwijzen naar de twee be"
"langrijkste combinatie toetsen. Bij alle platformen is *Control* hetzelfde.Maa"
"r op Linux en Windows is *Meta* eigenlijk de *Alt* toets is, terwijl *Meta* op"
" Mac de *Command* toets is. Voor de samenhang zullen we de term *Meta* gebruik"
"en - vergeet dit niet naar je besturingsysteem over te zetten."

#: B.01-Using-Shortcuts.md:46
msgid "Abbreviations"
msgstr "Afkortingen"

#: B.01-Using-Shortcuts.md:48
msgid ""
"To help keep things simple and readable, we'll use the abbreviations *C-* for "
"*Control* plus another key and *M-* for *Meta* plus another key. For example, "
"if a shortcut requires you to hold down both *Meta* and *r* we'll write that a"
"s `M-r`. The *-* just means \"at the same time as.\""
msgstr ""
"Om de zaken eenvoudig en leesbaar te houden, gebruiken we de afkorting *C-* vo"
"or *Control* plus andere toets en *M-* voor *Meta* plus andere toets.\n"
"Een voorbeeld: als je bij een shortcut zowel *Meta* als *r* moet indrukken sch"
"rijven we dit als `M-r`. En de *-* betekent dan \"tegelijk.\""

#: B.01-Using-Shortcuts.md:53
msgid "The following are some of the shortcuts I find most useful."
msgstr "Enkele van de sneltoetsen die ik het meest nuttig vind."

#: B.01-Using-Shortcuts.md:55
msgid "Stopping and starting"
msgstr "Stoppen en starten"

#: B.01-Using-Shortcuts.md:57
msgid ""
"Instead of always reaching for the mouse to run your code, you can simply pres"
"s `M-r`. Similarly, to stop running code you can press `M-s`."
msgstr ""
"In plaats van altijd de muis te gebruiken je code te gaan uit voeren, kan je s"
"impelweg op `M-r` drukken. Om het uitvoeren van je code te stoppen kan je `M-s"
"` gebruiken."

#: B.01-Using-Shortcuts.md:60 B.02-Shortcut-Cheatsheet.md:56
msgid "Navigation"
msgstr "Navigatie"

#: B.01-Using-Shortcuts.md:62
msgid ""
"I'm really lost without the navigation shortcuts. I therefore highly recommend"
" you spend the time to learn them. These shortcuts also work extremely well wh"
"en you've learned to touch type as they use the standard letters rather than r"
"equiring you to move your hand to the mouse or the arrow keys on your keyboard"
"."
msgstr ""
"Zonder de navigatie sneltoetsen ben ik echt verloren. Daarom adviseer ik je hi"
"eraan wat tijd te besteden. Deze sneltoetsen werken ook extreem goed wanneer j"
"e blind hebt leren typen vermits zij ook gebruik maken van de standaard letter"
"s in plaats van waarvoor u uw hand naar de muis of naar de pijltoetsen op uw t"
"oetsenbord moet gaan bewegen."

#: B.01-Using-Shortcuts.md:68
msgid ""
"You can move to the beginning of the line with `C-a`, the end of the line with"
" `C-e`, up a line with `C-p`, down a line with `C-n`, forward a character with"
" `C-f`, and back a character with `C-b`. You can even delete all the character"
"s from the cursor to the end of the line with `C-k`."
msgstr ""
"Je kan naar het begin van een lijn gaan met`C-a`, naar het einde van de lijn m"
"et `C-e`, een lijn omhoog met `C-p`, een lijn naar beneden met `C-n`, een kara"
"kter naar voor met `C-f, een karakter teruggaan is `C-b`. Je kan zelfs alle ka"
"rakters wissen vanaf de cursor tot het einde van de zin met `C-k`."

#: B.01-Using-Shortcuts.md:74
msgid "Tidy Code"
msgstr "Nette Code"

#: B.01-Using-Shortcuts.md:76
msgid "To auto-align your code simply press `M-m`."
msgstr "Voor het automatisch uitlijnen van jouw code druk `M-m`."

#: B.01-Using-Shortcuts.md:78
msgid "Help System"
msgstr "Help-systeem"

#: B.01-Using-Shortcuts.md:80
msgid ""
"To toggle the help system you can press `M-i`. However, a much more useful sho"
"rtcut to know is `C-i` which will look up the word underneath the cursor and d"
"isplay the docs if it finds anything. Instant help!"
msgstr ""
"Om het help-systeem in te schakelen kan je `M-i` indrukken. Een nog veel nutti"
"ger sneltoets om te kennen is `C-i`die het woor dat zich onder de cursor bevin"
"dt opzoekt en alle docs die hierover gevonden wordt zal tonen. Instant hulp!"

#: B.01-Using-Shortcuts.md:84
#, fuzzy
msgid "For a full list take a look at section B.2 Shortcut Cheatsheet."
msgstr "Voor een volledige lijst kijk je naar punt 10.2 Shortcut Cheatsheet."

#: B.02-Shortcut-Cheatsheet.md:1
msgid "B.2 Shortcut Cheatsheet"
msgstr "B.2 Sneltoetsen spiekbrief"

#: B.02-Shortcut-Cheatsheet.md:3
msgid "Shortcut Cheatsheet"
msgstr "Shortcut Cheatsheet"

#: B.02-Shortcut-Cheatsheet.md:5
#, fuzzy
msgid ""
"The following is a summary of the main shortcuts available within Sonic Pi. Pl"
"ease see Section B.1 for motivation and background."
msgstr ""
"Het volgende is een samenvatting van de belangrijkste sneltoetsen die beschikb"
"aar zijn in Sonic Pi. Zie sectie 10.1 voor motivatie en achtergrond."

#: B.02-Shortcut-Cheatsheet.md:8
msgid "Conventions"
msgstr "Conventies"

#: B.02-Shortcut-Cheatsheet.md:10
msgid ""
"In this list, we use the following conventions (where *Meta* is one of *Alt* o"
"n Windows/Linux or *Cmd* on Mac):"
msgstr ""
"In deze lijst, gebruiken we de volgende conventies (waar *Meta* staat is dit  "
"*Alt* op Windows/Linux en *Cmd* op Mac):"

#: B.02-Shortcut-Cheatsheet.md:13
msgid ""
"`C-a` means hold the *Control* key then press the *a* key whilst holding them "
"both at the same time, then releasing."
msgstr ""
"`C-a` betekend hou de *Control* toets en de *a* toets tegelijkertijd in, laat "
"dan los."

#: B.02-Shortcut-Cheatsheet.md:14
msgid ""
"`M-r` means hold the *Meta* key and then press the *r* key whilst holding them"
" both at the same time, then releasing."
msgstr ""
"`M-r`betekent hou de *Meta* toets en druk dan de *r* toets tegelijkertijd in, "
"laat dan los."

#: B.02-Shortcut-Cheatsheet.md:15
msgid ""
"`S-M-z` means hold the *Shift* key, then the *Meta* key, then finally the *z* "
"key all at the same time, then releasing."
msgstr ""
"`S-M-z` betekent hou de *Shift* toets, dan de *Meta* toets, en tenslotte de *z"
"* toets tegelijkertijd allemaal in en laat dan los."

#: B.02-Shortcut-Cheatsheet.md:16
msgid ""
"`C-M-f` means hold the *Control* key, then press *Meta* key, finally the *f* k"
"ey all at the same time, then releasing."
msgstr ""
"`C-M-f` betekent hou de *Control* toets, dan de *Meta* en tenslotte de *f* toe"
"ts allemaal tegelijkertijd in, en dan los deze dan."

#: B.02-Shortcut-Cheatsheet.md:18
msgid "Main Application Manipulation"
msgstr "Belangrijkste Applicatie Manipulatie"

#: B.02-Shortcut-Cheatsheet.md:20
msgid "`M-r` - Run code"
msgstr "`M-r` - code afspelen"

#: B.02-Shortcut-Cheatsheet.md:21
msgid "`M-s` - Stop code"
msgstr "`M-s` - Stop code"

#: B.02-Shortcut-Cheatsheet.md:22
msgid "`M-i` - Toggle Help System"
msgstr "`M-i` - Help Systeem Schakelaar"

#: B.02-Shortcut-Cheatsheet.md:23
msgid "`M-p` - Toggle Preferences"
msgstr "`M-p` - Voorkeursinstellingen Aan/Uit"

#: B.02-Shortcut-Cheatsheet.md:24
msgid "`M-{` - Switch buffer to the left"
msgstr "`M-{` - Buffer naar links omwisselen"

#: B.02-Shortcut-Cheatsheet.md:25
msgid "`M-}` - Switch buffer to the right"
msgstr "`M-}` - Buffer naar links omwisselen"

#: B.02-Shortcut-Cheatsheet.md:26
msgid "`S-M-0` - Switch to buffer 0"
msgstr ""

#: B.02-Shortcut-Cheatsheet.md:27
msgid "`S-M-1` - Switch to buffer 1"
msgstr ""

#: B.02-Shortcut-Cheatsheet.md:28
msgid "..."
msgstr ""

#: B.02-Shortcut-Cheatsheet.md:29
msgid "`S-M-9` - Switch to buffer 9"
msgstr ""

#: B.02-Shortcut-Cheatsheet.md:30
msgid "`M-+` - Increase text size of current buffer"
msgstr "`M-+` - Vergroot de tekstgrootte van de huidige buffer"

#: B.02-Shortcut-Cheatsheet.md:31
msgid "`M--` - Decrease text size of current buffer"
msgstr "`M--` - Verkleint de tekstgrootte van de huidige buffer"

#: B.02-Shortcut-Cheatsheet.md:34
msgid "Selection/Copy/Paste"
msgstr "Selectie/Kopiëren/Plakken"

#: B.02-Shortcut-Cheatsheet.md:36
msgid "`M-a` - Select all"
msgstr "`M-a` - Selecteer alles"

#: B.02-Shortcut-Cheatsheet.md:37
msgid "`M-c` - Copy selection to paste buffer"
msgstr "`M-c` - kopieer selectie om buffer te plakken"

#: B.02-Shortcut-Cheatsheet.md:38
msgid "`M-]` - Copy selection to paste buffer"
msgstr "`M-]` - Kopieer selectie om buffer te plakken"

#: B.02-Shortcut-Cheatsheet.md:39
msgid "`M-x` - Cut selection to paste buffer"
msgstr "`M-x` - Knip selectie om buffer te plakken"

#: B.02-Shortcut-Cheatsheet.md:40
msgid "`C-]` - Cut selection to paste buffer"
msgstr "`C-]` - Knip selectie om buffer te plakken"

#: B.02-Shortcut-Cheatsheet.md:41
msgid "`C-k` - Cut to the end of the line"
msgstr "`C-k` - Knip tot het einde van de lijn"

#: B.02-Shortcut-Cheatsheet.md:42
msgid "`M-v` - Paste from paste buffer to editor"
msgstr "`M-v` - Plak naar editor vanaf plak buffer"

#: B.02-Shortcut-Cheatsheet.md:43
msgid "`C-y` - Paste from paste buffer to editor"
msgstr "`C-y` - Plak naar editor vanaf plak buffer"

#: B.02-Shortcut-Cheatsheet.md:44
msgid ""
"`C-SPACE` - Set mark. Navigation will now manipulate highlighted region. Use `"
"C-g` to escape."
msgstr ""
"`C-SPACE` - Zet markering. Navigatie zal nu gemarkeerd gebied manipuleren. Geb"
"ruik `C-g` om te verlaten."

#: B.02-Shortcut-Cheatsheet.md:46
msgid "Text Manipulation"
msgstr "Bewerken van tekst"

#: B.02-Shortcut-Cheatsheet.md:48
msgid "`M-m` - Align all text"
msgstr "`M-m` - Alle tekst uitlijnen"

#: B.02-Shortcut-Cheatsheet.md:49
msgid "`Tab` - Align current line or selection (or select autocompletion)"
msgstr ""
"`Tab` - Huidige lijn uitlijnen of selectie (of selecteer automatisch aanvullen"
")"

#: B.02-Shortcut-Cheatsheet.md:50
msgid "`C-l` - Centre editor"
msgstr "`C-l` - Editor Centreren"

#: B.02-Shortcut-Cheatsheet.md:51
msgid "`M-/` - Comment/Uncomment current line or selection"
msgstr "`M-/` - Comment/Uncomment huidige lijn of selectie"

#: B.02-Shortcut-Cheatsheet.md:52
msgid "`C-t` - Transpose/swap characters"
msgstr "`C-t` - Karakters omzetten/ruilen"

#: B.02-Shortcut-Cheatsheet.md:53
msgid "`M-u` - Convert next word (or selection) to upper case."
msgstr "`M-u` - Volgende woord (of selectie) omzetten in hoofdletters."

#: B.02-Shortcut-Cheatsheet.md:54
msgid "`M-l` - Convert next word (or selection) to lower case."
msgstr "`M-l` - -Volgende woord (of selectie) omzetten in kleine letters."

#: B.02-Shortcut-Cheatsheet.md:58
msgid "`C-a` - Move to beginning of line"
msgstr "`C-a` - Naar het begin van de lijn"

#: B.02-Shortcut-Cheatsheet.md:59
msgid "`C-e` - Move to end of line"
msgstr "`C-e` -Verplaats naar einde van regel"

#: B.02-Shortcut-Cheatsheet.md:60
msgid "`C-p` - Move to previous line"
msgstr "`C-p` -Verplaatsen naar vorige regel"

#: B.02-Shortcut-Cheatsheet.md:61
msgid "`C-n` - Move to next line"
msgstr "`C-n` - Verplaatsen naar volgende regel"

#: B.02-Shortcut-Cheatsheet.md:62
msgid "`C-f` - Move forward one character"
msgstr "`C-f` -Eén teken naar rechts verplaatsen"

#: B.02-Shortcut-Cheatsheet.md:63
msgid "`C-b` - Move backward one character"
msgstr "`C-b` - Eén teken naar achter verplaatsen"

#: B.02-Shortcut-Cheatsheet.md:64
msgid "`M-f` - Move forward one word"
msgstr "`M-f` - Eén woord naar voor springen"

#: B.02-Shortcut-Cheatsheet.md:65
msgid "`M-b` - Move backward one word"
msgstr "`M-b` -  Eén woord naar achter springen"

#: B.02-Shortcut-Cheatsheet.md:66
msgid "`C-M-n` - Move line or selection down"
msgstr "`C-M-n` -Zet lijn of selectie naar beneden"

#: B.02-Shortcut-Cheatsheet.md:67
msgid "`C-M-p` - Move line or selection up"
msgstr "`C-M-p` - Zet lijn of selectie naar boven"

#: B.02-Shortcut-Cheatsheet.md:68
msgid "`S-M-u` - Move up 10 lines"
msgstr "`S-M-u` - 10 lijnen naar boven gaan"

#: B.02-Shortcut-Cheatsheet.md:69
msgid "`S-M-d` - Move down 10 lines"
msgstr "`S-M-d` - 10 lijnen naar beneden gaan"

#: B.02-Shortcut-Cheatsheet.md:70
msgid "`M-<` - Move to beginning of buffer"
msgstr "`M-<` - Naar het begin van de buffer gaan"

#: B.02-Shortcut-Cheatsheet.md:71
msgid "`M->` - Move to end of buffer"
msgstr "`M->` - Naar het eind van de buffer gaan"

#: B.02-Shortcut-Cheatsheet.md:73
msgid "Deletion"
msgstr "Verwijdering"

#: B.02-Shortcut-Cheatsheet.md:75
msgid "`C-h` - Delete previous character"
msgstr "`C-h` - Vorige teken verwijderen"

#: B.02-Shortcut-Cheatsheet.md:76
msgid "`C-d` - Delete next character"
msgstr "`C-d` - Volgend teken verwijderen"

#: B.02-Shortcut-Cheatsheet.md:78
msgid "Advanced Editor Features"
msgstr "Geavanceerde Editor Functies"

#: B.02-Shortcut-Cheatsheet.md:80
msgid "`C-i` - Show docs for word under cursor"
msgstr "`C-i` - Toon docs voor het woord onder de cursor"

#: B.02-Shortcut-Cheatsheet.md:81
msgid "`M-z` - Undo"
msgstr "`M-z` - Ongedaan maken"

#: B.02-Shortcut-Cheatsheet.md:82
msgid "`S-M-z` - Redo"
msgstr "`S-M-z` - Opnieuw maken"

#: B.02-Shortcut-Cheatsheet.md:83
msgid "`C-g` - Escape"
msgstr "`C-g` - Verlaten"

#: B.02-Shortcut-Cheatsheet.md:84
msgid "`S-M-f` - Toggle fullscreen mode"
msgstr "`S-M-f` - Tussen Fullscreen modus schakelen"

#: B.02-Shortcut-Cheatsheet.md:85
msgid "`S-M-b` - Toggle visibility of buttons"
msgstr "`S-M-b`- Zichtbaarheid van knoppen in-/uitschakelen"

#: B.02-Shortcut-Cheatsheet.md:86
msgid "`S-M-l` - Toggle visibility of log"
msgstr "`S-M-l` - Zichtbaarheid van log in-/uitschakelen"

#: B.02-Shortcut-Cheatsheet.md:87
msgid "`S-M-m` - Toggle between light/dark modes"
msgstr "`S-M-m` - Tussen licht/donker modus schakelen"

#: B.02-Shortcut-Cheatsheet.md:88
msgid "`S-M-s` - Save contents of buffer to a file"
msgstr "`S-M-s` - Inhoud van de buffer als een bestand opslaan"

#: B.02-Shortcut-Cheatsheet.md:89
msgid "`S-M-o` - Load contents of buffer from a file"
msgstr "`S-M-o` - Inhoud van buffer vanuit een bestand laden"

#: B.03-Sharing.md:1
msgid "B.3 Sharing"
msgstr "B.3 Delen"

#: B.03-Sharing.md:3
msgid "Sharing"
msgstr "Delen"

#: B.03-Sharing.md:5
msgid "Sonic Pi is all about sharing and learning with each other."
msgstr "Sonic Pi gaat helemaal over het delen en leren met elkaar."

#: B.03-Sharing.md:7
msgid ""
"Once you've learned how to code music, sharing your compositions is as simple "
"as sending an email containing your code. Please do *share* your code with oth"
"ers so they can *learn* from your work and even use parts in a new *mash-up*."
msgstr ""
"Zodra je geleerd hebt hoe je muziek codeert, is het delen van uw composities z"
"o eenvoudig als het verzenden van een e-mail met jouw code.Deel alsjeblief je "
"code met anderen zodat zij kunnen *leren* van jouw werk en misschien onderdele"
"n te gebruiken in een nieuwe *mash-up*."

#: B.03-Sharing.md:12
msgid ""
"If you're unsure of the best way to share your work with others I recommend pu"
"tting your code on [GitHub](https://github.com) and your music on [SoundCloud]"
"(https://soundcloud.com). That way you'll be able to easily reach a large audi"
"ence."
msgstr ""
"Als u niet zeker bent van de manier om je werk met anderen te delen, adviseer "
"ik om je code op [GitHub] (https://github.com) en uw muziek op [SoundCloud] (h"
"ttps://soundcloud.com) te zetten. Op die manier kun je gemakkelijk een groot p"
"ubliek bereiken ."

#: B.03-Sharing.md:17
msgid "Code -> GitHub"
msgstr "Code -> GitHub"

#: B.03-Sharing.md:19
msgid ""
"[GitHub](https://github.com) is a site for sharing and working with code. It's"
" used by professional developers as well as artists for sharing and collaborat"
"ing with code. The simplest way to share a new piece of code (or even an unfin"
"ished piece) is to create a [Gist](https://gist.github.com). A [Gist](https://"
"gist.github.com) is a simple way of uploading your code in a simple way that o"
"thers can see, copy and share."
msgstr ""
"[GitHub] (https://github.com) is een site om met codete werken en deze te dele"
"n. Het wordt gebruikt door professionele ontwikkelaars, maar ook artiesten del"
"en en werken samen aan code. De eenvoudigste manier om een nieuw stuk code te "
"delen (zelfs een onvoltooide stukje) is het creëren van een [Gist] (https://gi"
"st.github.com). Een [Gist] (https://gist.github.com) is een eenvoudige manier "
"om  uw code te uploaden van op een zodat anderen deze kunnen zien, kopiëren en"
" delen."

#: B.03-Sharing.md:27
msgid "Audio -> SoundCloud"
msgstr "Audio -> SoundCloud"

#: B.03-Sharing.md:29
msgid ""
"Another important way of sharing your work is to record the audio and upload i"
"t to [SoundCloud](https://soundcloud.com). Once you've uploaded your piece, ot"
"her users can comment and discuss your work. I also recommend placing a link t"
"o a [Gist](https://gist.github.com) of your code in the track description."
msgstr ""
"Een andere belangrijke manier om je werk te delen is de audio opnemen en te up"
"loaden naar [SoundCloud] (https://soundcloud.com). Zodra je je stuk geüpload h"
"ebt, kunnen andere gebruikers commentaar geven en je werk bespreken . Ik advis"
"eer ook een link te plaatsen van naar een [Gist] (https://gist.github.com) met"
" uw code en daarbij de beschrijving van deze track."

#: B.03-Sharing.md:35
msgid ""
"To record your work, hit the `Rec` button in the toolbar, and recording starts"
" immediately. Hit `Run` to start your code if it isn't already in progress. Wh"
"en you're done recording, press the flashing `Rec` button again, and you'll be"
" prompted to enter a filename. The recording will be saved as a WAV file, whic"
"h can be edited and converted to MP3 by any number of free programs (try Audac"
"ity for instance)."
msgstr ""
"Om je werk op te nemen, sla de`Opname` toets aan in de gereedschapsbalk, en de"
" opname start onmiddellijk. Klik op `Afspelen` om de code te starten als deze "
"nog niet bezig mocht zijn. Als je klaar bent, druk je opnieuw op de knipperend"
"e `Opname` knop, en dan kan je een bestandsnaam kiezen. De opname wordt opgesl"
"agen als een WAV-bestand, dat kan worden bewerkt en geconverteerd naar MP3 met"
" eender welk gratis programma (probeer Audacity bijvoorbeeld)."

#: B.03-Sharing.md:43
msgid "Hope"
msgstr "Hoop"

#: B.03-Sharing.md:45
msgid ""
"I encourage you to share your work and really hope that we'll all teach each o"
"ther new tricks and moves with Sonic Pi. I'm really excited by what you'll hav"
"e to show me."
msgstr ""
"Ik moedig je aan om je werk te delen en ik hoop echt dat we van elkaar nieuwe "
"trukjes kunnen leren en met Sonic Pi  verder kunnen evolueren. Ik ben er echt "
"enthousiast om wat jij mij gaat laten zien."

#: B.04-Performing.md:1
msgid "B.4 Performing"
msgstr "B.4 Optreden"

#: B.04-Performing.md:3
msgid "Performing"
msgstr "Optreden"

#: B.04-Performing.md:5
msgid ""
"One of the most exciting aspects of Sonic Pi is that it enables you to use cod"
"e as a *musical instrument*. This means that writing code live can now be seen"
" as a new way of performing music."
msgstr ""
"Een van de meest boeiende aspecten van Sonic Pi is dat je code kunt gebruiken "
"als een *muzikaal instrument*. Dit betekent dat het schrijven van live code ka"
"n worden gezien als een nieuwe manier om muziek uit te voeren."

#: B.04-Performing.md:9
msgid "We call this *Live Coding*."
msgstr "We noemen dit *Live coderen*."

#: B.04-Performing.md:11
msgid "Show Your Screen"
msgstr "Laat je scherm zien"

#: B.04-Performing.md:13
msgid ""
"When you live code I recommend you *show your screen* to your audience. Otherw"
"ise it's like playing a guitar but hiding your fingers and the strings. When I"
" practice at home I use a Raspberry Pi and a little mini projector on my livin"
"g room wall. You could use your TV or one of your school/work projectors to gi"
"ve a show. Try it, it's a lot of fun."
msgstr ""
"Wanneer je live codeert rad ik je aan om *je scherm te tonen* aan je publiek. "
"Anders ben je je als een gitarist die zijn handen niet laat zien. Wanneer ik t"
"huis oefen gebruik ik een Raspberry Pi en een kleine mini projector gericht op"
" de muur van mijn living. Je zou je TV kunnen gebruiken of een projector van h"
"et werk of jouw school om een show te geven. Probeer dit, het is erg leuk."

#: B.04-Performing.md:20
msgid "Form a Band"
msgstr "Vorm een Band"

#: B.04-Performing.md:22
msgid ""
"Don't just play on your own - form a live coding band! It's a lot of fun jammi"
"ng with others. One person could do beats, another ambient background, etc. Us"
"e the `live_audio` functionality to combine code with traditional instruments "
"such as a guitar or a microphone."
msgstr ""

#: B.04-Performing.md:27
msgid "See what interesting combinations of sounds you can create with code."
msgstr ""

#: B.04-Performing.md:29
msgid "TOPLAP"
msgstr "TOPLAP"

#: B.04-Performing.md:31
msgid ""
"Live coding isn't completely new - a small number of people have been doing it"
" for a few years now, typically using bespoke systems they've built for themse"
"lves. A great place to go and find out more about other live coders and system"
"s is [TOPLAP](http://toplap.org)."
msgstr ""
"Live coderen is niet nieuw - een kleine groep mensen doen dit al gedurende enk"
"ele jaren meestal met behulp van op maat gemaakte systemen die ze voor zichzel"
"f hebben gebouwd. Een goeie plek om meer over deze live coders en hun systemen"
" te weten te komen is  [TOPLAP](http://toplap.org)."

#: B.04-Performing.md:36
msgid "Algorave"
msgstr "Algorave"

#: B.04-Performing.md:38
msgid ""
"Another great resource for exploring the live coding world is [Algorave](http:"
"//algorave.com). Here you can find all about a specific strand of live coding "
"for making music in nightclubs."
msgstr ""
"Een andere interessante bron om de wereld van live coding te leren kennen is ["
"Algorave](http://algorave.com). Hier kan je alles vinden over de verschillende"
" onderdelen om live te spelen in een nachtclub."

#: C-Minecraft-Pi.md:1
msgid "C Minecraft Pi"
msgstr "C Minecraft Pi"

#: C-Minecraft-Pi.md:3
msgid "Minecraft Pi"
msgstr "Minecraft Pi"

#: C-Minecraft-Pi.md:5
msgid ""
"Sonic Pi now supports a simple API for interacting with Minecraft Pi - the spe"
"cial edition of Minecraft which is installed by default on the Raspberry Pi's "
"Raspbian Linux-based operating system."
msgstr ""
"Sonic Pi ondersteunt nu een eenvoudige API voor interactie met Minecraft Pi - "
"de speciale editie van Minecraft is standaard op de Raspberry Pi's (Raspbian's"
" Linux-gebaseerd OS) geïnstalleerd."

#: C-Minecraft-Pi.md:9
msgid "No need to import libraries"
msgstr "Libraries importeren onnodig"

#: C-Minecraft-Pi.md:11
msgid ""
"The Minecraft Pi integration has been designed to be insanely easy to use. All"
" you need to do is to launch Minecraft Pi and create a world. You're then free"
" to use the `mc_*` fns just like you might use `play` and `synth`. There's no "
"need to import anything or install any libraries - it's all ready to go and wo"
"rks out of the box."
msgstr ""
"De Minecraft Pi-integratie is ontwikkeld om makkelijk te gebruiken. Al wat je "
"moet te doen is te Minecraft Pi lanceren en een wereld creëren. Dan bent je vr"
"ij om `mc_*` fns te gebruiken, net zoals `play` and `synth` . Er is geen behoe"
"fte om te bibliotheken te gaan importeren -alles is klaar om te gaan gebruiken"
"."

#: C-Minecraft-Pi.md:17
msgid "Automatic Connection"
msgstr "Automatische Verbinding"

#: C-Minecraft-Pi.md:19
msgid ""
"The Minecraft Pi API takes care of managing your connection to the Minecraft P"
"i application. This means you don't need to worry about a thing. If you try an"
"d use the Minecraft Pi API when Minecraft Pi isn't open, Sonic Pi will politel"
"y tell you. Similarly, if you close Minecraft Pi whilst you're still running a"
" `live_loop` that uses the API, the live loop will stop and politely tell you "
"that it can't connect. To reconnect, just launch Minecraft Pi again and Sonic "
"Pi will automatically detect and re-create the connection for you."
msgstr ""
"De Minecraft Pi API zorgt voor het beheren van uw verbinding met de Minecraft "
"Pi-toepassing.Geen zorgen dus. Als u probeert  Minecraft Pi API te  gebruiken "
"wanneer Minecraft Pi niet geopend is, zal Sonic Pi je dat vriendelijk vertelle"
"n.Ook als u Minecraft Pi sluit terwij ler nog steeds een 'live_loop' speelt, d"
"ie gebruik maakt van de API, zal de live loop stoppen en je vertellen dat deze"
" geen verbinding kan maken. Als je wil verbinden, lanceer gewoon opnieuw de Mi"
"necraft Pi en Sonic Pi zal dan automatisch detecteren en de verbinding voor u "
"opnieuw  maken."

#: C-Minecraft-Pi.md:28
msgid "Designed to be Live Coded"
msgstr "Ontworpen om Live gecodeerd te worden"

#: C-Minecraft-Pi.md:30
msgid ""
"The Minecraft Pi API has been designed to work seamlessly within `live_loop`s."
" This means it's possible to synchronise modifications in your Minecraft Pi wo"
"rlds with modifications in your Sonic Pi sounds. Instant Minecraft-based music"
" videos! Note however that Minecraft Pi is alpha software and is known to be s"
"lightly buggy. If you encounter any problems simply restart Minecraft Pi and c"
"arry on as before. Sonic Pi's automatic connection functionality will take car"
"e of things for you."
msgstr ""
"De Minecraft Pi API is ontworpen om naadloos te werken binnen ' live_loop. Hie"
"rdoor is het mogelijk om wijzigingen in uw Minecraft Pi werelden te synchronis"
"eren met wijzigingen in uw Sonic Pi klanken. Instant Minecraft gebaseerde muzi"
"ek video's! Merk wel op dat het gaat om Minecraft Pi Alfa software is endus en"
"igszins buggy. Als u problemen hebt, start Minecraft Pi gewoon terug op. Sonic"
" Pi's automatische verbinding functionaliteit zal voor de rest zorgen."

#: C-Minecraft-Pi.md:39
msgid "Requires a Raspberry Pi 2.0"
msgstr "Een Raspberry Pi 2.0 vereist"

#: C-Minecraft-Pi.md:41
msgid ""
"It is highly recommended that you use a Raspberry Pi 2 if you wish to run both"
" Sonic Pi and Minecraft at the same time - especially if you want to use Sonic"
" Pi's sound capabilities."
msgstr ""
"Het is sterk aanbevolen een Raspberry Pi 2 te gebruiken als u Sonic Pi en Mine"
"craft samen gebruikt - vooral als je gebruik wilt maken van Sonic Pi's geluids"
" mogelijkheden."

#: C-Minecraft-Pi.md:45
msgid "API Support"
msgstr "API-ondersteuning"

#: C-Minecraft-Pi.md:47
#, fuzzy
msgid ""
"At this stage, Sonic Pi supports basic block and player manipulations which ar"
"e detailed in Section C.1. Support for event callbacks triggered by player int"
"eractions in the world is planned for a future release."
msgstr ""
"In dit stadium ondersteunt Sonic Pi fundamentele blok en manipulaties van de s"
"peler die zijn beschreven in de sectie 11.1. Ondersteuning voor event callback"
"s getriggerd door interacties met de speler en de rest van de wereld is geplan"
"d voor een toekomstige versie."

#: C.01-Basic-API.md:1
#, fuzzy
msgid "C.1 Basic API"
msgstr "11.1 Basis API"

#: C.01-Basic-API.md:3
msgid "Basic Minecraft Pi API"
msgstr "Basis Minecraft Pi API"

#: C.01-Basic-API.md:5
msgid ""
"Sonic Pi currently supports the following basic interactions with Minecraft Pi"
":"
msgstr ""
"Sonic Pi ondersteunt momenteel de volgende fundamentele interacties met Minecr"
"aft Pi:"

#: C.01-Basic-API.md:7 C.01-Basic-API.md:16
msgid "Displaying chat messages"
msgstr "Chatberichten weergeven"

#: C.01-Basic-API.md:8 C.01-Basic-API.md:33
msgid "Setting the position of the user"
msgstr "De plaats van de gebruiker instellen"

#: C.01-Basic-API.md:9
msgid "Getting the position of the user"
msgstr "De positie van de gebruiker verkrijgen"

#: C.01-Basic-API.md:10
msgid "Setting the block type at a given coordinate"
msgstr "Het bloktype instellen op een bepaalde coördinaat"

#: C.01-Basic-API.md:11
msgid "Getting the block type at a given coordinate"
msgstr "Het krijgen van het bloktype bij een bepaalde coördinaat"

#: C.01-Basic-API.md:14
msgid "Let's look at each of these in turn."
msgstr "Laten we deze op hun beurt eens bekijken ."

#: C.01-Basic-API.md:18
msgid ""
"Let's see just how easy it is to control Minecraft Pi from Sonic Pi. First, ma"
"ke sure you have both Minecraft Pi and Sonic Pi open at the same time and also"
" make sure you've entered a Minecraft world and can walk around."
msgstr ""
"Laten we eens kijken hoe makkelijk het is om Minecraft Pi vanuit  Sonic Pi te "
"controllen. Controleer eerst of u zowel Minecraft Pi en Sonic Pi open hebt sta"
"an en ook zorg ervoor dat u een Minecraft wereld hebt ingevoerd en je hier kan"
" in rondlopen."

#: C.01-Basic-API.md:23
msgid "In a fresh Sonic Pi buffer simply enter the following code:"
msgstr "Voer de volgende code in een verse Sonic Pi-buffer:"

#: C.01-Basic-API.md:25
#, no-wrap
msgid "mc_message \"Hello from Sonic Pi\""
msgstr "mc_message \"Hello from Sonic Pi\""

#: C.01-Basic-API.md:29
msgid ""
"When you hit the *Run* button, you'll see your message flash up on the Minecra"
"ft window. Congratulations, you've written your first Minecraft code! That was"
" easy wasn't it."
msgstr ""
"Wanneer je de *Afspeel* knop indrukt zal je je berichtje openspringen op het M"
"inecraft-scherm. Gefeliciteerd, hebt u uw eerste Minecraft code geschreven! Da"
"t was niet moeilijk."

#: C.01-Basic-API.md:35
msgid ""
"Now, let's try a little magic. Let's teleport ourselves somewhere! Try the fol"
"lowing:"
msgstr ""
"Nu gaan we  wat magie gebruiken. Laten we onszelf naar ergens anders teleporte"
"ren. Probeer het volgende:"

#: C.01-Basic-API.md:38
#, no-wrap
msgid "mc_teleport 50, 50, 50"
msgstr "mc_teleport 50, 50, 50"

#: C.01-Basic-API.md:42
#, fuzzy
msgid ""
"When you hit *Run* - boom! You're instantly transported to a new place. Most l"
"ikely it was somewhere in the sky and you fell down either to dry land or into"
" water. Now, what are those numbers: `50, 50, 50`? They're the coordinates of "
"the location you're trying to teleport to. Let's take a brief moment to explor"
"e what coordinates are and how they work because they're really, really import"
"ant for programming Minecraft."
msgstr ""
"Wanneer je de * afspeel* knop indrukt - bam! Je bent inmiddelijk op een nieuwe"
" plek. Waarschijnlijk ergens in de lucht en dat je op de grond of in het water"
" viel. Nu, wat zijn die nummers : '50, 50, 50'? Dat zijn de coördinaten van de"
" plaats waarnaartoe je probeerde te teleporteren. Neem de tijd om  coördinaten"
" te verkennen en wat deze  zijn en hoe ze werken.Dit is echt belangrijk om Min"
"ecraft te kunnen programmeren."

#: C.01-Basic-API.md:50
msgid "Coordinates"
msgstr "Coördinaten"

#: C.01-Basic-API.md:52
msgid ""
"Imagine a pirate's map with a big `X` marking the location of some treasure. T"
"he exact location of the `X` can be described with two numbers - how far along"
" the map from left to right and how far along the map from bottom to top. For "
"example `10cm` across and `8cm` up. These two numbers `10` and `8` are coordin"
"ates. You could easily imagine describing the locations of other stashes of tr"
"easure with other pairs of numbers. Perhaps there's a big chest of gold at `2`"
" across and `9` up..."
msgstr ""
"Stel je een piraten kaart voor met een grote `X`om de locatie van één of ander"
"e schat te markeren. De exacte locatie van de `X` kan beschreven worden met tw"
"ee cijfers- hoe ver van links naar rechts op de kaart en hoe ver op de kaart v"
"an beneden naar boven in de kaart. Bijvoorbeeld  `10cm` over en `8cm`  naar om"
"hoog. Deze twee nummers `10`en `8` zijn coördinaten. Je kan je goed voorstelle"
"n hoe andere locaties van schatten met andere cijfercombinaties worden beschre"
"ven. Misschien is er een grote kist met goud aan `2` en `9` omhoog..."

#: C.01-Basic-API.md:61
msgid ""
"Now, in Minecraft two numbers isn't quite enough. We also need to know how hig"
"h we are. We therefore need three numbers:"
msgstr ""
"Nu, twee getallen zijn in Minecraft niet genoeg. We willen ook weten hoe hoog "
"we zitten. Daarvoor hebben we drie getallen nodig:"

#: C.01-Basic-API.md:64
msgid "How far from right to left in the world - `x`"
msgstr "Hoe ver van rechts naar links in de wereld - 'x'"

#: C.01-Basic-API.md:65
msgid "How far from front to back in the world - `z`"
msgstr "Hoe ver van voor naar achter in de wereld - 'z'"

#: C.01-Basic-API.md:66
msgid "How high up we are in the world - `y`"
msgstr "Hoe hoog, we in de wereld zijn - 'y'"

#: C.01-Basic-API.md:68
msgid ""
"One more thing - we typically describe these coordinates in this order `x`, `y"
"`, `z`."
msgstr ""
"Nog even dit - meestal schrijven we deze coördinaten in deze volgorde`x`, `y`,"
" `z`."

#: C.01-Basic-API.md:71
msgid "Finding your current coordinates"
msgstr "Je huidige coördinaten vinden"

#: C.01-Basic-API.md:73
msgid ""
"Let's have a play with coordinates. Navigate to a nice place in the Minecraft "
"map and then switch over to Sonic Pi. Now enter the following:"
msgstr ""
"Laten we een spelletje doen met de coördinaten. Navigeer naar een mooie plek i"
"n de Minecraft kaart en schakel om naar Sonic Pi. Voer nu de volgende gegevens"
" in:"

#: C.01-Basic-API.md:76
#, no-wrap
msgid "puts mc_location"
msgstr "puts mc_location"

#: C.01-Basic-API.md:80
msgid ""
"When you hit the *Run* button you'll see the coordinates of your current posit"
"ion displayed in the log window. Take a note of them, then move forward in the"
" world and try again. Notice how the coordinates changed! Now, I recommend you"
" spend some time repeating exactly this - move a bit in the world, take a look"
" at the coordinates and repeat. Do this until you start to get a feel for how "
"the coordinates change when you move. Once you've understood how coordinates w"
"ork, programming with the Minecraft API will be a complete breeze."
msgstr ""
"Wanneer je op de*Afspeel* knop drukt zie je de coördinaten van uw huidige posi"
"tie weergegeven worden in het logboekvenster. Neem hier nota van, ga vooruit i"
"n de wereld en probeer het dan nog eens. Merk op hoe de coördinaten veranderen"
"! Nu, adviseer ik je om dit even te herhalen - beweeg een beetje in de wereld,"
" neem een kijkje naar de coördinaten en herhaal opnieuw. Doe dit tot je er een"
" zeker gevoel voor begint te krijgen, hoe deze coördinaten veranderen wanneer "
"je je verplaatst. Zodra je hebt begrepen hoe deze coördinaten werken, zal het "
"programmeren met de Minecraft-API peanuts worden."

#: C.01-Basic-API.md:89
msgid "Let's Build!"
msgstr "Laten we gaan bouwen!"

#: C.01-Basic-API.md:91
msgid ""
"Now that you know how to find the current position and to teleport using coord"
"inates, you have all the tools you need to start building things in Minecraft "
"with code. Let's say you want to make the block with coordinates `40`, `50`, `"
"60` to be glass. That's super easy:"
msgstr ""
"Nu je de huidige positie weet te vinden en je kan teleporteren met behulp van "
"coördinaten, heb je alle hulpmiddelen die die je nodig hebt om met code te gaa"
"n beginnen bouwen in Minecraft. Stel dat je het blok met coördinaten `40`, `50"
"`, `60` van glas wordt. Dat is nu super eenvoudig:"

#: C.01-Basic-API.md:96
#, no-wrap
msgid "mc_set_block :glass, 40, 50, 60"
msgstr "mc_set_block :glass, 40, 50, 60"

#: C.01-Basic-API.md:100
msgid ""
"Haha, it really was that easy. To see your handywork just teleport nearby and "
"take a look:"
msgstr ""
"Haha, het was echt zo makkelijk. Om je werkstuk te zien, teleporteer je je in "
"de buurt en bekijk deze nu:"

#: C.01-Basic-API.md:103
#, no-wrap
msgid "mc_teleport 35, 50, 60"
msgstr "mc_teleport 35, 50, 60"

#: C.01-Basic-API.md:107
msgid ""
"Now turn around and you should see your glass block! Try changing it to diamon"
"d:"
msgstr ""
"Draai nu even rond en je zou je glazen blok moeten zien staan! Probeer deze nu"
" in diamant te veranderen:"

#: C.01-Basic-API.md:110
#, no-wrap
msgid "mc_set_block :diamond, 40, 50, 60"
msgstr "mc_set_block :diamond, 40, 50, 60"

#: C.01-Basic-API.md:114
msgid ""
"If you were looking in the right direction you might have even seen it change "
"in front of your eyes! This is the start of something exciting..."
msgstr ""
"Als je goed keek, zag je het met jij eigen ogen veranderen! Dit is het begin v"
"an iets groots..."

#: C.01-Basic-API.md:117
msgid "Looking at blocks"
msgstr "Blokken bekijken"

#: C.01-Basic-API.md:119
msgid ""
"Let's look at one last thing before we move onto something a bit more involved"
". Given a set of coordinates we can ask Minecraft what the type of a specific "
"block is. Let's try it with the diamond block you just created:"
msgstr ""
"Nog een laatste, voor we ons in iets anders engageren. Met een set van coördin"
"aten kunnen we Minecraft vragen, welk type een bepaalde blok is. Laat ons dit "
"proberen met onze zopas aangemaakte blok:"

#: C.01-Basic-API.md:124
#, no-wrap
msgid "puts mc_get_block 40, 50, 60"
msgstr "puts mc_get_block 40, 50, 60"

#: C.01-Basic-API.md:128
msgid ""
"Yey! It's `:diamond`. Try changing it back to glass and asking again - does it"
" now say `:glass`? I'm sure it does :-)"
msgstr ""
"Jeuj! Het is `:diamond`.Probeer deze nu terug te veranderen naar glas en vraag"
" het dan opnieuw. Zegt het nu `:glass`? Ik ben zeker van wel :-)"

#: C.01-Basic-API.md:131
msgid "Available block types"
msgstr "De beschikbare bloktypes"

#: C.01-Basic-API.md:133
msgid ""
"Before you go on a Minecraft Pi coding rampage, you might find this list of av"
"ailable block types useful:"
msgstr ""
"Voor je helemaal loos gaat met het coderen van Minecraft Pi, moet je misschien"
" deze lijst met beschikbare bloktypes even bekijken:"

#: C.01-Basic-API.md:136
#, no-wrap
msgid ""
"    :air\n"
"    :stone\n"
"    :grass\n"
"    :dirt\n"
"    :cobblestone\n"
"    :wood_plank\n"
"    :sapling\n"
"    :bedrock\n"
"    :water_flowing\n"
"    :water\n"
"    :water_stationary\n"
"    :lava_flowing\n"
"    :lava\n"
"    :lava_stationary\n"
"    :sand\n"
"    :gravel\n"
"    :gold_ore\n"
"    :iron_ore\n"
"    :coal_ore\n"
"    :wood\n"
"    :leaves\n"
"    :glass\n"
"    :lapis\n"
"    :lapis_lazuli_block\n"
"    :sandstone\n"
"    :bed\n"
"    :cobweb\n"
"    :grass_tall\n"
"    :flower_yellow\n"
"    :flower_cyan\n"
"    :mushroom_brown\n"
"    :mushroom_red\n"
"    :gold_block\n"
"    :gold\n"
"    :iron_block\n"
"    :iron\n"
"    :stone_slab_double\n"
"    :stone_slab\n"
"    :brick\n"
"    :brick_block\n"
"    :tnt\n"
"    :bookshelf\n"
"    :moss_stone\n"
"    :obsidian\n"
"    :torch\n"
"    :fire\n"
"    :stairs_wood\n"
"    :chest\n"
"    :diamond_ore\n"
"    :diamond_block\n"
"    :diamond\n"
"    :crafting_table\n"
"    :farmland\n"
"    :furnace_inactive\n"
"    :furnace_active\n"
"    :door_wood\n"
"    :ladder\n"
"    :stairs_cobblestone\n"
"    :door_iron\n"
"    :redstone_ore\n"
"    :snow\n"
"    :ice\n"
"    :snow_block\n"
"    :cactus\n"
"    :clay\n"
"    :sugar_cane\n"
"    :fence\n"
"    :glowstone_block\n"
"    :bedrock_invisible\n"
"    :stone_brick\n"
"    :glass_pane\n"
"    :melon\n"
"    :fence_gate\n"
"    :glowing_obsidian\n"
"    :nether_reactor_core"
msgstr ""
"    :air\n"
"    :stone\n"
"    :grass\n"
"    :dirt\n"
"    :cobblestone\n"
"    :wood_plank\n"
"    :sapling\n"
"    :bedrock\n"
"    :water_flowing\n"
"    :water\n"
"    :water_stationary\n"
"    :lava_flowing\n"
"    :lava\n"
"    :lava_stationary\n"
"    :sand\n"
"    :gravel\n"
"    :gold_ore\n"
"    :iron_ore\n"
"    :coal_ore\n"
"    :wood\n"
"    :leaves\n"
"    :glass\n"
"    :lapis\n"
"    :lapis_lazuli_block\n"
"    :sandstone\n"
"    :bed\n"
"    :cobweb\n"
"    :grass_tall\n"
"    :flower_yellow\n"
"    :flower_cyan\n"
"    :mushroom_brown\n"
"    :mushroom_red\n"
"    :gold_block\n"
"    :gold\n"
"    :iron_block\n"
"    :iron\n"
"    :stone_slab_double\n"
"    :stone_slab\n"
"    :brick\n"
"    :brick_block\n"
"    :tnt\n"
"    :bookshelf\n"
"    :moss_stone\n"
"    :obsidian\n"
"    :torch\n"
"    :fire\n"
"    :stairs_wood\n"
"    :chest\n"
"    :diamond_ore\n"
"    :diamond_block\n"
"    :diamond\n"
"    :crafting_table\n"
"    :farmland\n"
"    :furnace_inactive\n"
"    :furnace_active\n"
"    :door_wood\n"
"    :ladder\n"
"    :stairs_cobblestone\n"
"    :door_iron\n"
"    :redstone_ore\n"
"    :snow\n"
"    :ice\n"
"    :snow_block\n"
"    :cactus\n"
"    :clay\n"
"    :sugar_cane\n"
"    :fence\n"
"    :glowstone_block\n"
"    :bedrock_invisible\n"
"    :stone_brick\n"
"    :glass_pane\n"
"    :melon\n"
"    :fence_gate\n"
"    :glowing_obsidian\n"
"    :nether_reactor_core"
